
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00001c00  00001c00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001f72  00001f72  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800060  00001f72  000003e6  2**0
                  ALLOC
  3 .stab         00000f48  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c0  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001c00 <__ctors_end>:
    1c00:	11 24       	eor	r1, r1
    1c02:	1f be       	out	0x3f, r1	; 63
    1c04:	cf e5       	ldi	r28, 0x5F	; 95
    1c06:	d4 e0       	ldi	r29, 0x04	; 4
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	cd bf       	out	0x3d, r28	; 61

00001c0c <__do_clear_bss>:
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	a0 e6       	ldi	r26, 0x60	; 96
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <.do_clear_bss_start>

00001c14 <.do_clear_bss_loop>:
    1c14:	1d 92       	st	X+, r1

00001c16 <.do_clear_bss_start>:
    1c16:	a0 3a       	cpi	r26, 0xA0	; 160
    1c18:	b1 07       	cpc	r27, r17
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <.do_clear_bss_loop>
    1c1c:	1a d0       	rcall	.+52     	; 0x1c52 <main>
    1c1e:	a7 c1       	rjmp	.+846    	; 0x1f6e <_exit>

00001c20 <__bad_interrupt>:
    1c20:	17 c0       	rjmp	.+46     	; 0x1c50 <__vector_default>

00001c22 <sendchar>:
#if defined(ENABLED_RS485)
RSPORT |= (1 << RSPIN);
_delay_ms(RS_DELAY);
#endif

	while (!(UART_STATUS & (1<<UART_TXREADY)));
    1c22:	5d 9b       	sbis	0x0b, 5	; 11
    1c24:	fe cf       	rjmp	.-4      	; 0x1c22 <sendchar>
	UART_DATA = data;
    1c26:	8c b9       	out	0x0c, r24	; 12
#if defined(ENABLED_RS485)
_delay_ms(RS_DELAY);
RSPORT &= ~(1 << RSPIN);

#endif
}
    1c28:	08 95       	ret

00001c2a <recvchar>:

static uint8_t recvchar(void)
{
	while (!(UART_STATUS & (1<<UART_RXREADY)));
    1c2a:	5f 9b       	sbis	0x0b, 7	; 11
    1c2c:	fe cf       	rjmp	.-4      	; 0x1c2a <recvchar>
	return UART_DATA;
    1c2e:	8c b1       	in	r24, 0x0c	; 12
}
    1c30:	08 95       	ret

00001c32 <send_boot>:
}
#endif

static void send_boot(void)
{
	sendchar('A');
    1c32:	81 e4       	ldi	r24, 0x41	; 65
    1c34:	f6 df       	rcall	.-20     	; 0x1c22 <sendchar>
	sendchar('V');
    1c36:	86 e5       	ldi	r24, 0x56	; 86
    1c38:	f4 df       	rcall	.-24     	; 0x1c22 <sendchar>
	sendchar('R');
    1c3a:	82 e5       	ldi	r24, 0x52	; 82
    1c3c:	f2 df       	rcall	.-28     	; 0x1c22 <sendchar>
	sendchar('B');
    1c3e:	82 e4       	ldi	r24, 0x42	; 66
    1c40:	f0 df       	rcall	.-32     	; 0x1c22 <sendchar>
	sendchar('O');
    1c42:	8f e4       	ldi	r24, 0x4F	; 79
    1c44:	ee df       	rcall	.-36     	; 0x1c22 <sendchar>
	sendchar('O');
    1c46:	8f e4       	ldi	r24, 0x4F	; 79
    1c48:	ec df       	rcall	.-40     	; 0x1c22 <sendchar>
	sendchar('T');
    1c4a:	84 e5       	ldi	r24, 0x54	; 84
    1c4c:	ea df       	rcall	.-44     	; 0x1c22 <sendchar>
}
    1c4e:	08 95       	ret

00001c50 <__vector_default>:

#if defined(BOOTLOADERHASNOVECTORS)
#warning "This Bootloader does not link interrupt vectors - see makefile"
/* make the linker happy - it wants to see __vector_default */
// void __vector_default(void) { ; }
void __vector_default(void) { ; }
    1c50:	08 95       	ret

00001c52 <main>:

static void (*jump_to_app)(void) = 0x0000;

//=========================================================================================================================
int main(void)
{
    1c52:	2f 92       	push	r2
    1c54:	3f 92       	push	r3
    1c56:	4f 92       	push	r4
    1c58:	5f 92       	push	r5
    1c5a:	6f 92       	push	r6
    1c5c:	7f 92       	push	r7
    1c5e:	8f 92       	push	r8
    1c60:	9f 92       	push	r9
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <main+0x26>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
#ifdef DISABLE_WDT_AT_STARTUP
#ifdef WDT_OFF_SPECIAL
#warning "using target specific watchdog_off"
	bootloader_wdt_off();
#else
	cli();
    1c7c:	f8 94       	cli
	wdt_reset();
    1c7e:	a8 95       	wdr
	wdt_disable();
    1c80:	88 e1       	ldi	r24, 0x18	; 24
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	81 bd       	out	0x21, r24	; 33
    1c88:	11 bc       	out	0x21, r1	; 33
    1c8a:	0f be       	out	0x3f, r0	; 63
	
#ifdef START_POWERSAVE
	uint8_t OK = 1;
#endif

	BLDDR  &= ~(1<<BLPNUM);		// set as Input
    1c8c:	8b 98       	cbi	0x11, 3	; 17
	BLPORT |= (1<<BLPNUM);		// Enable pullup
    1c8e:	93 9a       	sbi	0x12, 3	; 18

	// Set baud rate
	UART_BAUD_HIGH = (UART_CALC_BAUDRATE(BAUDRATE)>>8) & 0xFF;
    1c90:	10 bc       	out	0x20, r1	; 32
	UART_BAUD_LOW = (UART_CALC_BAUDRATE(BAUDRATE) & 0xFF);
    1c92:	97 e1       	ldi	r25, 0x17	; 23
    1c94:	99 b9       	out	0x09, r25	; 9

#ifdef UART_DOUBLESPEED
	UART_STATUS = ( 1<<UART_DOUBLE );
#endif

	UART_CTRL = UART_CTRL_DATA;
    1c96:	8a b9       	out	0x0a, r24	; 10
	UART_CTRL2 = UART_CTRL2_DATA;
    1c98:	86 e8       	ldi	r24, 0x86	; 134
    1c9a:	80 bd       	out	0x20, r24	; 32
    1c9c:	ee 24       	eor	r14, r14
    1c9e:	ff 24       	eor	r15, r15
			if (UART_DATA == START_WAIT_UARTCHAR)
				break;

		if (cnt++ >= WAIT_VALUE) {
			BLPORT &= ~(1<<BLPNUM);		// set to default
			jump_to_app();			// Jump to application sector
    1ca0:	00 e0       	ldi	r16, 0x00	; 0
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
#elif defined(START_WAIT)

	uint16_t cnt = 0;

	while (1) {
		if (UART_STATUS & (1<<UART_RXREADY))
    1ca4:	5f 9b       	sbis	0x0b, 7	; 11
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <main+0x5c>
			if (UART_DATA == START_WAIT_UARTCHAR)
    1ca8:	8c b1       	in	r24, 0x0c	; 12
    1caa:	83 35       	cpi	r24, 0x53	; 83
    1cac:	91 f0       	breq	.+36     	; 0x1cd2 <main+0x80>
				break;

		if (cnt++ >= WAIT_VALUE) {
    1cae:	2c e2       	ldi	r18, 0x2C	; 44
    1cb0:	e2 16       	cp	r14, r18
    1cb2:	21 e0       	ldi	r18, 0x01	; 1
    1cb4:	f2 06       	cpc	r15, r18
    1cb6:	18 f0       	brcs	.+6      	; 0x1cbe <main+0x6c>
			BLPORT &= ~(1<<BLPNUM);		// set to default
    1cb8:	93 98       	cbi	0x12, 3	; 18
			jump_to_app();			// Jump to application sector
    1cba:	f8 01       	movw	r30, r16
    1cbc:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	97 e4       	ldi	r25, 0x47	; 71
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <main+0x70>
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <main+0x76>
    1cc8:	00 00       	nop
    1cca:	08 94       	sec
    1ccc:	e1 1c       	adc	r14, r1
    1cce:	f1 1c       	adc	r15, r1
    1cd0:	e9 cf       	rjmp	.-46     	; 0x1ca4 <main+0x52>
		}

		_delay_ms(10);
	}
	send_boot();
    1cd2:	af df       	rcall	.-162    	; 0x1c32 <send_boot>

//=========================================================================================================================
int main(void)
{
	uint16_t address = 0;
	uint8_t device = 0, val;
    1cd4:	ee 24       	eor	r14, r14
static void (*jump_to_app)(void) = 0x0000;

//=========================================================================================================================
int main(void)
{
	uint16_t address = 0;
    1cd6:	22 24       	eor	r2, r2
    1cd8:	33 24       	eor	r3, r3
			}
			sendchar('\r');

		// Exit upgrade
		} else if (val == 'E') {
			wdt_enable(EXIT_WDT_TIME); // Enable Watchdog Timer to give reset
    1cda:	1c e0       	ldi	r17, 0x0C	; 12
    1cdc:	81 2e       	mov	r8, r17
	while (APP_END > addr) {
		boot_page_erase(addr);		// Perform page erase
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
	}
	boot_rww_enable();
    1cde:	b1 e1       	ldi	r27, 0x11	; 17
    1ce0:	9b 2e       	mov	r9, r27
#else
#error "Select START_ condition for bootloader in main.c"
#endif

	for(;;) {
		val = recvchar();
    1ce2:	a3 df       	rcall	.-186    	; 0x1c2a <recvchar>
		// Autoincrement?
		if (val == 'a') {
    1ce4:	81 36       	cpi	r24, 0x61	; 97
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <main+0x9a>
			sendchar('Y');			// Autoincrement is quicker
    1ce8:	89 e5       	ldi	r24, 0x59	; 89
    1cea:	2a c1       	rjmp	.+596    	; 0x1f40 <main+0x2ee>

		//write address
		} else if (val == 'A') {
    1cec:	81 34       	cpi	r24, 0x41	; 65
    1cee:	49 f4       	brne	.+18     	; 0x1d02 <main+0xb0>
			address = recvchar();		//read address 8 MSB
    1cf0:	9c df       	rcall	.-200    	; 0x1c2a <recvchar>
			address = (address<<8) | recvchar();
    1cf2:	58 2e       	mov	r5, r24
    1cf4:	44 24       	eor	r4, r4
    1cf6:	99 df       	rcall	.-206    	; 0x1c2a <recvchar>
    1cf8:	28 2e       	mov	r2, r24
    1cfa:	33 24       	eor	r3, r3
    1cfc:	24 28       	or	r2, r4
    1cfe:	35 28       	or	r3, r5
    1d00:	07 c1       	rjmp	.+526    	; 0x1f10 <main+0x2be>
			sendchar('\r');

		// Buffer load support
		} else if (val == 'b') {
    1d02:	82 36       	cpi	r24, 0x62	; 98
    1d04:	31 f4       	brne	.+12     	; 0x1d12 <main+0xc0>
			sendchar('Y');					// Report buffer load supported
    1d06:	89 e5       	ldi	r24, 0x59	; 89
    1d08:	8c df       	rcall	.-232    	; 0x1c22 <sendchar>
			sendchar((sizeof(gBuffer) >> 8) & 0xFF);	// Report buffer size in bytes
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	8a df       	rcall	.-236    	; 0x1c22 <sendchar>
			sendchar(sizeof(gBuffer) & 0xFF);
    1d0e:	80 e4       	ldi	r24, 0x40	; 64
    1d10:	17 c1       	rjmp	.+558    	; 0x1f40 <main+0x2ee>

		// Start buffer load
		} else if (val == 'B') {
    1d12:	82 34       	cpi	r24, 0x42	; 66
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <main+0xc6>
    1d16:	71 c0       	rjmp	.+226    	; 0x1dfa <main+0x1a8>
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1d18:	88 df       	rcall	.-240    	; 0x1c2a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1d1a:	87 df       	rcall	.-242    	; 0x1c2a <recvchar>
    1d1c:	f8 2e       	mov	r15, r24
			val = recvchar();				// Load memory type ('E' or 'F')
    1d1e:	85 df       	rcall	.-246    	; 0x1c2a <recvchar>
    1d20:	28 2f       	mov	r18, r24
    1d22:	00 e6       	ldi	r16, 0x60	; 96
    1d24:	10 e0       	ldi	r17, 0x00	; 0
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) {
    1d26:	90 e0       	ldi	r25, 0x00	; 0
		*tmp++ = (cnt < size) ? recvchar() : 0xFF;
    1d28:	9f 15       	cp	r25, r15
    1d2a:	30 f4       	brcc	.+12     	; 0x1d38 <main+0xe6>
    1d2c:	29 83       	std	Y+1, r18	; 0x01
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	7c df       	rcall	.-264    	; 0x1c2a <recvchar>
    1d32:	29 81       	ldd	r18, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <main+0xe8>
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	8d 93       	st	X+, r24
    1d3e:	8d 01       	movw	r16, r26
static inline void recvBuffer(pagebuf_t size)
{
	pagebuf_t cnt;
	uint8_t *tmp = gBuffer;

	for (cnt = 0; cnt < sizeof(gBuffer); cnt++) {
    1d40:	9f 5f       	subi	r25, 0xFF	; 255
    1d42:	90 34       	cpi	r25, 0x40	; 64
    1d44:	89 f7       	brne	.-30     	; 0x1d28 <main+0xd6>
			size = recvchar() << 8;				// Load high byte of buffersize
			size |= recvchar();				// Load low byte of buffersize
			val = recvchar();				// Load memory type ('E' or 'F')
			recvBuffer(size);

			if (device == DEVTYPE) {
    1d46:	be 2d       	mov	r27, r14
    1d48:	b7 37       	cpi	r27, 0x77	; 119
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <main+0xfc>
    1d4c:	d5 c0       	rjmp	.+426    	; 0x1ef8 <main+0x2a6>
				if (val == 'F') {
    1d4e:	26 34       	cpi	r18, 0x46	; 70
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <main+0x102>
    1d52:	3a c0       	rjmp	.+116    	; 0x1dc8 <main+0x176>
	}
}

static inline uint16_t writeFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t pagestart = (uint32_t)waddr<<1;
    1d54:	91 01       	movw	r18, r2
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	22 0f       	add	r18, r18
    1d5c:	33 1f       	adc	r19, r19
    1d5e:	44 1f       	adc	r20, r20
    1d60:	55 1f       	adc	r21, r21
	uint32_t baddr = pagestart;
    1d62:	da 01       	movw	r26, r20
    1d64:	c9 01       	movw	r24, r18
	uint16_t data;
	uint8_t *tmp = gBuffer;
    1d66:	f0 e6       	ldi	r31, 0x60	; 96
    1d68:	cf 2e       	mov	r12, r31
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	df 2e       	mov	r13, r31

	do {
		data = *tmp++;
    1d6e:	f6 01       	movw	r30, r12
    1d70:	60 81       	ld	r22, Z
    1d72:	70 e0       	ldi	r23, 0x00	; 0
		data |= *tmp++ << 8;
    1d74:	71 80       	ldd	r7, Z+1	; 0x01
    1d76:	66 24       	eor	r6, r6
    1d78:	66 29       	or	r22, r6
    1d7a:	77 29       	or	r23, r7
}

static void (*jump_to_app)(void) = 0x0000;

//=========================================================================================================================
int main(void)
    1d7c:	e2 e0       	ldi	r30, 0x02	; 2
    1d7e:	2e 2e       	mov	r2, r30
    1d80:	31 2c       	mov	r3, r1
    1d82:	c2 0c       	add	r12, r2
    1d84:	d3 1c       	adc	r13, r3
	uint8_t *tmp = gBuffer;

	do {
		data = *tmp++;
		data |= *tmp++ << 8;
		boot_page_fill(baddr, data);	// call asm routine.
    1d86:	22 24       	eor	r2, r2
    1d88:	23 94       	inc	r2
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	0b 01       	movw	r0, r22
    1d8e:	20 92 57 00 	sts	0x0057, r2
    1d92:	e8 95       	spm
    1d94:	11 24       	eor	r1, r1

		baddr += 2;			// Select next word in memory
    1d96:	02 96       	adiw	r24, 0x02	; 2
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	b1 1d       	adc	r27, r1
		size -= 2;			// Reduce number of bytes to write by two
    1d9c:	5e ef       	ldi	r21, 0xFE	; 254
    1d9e:	35 2e       	mov	r3, r21
    1da0:	f3 0c       	add	r15, r3
	} while (size);				// Loop until all bytes written
    1da2:	29 f7       	brne	.-54     	; 0x1d6e <main+0x11c>

	boot_page_write(pagestart);
    1da4:	45 e0       	ldi	r20, 0x05	; 5
    1da6:	24 2e       	mov	r2, r20
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 92 57 00 	sts	0x0057, r2
    1dae:	e8 95       	spm
	boot_spm_busy_wait();
    1db0:	07 b6       	in	r0, 0x37	; 55
    1db2:	00 fc       	sbrc	r0, 0
    1db4:	fd cf       	rjmp	.-6      	; 0x1db0 <main+0x15e>
	boot_rww_enable();		// Re-enable the RWW section
    1db6:	90 92 57 00 	sts	0x0057, r9
    1dba:	e8 95       	spm

	return baddr>>1;
    1dbc:	b6 95       	lsr	r27
    1dbe:	a7 95       	ror	r26
    1dc0:	97 95       	ror	r25
    1dc2:	87 95       	ror	r24
    1dc4:	1c 01       	movw	r2, r24
    1dc6:	a4 c0       	rjmp	.+328    	; 0x1f10 <main+0x2be>
			recvBuffer(size);

			if (device == DEVTYPE) {
				if (val == 'F') {
					address = writeFlashPage(address, size);
				} else if (val == 'E') {
    1dc8:	25 34       	cpi	r18, 0x45	; 69
    1dca:	09 f0       	breq	.+2      	; 0x1dce <main+0x17c>
    1dcc:	a1 c0       	rjmp	.+322    	; 0x1f10 <main+0x2be>
    1dce:	af 2c       	mov	r10, r15
    1dd0:	81 01       	movw	r16, r2
    1dd2:	20 e6       	ldi	r18, 0x60	; 96
    1dd4:	c2 2e       	mov	r12, r18
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	d2 2e       	mov	r13, r18
static inline uint16_t writeEEpromPage(uint16_t address, pagebuf_t size)
{
	uint8_t *tmp = gBuffer;

	do {
		eeprom_write_byte( (uint8_t*)address, *tmp++ );
    1dda:	d6 01       	movw	r26, r12
    1ddc:	6d 91       	ld	r22, X+
    1dde:	6d 01       	movw	r12, r26
    1de0:	c8 01       	movw	r24, r16
    1de2:	b8 d0       	rcall	.+368    	; 0x1f54 <__eewr_byte_m8>
		address++;			// Select next byte
    1de4:	0f 5f       	subi	r16, 0xFF	; 255
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
		size--;				// Decreas number of bytes to write
    1de8:	aa 94       	dec	r10
	} while (size);				// Loop until all bytes written
    1dea:	b9 f7       	brne	.-18     	; 0x1dda <main+0x188>
}

static void (*jump_to_app)(void) = 0x0000;

//=========================================================================================================================
int main(void)
    1dec:	08 94       	sec
    1dee:	21 1c       	adc	r2, r1
    1df0:	31 1c       	adc	r3, r1
    1df2:	fa 94       	dec	r15
    1df4:	2f 0c       	add	r2, r15
    1df6:	31 1c       	adc	r3, r1
    1df8:	8b c0       	rjmp	.+278    	; 0x1f10 <main+0x2be>
			} else {
				sendchar(0);
			}

		// Block read
		} else if (val == 'g') {
    1dfa:	87 36       	cpi	r24, 0x67	; 103
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <main+0x1ae>
    1dfe:	44 c0       	rjmp	.+136    	; 0x1e88 <main+0x236>
			pagebuf_t size;
			size = recvchar() << 8;				// Load high byte of buffersize
    1e00:	14 df       	rcall	.-472    	; 0x1c2a <recvchar>
			size |= recvchar();				// Load low byte of buffersize
    1e02:	13 df       	rcall	.-474    	; 0x1c2a <recvchar>
    1e04:	f8 2e       	mov	r15, r24
			val = recvchar();				// Get memtype
    1e06:	11 df       	rcall	.-478    	; 0x1c2a <recvchar>

			if (val == 'F') {
    1e08:	86 34       	cpi	r24, 0x46	; 70
    1e0a:	59 f5       	brne	.+86     	; 0x1e62 <main+0x210>
	return address;
}

static inline uint16_t readFlashPage(uint16_t waddr, pagebuf_t size)
{
	uint32_t baddr = (uint32_t)waddr<<1;
    1e0c:	51 01       	movw	r10, r2
    1e0e:	cc 24       	eor	r12, r12
    1e10:	dd 24       	eor	r13, r13
    1e12:	aa 0c       	add	r10, r10
    1e14:	bb 1c       	adc	r11, r11
    1e16:	cc 1c       	adc	r12, r12
    1e18:	dd 1c       	adc	r13, r13
#else
		data = pgm_read_word_near(baddr);
#endif
#else
		// don't read bootloader
		if ( baddr < APP_END ) {
    1e1a:	bf ef       	ldi	r27, 0xFF	; 255
    1e1c:	ab 16       	cp	r10, r27
    1e1e:	bb e1       	ldi	r27, 0x1B	; 27
    1e20:	bb 06       	cpc	r11, r27
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	cb 06       	cpc	r12, r27
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	db 06       	cpc	r13, r27
    1e2a:	20 f4       	brcc	.+8      	; 0x1e34 <main+0x1e2>
#if defined(RAMPZ)
			data = pgm_read_word_far(baddr);
#else
			data = pgm_read_word_near(baddr);
    1e2c:	f5 01       	movw	r30, r10
    1e2e:	05 91       	lpm	r16, Z+
    1e30:	14 91       	lpm	r17, Z+
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <main+0x1e6>
#endif
		}
		else {
			data = 0xFFFF; // fake empty
    1e34:	0f ef       	ldi	r16, 0xFF	; 255
    1e36:	1f ef       	ldi	r17, 0xFF	; 255
		}
#endif
		sendchar(data);			// send LSB
    1e38:	80 2f       	mov	r24, r16
    1e3a:	f3 de       	rcall	.-538    	; 0x1c22 <sendchar>
		sendchar((data >> 8));		// send MSB
    1e3c:	81 2f       	mov	r24, r17
    1e3e:	f1 de       	rcall	.-542    	; 0x1c22 <sendchar>
		baddr += 2;			// Select next word in memory
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	a8 0e       	add	r10, r24
    1e4a:	b9 1e       	adc	r11, r25
    1e4c:	ca 1e       	adc	r12, r26
    1e4e:	db 1e       	adc	r13, r27
		size -= 2;			// Subtract two bytes from number of bytes to read
    1e50:	9e ef       	ldi	r25, 0xFE	; 254
    1e52:	f9 0e       	add	r15, r25
	} while (size);				// Repeat until block has been read
    1e54:	11 f7       	brne	.-60     	; 0x1e1a <main+0x1c8>

	return baddr>>1;
    1e56:	d6 94       	lsr	r13
    1e58:	c7 94       	ror	r12
    1e5a:	b7 94       	ror	r11
    1e5c:	a7 94       	ror	r10
    1e5e:	15 01       	movw	r2, r10
    1e60:	40 cf       	rjmp	.-384    	; 0x1ce2 <main+0x90>
			size |= recvchar();				// Load low byte of buffersize
			val = recvchar();				// Get memtype

			if (val == 'F') {
				address = readFlashPage(address, size);
			} else if (val == 'E') {
    1e62:	85 34       	cpi	r24, 0x45	; 69
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <main+0x216>
    1e66:	3d cf       	rjmp	.-390    	; 0x1ce2 <main+0x90>
    1e68:	cf 2c       	mov	r12, r15
    1e6a:	81 01       	movw	r16, r2
}

static inline uint16_t readEEpromPage(uint16_t address, pagebuf_t size)
{
	do {
		sendchar( eeprom_read_byte( (uint8_t*)address ) );
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	6a d0       	rcall	.+212    	; 0x1f44 <__eerd_byte_m8>
    1e70:	d8 de       	rcall	.-592    	; 0x1c22 <sendchar>
		address++;
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
		size--;				// Decrease number of bytes to read
    1e76:	ca 94       	dec	r12
	} while (size);				// Repeat until block has been read
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <main+0x21a>
}

static void (*jump_to_app)(void) = 0x0000;

//=========================================================================================================================
int main(void)
    1e7a:	08 94       	sec
    1e7c:	21 1c       	adc	r2, r1
    1e7e:	31 1c       	adc	r3, r1
    1e80:	fa 94       	dec	r15
    1e82:	2f 0c       	add	r2, r15
    1e84:	31 1c       	adc	r3, r1
    1e86:	2d cf       	rjmp	.-422    	; 0x1ce2 <main+0x90>
			} else if (val == 'E') {
				address = readEEpromPage(address, size);
			}

		// Chip erase
 		} else if (val == 'e') {
    1e88:	85 36       	cpi	r24, 0x65	; 101
    1e8a:	f9 f4       	brne	.+62     	; 0x1eca <main+0x278>
			if (device == DEVTYPE) {
    1e8c:	ae 2d       	mov	r26, r14
    1e8e:	a7 37       	cpi	r26, 0x77	; 119
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <main+0x242>
    1e92:	3e c0       	rjmp	.+124    	; 0x1f10 <main+0x2be>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	dc 01       	movw	r26, r24
static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) {
		boot_page_erase(addr);		// Perform page erase
    1e9a:	13 e0       	ldi	r17, 0x03	; 3
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	10 93 57 00 	sts	0x0057, r17
    1ea2:	e8 95       	spm
		boot_spm_busy_wait();		// Wait until the memory is erased.
    1ea4:	07 b6       	in	r0, 0x37	; 55
    1ea6:	00 fc       	sbrc	r0, 0
    1ea8:	fd cf       	rjmp	.-6      	; 0x1ea4 <main+0x252>
		addr += SPM_PAGESIZE;
    1eaa:	80 5c       	subi	r24, 0xC0	; 192
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	af 4f       	sbci	r26, 0xFF	; 255
    1eb0:	bf 4f       	sbci	r27, 0xFF	; 255

static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) {
    1eb2:	80 30       	cpi	r24, 0x00	; 0
    1eb4:	2c e1       	ldi	r18, 0x1C	; 28
    1eb6:	92 07       	cpc	r25, r18
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	a2 07       	cpc	r26, r18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	b2 07       	cpc	r27, r18
    1ec0:	61 f7       	brne	.-40     	; 0x1e9a <main+0x248>
		boot_page_erase(addr);		// Perform page erase
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
	}
	boot_rww_enable();
    1ec2:	90 92 57 00 	sts	0x0057, r9
    1ec6:	e8 95       	spm
    1ec8:	23 c0       	rjmp	.+70     	; 0x1f10 <main+0x2be>
				eraseFlash();
			}
			sendchar('\r');

		// Exit upgrade
		} else if (val == 'E') {
    1eca:	85 34       	cpi	r24, 0x45	; 69
    1ecc:	49 f4       	brne	.+18     	; 0x1ee0 <main+0x28e>
			wdt_enable(EXIT_WDT_TIME); // Enable Watchdog Timer to give reset
    1ece:	88 e1       	ldi	r24, 0x18	; 24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	a8 95       	wdr
    1ed8:	81 bd       	out	0x21, r24	; 33
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	81 bc       	out	0x21, r8	; 33
    1ede:	18 c0       	rjmp	.+48     	; 0x1f10 <main+0x2be>
				boot_spm_busy_wait();
			}
			sendchar('\r');
#endif
		// Enter programming mode
		} else if (val == 'P') {
    1ee0:	80 35       	cpi	r24, 0x50	; 80
    1ee2:	b1 f0       	breq	.+44     	; 0x1f10 <main+0x2be>
			sendchar('\r');

		// Leave programming mode
		} else if (val == 'L') {
    1ee4:	8c 34       	cpi	r24, 0x4C	; 76
    1ee6:	a1 f0       	breq	.+40     	; 0x1f10 <main+0x2be>
			sendchar('\r');

		// return programmer type
		} else if (val == 'p') {
    1ee8:	80 37       	cpi	r24, 0x70	; 112
    1eea:	11 f4       	brne	.+4      	; 0x1ef0 <main+0x29e>
			sendchar('S');		// always serial programmer
    1eec:	83 e5       	ldi	r24, 0x53	; 83
    1eee:	28 c0       	rjmp	.+80     	; 0x1f40 <main+0x2ee>
		} else if (val == 'Q') {
			sendchar(read_fuse_lock(GET_EXTENDED_FUSE_BITS));
#endif

		// Return device type
		} else if (val == 't') {
    1ef0:	84 37       	cpi	r24, 0x74	; 116
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <main+0x2aa>
			sendchar(DEVTYPE);
    1ef4:	87 e7       	ldi	r24, 0x77	; 119
    1ef6:	95 de       	rcall	.-726    	; 0x1c22 <sendchar>
			sendchar(0);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	22 c0       	rjmp	.+68     	; 0x1f40 <main+0x2ee>

		// clear and set LED ignored
		} else if ((val == 'x') || (val == 'y')) {
    1efc:	98 2f       	mov	r25, r24
    1efe:	98 57       	subi	r25, 0x78	; 120
    1f00:	92 30       	cpi	r25, 0x02	; 2
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <main+0x2b6>
			recvchar();
    1f04:	92 de       	rcall	.-732    	; 0x1c2a <recvchar>
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <main+0x2be>
			sendchar('\r');

		// set device
		} else if (val == 'T') {
    1f08:	84 35       	cpi	r24, 0x54	; 84
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <main+0x2c2>
			device = recvchar();
    1f0c:	8e de       	rcall	.-740    	; 0x1c2a <recvchar>
    1f0e:	e8 2e       	mov	r14, r24
			sendchar('\r');
    1f10:	8d e0       	ldi	r24, 0x0D	; 13
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <main+0x2ee>

		// Return software identifier
		} else if (val == 'S') {
    1f14:	83 35       	cpi	r24, 0x53	; 83
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <main+0x2ca>
			send_boot();
    1f18:	8c de       	rcall	.-744    	; 0x1c32 <send_boot>
    1f1a:	e3 ce       	rjmp	.-570    	; 0x1ce2 <main+0x90>

		// Return Software Version
		} else if (val == 'V') {
    1f1c:	86 35       	cpi	r24, 0x56	; 86
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <main+0x2d6>
			sendchar(VERSION_HIGH);
    1f20:	80 e3       	ldi	r24, 0x30	; 48
    1f22:	7f de       	rcall	.-770    	; 0x1c22 <sendchar>
			sendchar(VERSION_LOW);
    1f24:	88 e3       	ldi	r24, 0x38	; 56
    1f26:	0c c0       	rjmp	.+24     	; 0x1f40 <main+0x2ee>

		// Return Signature Bytes (it seems that 
		// AVRProg expects the "Atmel-byte" 0x1E last
		// but shows it first in the dialog-window)
		} else if (val == 's') {
    1f28:	83 37       	cpi	r24, 0x73	; 115
    1f2a:	31 f4       	brne	.+12     	; 0x1f38 <main+0x2e6>
			sendchar(SIG_BYTE3);
    1f2c:	87 e0       	ldi	r24, 0x07	; 7
    1f2e:	79 de       	rcall	.-782    	; 0x1c22 <sendchar>
			sendchar(SIG_BYTE2);
    1f30:	83 e9       	ldi	r24, 0x93	; 147
    1f32:	77 de       	rcall	.-786    	; 0x1c22 <sendchar>
			sendchar(SIG_BYTE1);
    1f34:	8e e1       	ldi	r24, 0x1E	; 30
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <main+0x2ee>

		/* ESC */
		} else if(val != 0x1b) {
    1f38:	8b 31       	cpi	r24, 0x1B	; 27
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <main+0x2ec>
    1f3c:	d2 ce       	rjmp	.-604    	; 0x1ce2 <main+0x90>
			sendchar('?');
    1f3e:	8f e3       	ldi	r24, 0x3F	; 63
    1f40:	70 de       	rcall	.-800    	; 0x1c22 <sendchar>
    1f42:	cf ce       	rjmp	.-610    	; 0x1ce2 <main+0x90>

00001f44 <__eerd_byte_m8>:
    1f44:	e1 99       	sbic	0x1c, 1	; 28
    1f46:	fe cf       	rjmp	.-4      	; 0x1f44 <__eerd_byte_m8>
    1f48:	9f bb       	out	0x1f, r25	; 31
    1f4a:	8e bb       	out	0x1e, r24	; 30
    1f4c:	e0 9a       	sbi	0x1c, 0	; 28
    1f4e:	99 27       	eor	r25, r25
    1f50:	8d b3       	in	r24, 0x1d	; 29
    1f52:	08 95       	ret

00001f54 <__eewr_byte_m8>:
    1f54:	26 2f       	mov	r18, r22

00001f56 <__eewr_r18_m8>:
    1f56:	e1 99       	sbic	0x1c, 1	; 28
    1f58:	fe cf       	rjmp	.-4      	; 0x1f56 <__eewr_r18_m8>
    1f5a:	9f bb       	out	0x1f, r25	; 31
    1f5c:	8e bb       	out	0x1e, r24	; 30
    1f5e:	2d bb       	out	0x1d, r18	; 29
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	e2 9a       	sbi	0x1c, 2	; 28
    1f66:	e1 9a       	sbi	0x1c, 1	; 28
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	08 95       	ret

00001f6e <_exit>:
    1f6e:	f8 94       	cli

00001f70 <__stop_program>:
    1f70:	ff cf       	rjmp	.-2      	; 0x1f70 <__stop_program>
