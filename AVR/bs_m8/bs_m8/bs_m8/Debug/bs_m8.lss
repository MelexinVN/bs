
bs_m8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008000fc  008000fc  00000dd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001719  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ca  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  00002f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00003a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3d  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__vector_1>
   4:	7b c0       	rjmp	.+246    	; 0xfc <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	45 c0       	rjmp	.+138    	; 0xa2 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 3f       	cpi	r26, 0xFC	; 252
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	ac ef       	ldi	r26, 0xFC	; 252
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 33       	cpi	r26, 0x37	; 55
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9f d0       	rcall	.+318    	; 0x198 <main>
  5a:	23 c6       	rjmp	.+3142   	; 0xca2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
void port_init(void)
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	87 bb       	out	0x17, r24	; 23
	// State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	88 bb       	out	0x18, r24	; 24

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  66:	14 ba       	out	0x14, r1	; 20
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  68:	15 ba       	out	0x15, r1	; 21

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  6a:	80 ec       	ldi	r24, 0xC0	; 192
  6c:	81 bb       	out	0x11, r24	; 17
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=P Bit2=T Bit1=T Bit0=T
	PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  6e:	88 e8       	ldi	r24, 0x88	; 136
  70:	82 bb       	out	0x12, r24	; 18
  72:	08 95       	ret

00000074 <timer_init>:
	// Timer Period: 1 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  74:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
  76:	8b e0       	ldi	r24, 0x0B	; 11
  78:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  7a:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  7c:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  7e:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
  80:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
  82:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x7C;
  84:	8c e7       	ldi	r24, 0x7C	; 124
  86:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
  88:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  8a:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
  8c:	81 e1       	ldi	r24, 0x11	; 17
  8e:	89 bf       	out	0x39, r24	; 57
  90:	08 95       	ret

00000092 <interrupt_init>:
	// External Interrupt(s) initialization
	// INT0: On
	// INT0 Mode: Falling Edge
	// INT1: On
	// INT1 Mode: Falling Edge
	GICR|=(1<<INT1) | (1<<INT0);
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
  98:	8a e0       	ldi	r24, 0x0A	; 10
  9a:	85 bf       	out	0x35, r24	; 53
	GIFR=(1<<INTF1) | (1<<INTF0);
  9c:	80 ec       	ldi	r24, 0xC0	; 192
  9e:	8a bf       	out	0x3a, r24	; 58
  a0:	08 95       	ret

000000a2 <__vector_11>:
}

ISR(USART_RXC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
	
}
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_1>:

ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	IRQ_Callback();
  d8:	a0 d2       	rcall	.+1344   	; 0x61a <IRQ_Callback>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_2>:

ISR(INT1_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
	if(!f_pushed)							//если опущен флаг нажатия
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <f_pushed>
 112:	81 11       	cpse	r24, r1
 114:	13 c0       	rjmp	.+38     	; 0x13c <__vector_2+0x40>
	{
		f_pushed = 1;						//поднимаем флаг нажатия
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <f_pushed>
		time_ms = miliseconds;				//сохраняем количество мс
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <miliseconds>
 120:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <miliseconds+0x1>
 124:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <miliseconds+0x2>
 128:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <miliseconds+0x3>
 12c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
 130:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x1>
 134:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0x2>
 138:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0x3>
	}
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
	miliseconds++;										//считаем мс
 160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <miliseconds>
 164:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <miliseconds+0x1>
 168:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <miliseconds+0x2>
 16c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <miliseconds+0x3>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	a1 1d       	adc	r26, r1
 174:	b1 1d       	adc	r27, r1
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <miliseconds>
 17a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <miliseconds+0x1>
 17e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <miliseconds+0x2>
 182:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <miliseconds+0x3>
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:

int main(void)
{
	interrupt_init();
 198:	7c df       	rcall	.-264    	; 0x92 <interrupt_init>
	port_init();
 19a:	61 df       	rcall	.-318    	; 0x5e <port_init>
	timer_init();
 19c:	6b df       	rcall	.-298    	; 0x74 <timer_init>
	spi_init();
 19e:	65 d2       	rcall	.+1226   	; 0x66a <spi_init>
	USART_Init (8); //115200
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	74 d2       	rcall	.+1256   	; 0x68e <USART_Init>
	NRF24_init();
 1a6:	f9 d1       	rcall	.+1010   	; 0x59a <NRF24_init>
    sei();
 1a8:	78 94       	sei
	usart_println("start");
 1aa:	86 e6       	ldi	r24, 0x66	; 102
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	80 d2       	rcall	.+1280   	; 0x6b0 <usart_println>

	dt_reg = NRF24_ReadReg(CONFIG);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	8e d0       	rcall	.+284    	; 0x2d0 <NRF24_ReadReg>
 1b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"CONFIG: 0x%02X",dt_reg);
 1b8:	1f 92       	push	r1
 1ba:	8f 93       	push	r24
 1bc:	8c e6       	ldi	r24, 0x6C	; 108
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9f 93       	push	r25
 1c2:	8f 93       	push	r24
 1c4:	cb e0       	ldi	r28, 0x0B	; 11
 1c6:	d1 e0       	ldi	r29, 0x01	; 1
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	92 d2       	rcall	.+1316   	; 0x6f2 <sprintf>
	usart_println(str);
 1ce:	ce 01       	movw	r24, r28
 1d0:	6f d2       	rcall	.+1246   	; 0x6b0 <usart_println>
	dt_reg = NRF24_ReadReg(EN_AA);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	7d d0       	rcall	.+250    	; 0x2d0 <NRF24_ReadReg>
 1d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"EN_AA: 0x%02X",dt_reg);
 1da:	1f 92       	push	r1
 1dc:	8f 93       	push	r24
 1de:	8b e7       	ldi	r24, 0x7B	; 123
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9f 93       	push	r25
 1e4:	8f 93       	push	r24
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	83 d2       	rcall	.+1286   	; 0x6f2 <sprintf>
	usart_println(str);
 1ec:	ce 01       	movw	r24, r28
 1ee:	60 d2       	rcall	.+1216   	; 0x6b0 <usart_println>
	dt_reg = NRF24_ReadReg(EN_RXADDR);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	6e d0       	rcall	.+220    	; 0x2d0 <NRF24_ReadReg>
 1f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"EN_RXADDR: 0x%02X",dt_reg);
 1f8:	1f 92       	push	r1
 1fa:	8f 93       	push	r24
 1fc:	89 e8       	ldi	r24, 0x89	; 137
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9f 93       	push	r25
 202:	8f 93       	push	r24
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	74 d2       	rcall	.+1256   	; 0x6f2 <sprintf>
	usart_println(str);
 20a:	ce 01       	movw	r24, r28
 20c:	51 d2       	rcall	.+1186   	; 0x6b0 <usart_println>
	dt_reg = NRF24_ReadReg(STATUS);
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	5f d0       	rcall	.+190    	; 0x2d0 <NRF24_ReadReg>
 212:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"STATUS: 0x%02X",dt_reg);
 216:	1f 92       	push	r1
 218:	8f 93       	push	r24
 21a:	8b e9       	ldi	r24, 0x9B	; 155
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	65 d2       	rcall	.+1226   	; 0x6f2 <sprintf>
	usart_println(str);
 228:	ce 01       	movw	r24, r28
 22a:	42 d2       	rcall	.+1156   	; 0x6b0 <usart_println>
	dt_reg = NRF24_ReadReg(RF_SETUP);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	50 d0       	rcall	.+160    	; 0x2d0 <NRF24_ReadReg>
 230:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"RF_SETUP: 0x%02X",dt_reg);
 234:	1f 92       	push	r1
 236:	8f 93       	push	r24
 238:	8a ea       	ldi	r24, 0xAA	; 170
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	56 d2       	rcall	.+1196   	; 0x6f2 <sprintf>
	usart_println(str);
 246:	ce 01       	movw	r24, r28
 248:	33 d2       	rcall	.+1126   	; 0x6b0 <usart_println>
	NRF24_Read_Buf(TX_ADDR,buf,3);
 24a:	43 e0       	ldi	r20, 0x03	; 3
 24c:	65 e0       	ldi	r22, 0x05	; 5
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	6d d0       	rcall	.+218    	; 0x32e <NRF24_Read_Buf>
	sprintf(str,"TX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
 254:	05 e0       	ldi	r16, 0x05	; 5
 256:	11 e0       	ldi	r17, 0x01	; 1
 258:	f8 01       	movw	r30, r16
 25a:	22 81       	ldd	r18, Z+2	; 0x02
 25c:	91 81       	ldd	r25, Z+1	; 0x01
 25e:	80 81       	ld	r24, Z
 260:	1f 92       	push	r1
 262:	2f 93       	push	r18
 264:	1f 92       	push	r1
 266:	9f 93       	push	r25
 268:	1f 92       	push	r1
 26a:	8f 93       	push	r24
 26c:	8b eb       	ldi	r24, 0xBB	; 187
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9f 93       	push	r25
 272:	8f 93       	push	r24
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	3c d2       	rcall	.+1144   	; 0x6f2 <sprintf>
	usart_println(str);
 27a:	ed b7       	in	r30, 0x3d	; 61
 27c:	fe b7       	in	r31, 0x3e	; 62
 27e:	b8 96       	adiw	r30, 0x28	; 40
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	fe bf       	out	0x3e, r31	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	ed bf       	out	0x3d, r30	; 61
 28a:	ce 01       	movw	r24, r28
 28c:	11 d2       	rcall	.+1058   	; 0x6b0 <usart_println>
	NRF24_Read_Buf(RX_ADDR_P1,buf,3);
 28e:	43 e0       	ldi	r20, 0x03	; 3
 290:	b8 01       	movw	r22, r16
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	4c d0       	rcall	.+152    	; 0x32e <NRF24_Read_Buf>
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
 296:	f8 01       	movw	r30, r16
 298:	22 81       	ldd	r18, Z+2	; 0x02
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	80 81       	ld	r24, Z
 29e:	1f 92       	push	r1
 2a0:	2f 93       	push	r18
 2a2:	1f 92       	push	r1
 2a4:	9f 93       	push	r25
 2a6:	1f 92       	push	r1
 2a8:	8f 93       	push	r24
 2aa:	8b ed       	ldi	r24, 0xDB	; 219
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9f 93       	push	r25
 2b0:	8f 93       	push	r24
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	1d d2       	rcall	.+1082   	; 0x6f2 <sprintf>
	usart_println(str);
 2b8:	ce 01       	movw	r24, r28
 2ba:	fa d1       	rcall	.+1012   	; 0x6b0 <usart_println>
 2bc:	ed b7       	in	r30, 0x3d	; 61
 2be:	fe b7       	in	r31, 0x3e	; 62
 2c0:	3a 96       	adiw	r30, 0x0a	; 10
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	fe bf       	out	0x3e, r31	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	ed bf       	out	0x3d, r30	; 61

    while (1) 
    {
		NRF24L01_Receive();
 2cc:	05 d1       	rcall	.+522    	; 0x4d8 <NRF24L01_Receive>
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>

000002d0 <NRF24_ReadReg>:
extern volatile uint32_t miliseconds;				//счетчик милисекунд
extern uint8_t buf1[20];							//буфер

//функция чтения регистра модуля
uint8_t NRF24_ReadReg(uint8_t addr)
{
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
	uint8_t dt=0, cmd;												//переменные данных и команды
	CS_ON;																		//ногу cs к земле
 2d4:	82 b3       	in	r24, 0x12	; 18
 2d6:	8f 77       	andi	r24, 0x7F	; 127
 2d8:	82 bb       	out	0x12, r24	; 18
	dt = spi_changeByte(addr);
 2da:	8c 2f       	mov	r24, r28
 2dc:	d3 d1       	rcall	.+934    	; 0x684 <spi_changeByte>
	//если адрес равен адрес регистра статус то и возварщаем его состояние	
	if (addr!=STATUS)//а если не равен
 2de:	c7 30       	cpi	r28, 0x07	; 7
 2e0:	21 f0       	breq	.+8      	; 0x2ea <NRF24_ReadReg+0x1a>
	{
		cmd=0xFF;				//команда NOP для получения данных
		spi_sendByte(cmd);
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	cb d1       	rcall	.+918    	; 0x67c <spi_sendByte>
		dt = spi_changeByte(cmd);
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	cd d1       	rcall	.+922    	; 0x684 <spi_changeByte>
	}
	CS_OFF;																			//поднимаем ногу CS
 2ea:	92 b3       	in	r25, 0x12	; 18
 2ec:	90 68       	ori	r25, 0x80	; 128
 2ee:	92 bb       	out	0x12, r25	; 18
	return dt;	//возвращаемое значение
}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <NRF24_WriteReg>:
//------------------------------------------------
//функция записи регистра в модуль
void NRF24_WriteReg(uint8_t addr, uint8_t dt)		
{
 2f4:	cf 93       	push	r28
 2f6:	c6 2f       	mov	r28, r22
	addr |= W_REGISTER;//включим бит записи в адрес	
	CS_ON;
 2f8:	92 b3       	in	r25, 0x12	; 18
 2fa:	9f 77       	andi	r25, 0x7F	; 127
 2fc:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);									//
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	bd d1       	rcall	.+890    	; 0x67c <spi_sendByte>
	spi_sendByte(dt);										//
 302:	8c 2f       	mov	r24, r28
 304:	bb d1       	rcall	.+886    	; 0x67c <spi_sendByte>
	CS_OFF;
 306:	82 b3       	in	r24, 0x12	; 18
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	82 bb       	out	0x12, r24	; 18
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void)							//активация команд R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
{	//есть в даташите "без плюса"
	uint8_t dt[1] = {ACTIVATE};
	CS_ON;
 310:	82 b3       	in	r24, 0x12	; 18
 312:	8f 77       	andi	r24, 0x7F	; 127
 314:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 316:	80 e5       	ldi	r24, 0x50	; 80
 318:	b1 d1       	rcall	.+866    	; 0x67c <spi_sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	8a 95       	dec	r24
 31e:	f1 f7       	brne	.-4      	; 0x31c <NRF24_ToggleFeatures+0xc>
 320:	00 c0       	rjmp	.+0      	; 0x322 <NRF24_ToggleFeatures+0x12>
	_delay_us(1);
	dt[0] = 0x73;
	spi_sendByte(dt[0]);	
 322:	83 e7       	ldi	r24, 0x73	; 115
 324:	ab d1       	rcall	.+854    	; 0x67c <spi_sendByte>
	CS_OFF;
 326:	82 b3       	in	r24, 0x12	; 18
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	08 95       	ret

0000032e <NRF24_Read_Buf>:
}
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	d8 2f       	mov	r29, r24
 33e:	6b 01       	movw	r12, r22
 340:	f4 2e       	mov	r15, r20
	CS_ON;
 342:	82 b3       	in	r24, 0x12	; 18
 344:	8f 77       	andi	r24, 0x7F	; 127
 346:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(addr);	
 348:	8d 2f       	mov	r24, r29
 34a:	98 d1       	rcall	.+816    	; 0x67c <spi_sendByte>
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	08 c0       	rjmp	.+16     	; 0x360 <NRF24_Read_Buf+0x32>
	{																					//
		pBuf[i] = spi_changeByte(addr);
 350:	86 01       	movw	r16, r12
 352:	0c 0f       	add	r16, r28
 354:	11 1d       	adc	r17, r1
 356:	8d 2f       	mov	r24, r29
 358:	95 d1       	rcall	.+810    	; 0x684 <spi_changeByte>
 35a:	f8 01       	movw	r30, r16
 35c:	80 83       	st	Z, r24
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
	CS_ON;
	spi_sendByte(addr);	
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	cf 15       	cp	r28, r15
 362:	b0 f3       	brcs	.-20     	; 0x350 <NRF24_Read_Buf+0x22>
	{																					//
		pBuf[i] = spi_changeByte(addr);
	}
	CS_OFF;
 364:	82 b3       	in	r24, 0x12	; 18
 366:	80 68       	ori	r24, 0x80	; 128
 368:	82 bb       	out	0x12, r24	; 18
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	08 95       	ret

0000037a <NRF24_Write_Buf>:
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)	
{//запись буфера
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	8b 01       	movw	r16, r22
 384:	d4 2f       	mov	r29, r20
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
 386:	92 b3       	in	r25, 0x12	; 18
 388:	9f 77       	andi	r25, 0x7F	; 127
 38a:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);	
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	76 d1       	rcall	.+748    	; 0x67c <spi_sendByte>
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <NRF24_Write_Buf+0x18>
 396:	00 c0       	rjmp	.+0      	; 0x398 <NRF24_Write_Buf+0x1e>
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <NRF24_Write_Buf+0x2e>
	{
		spi_sendByte(pBuf[i]);	
 39c:	f8 01       	movw	r30, r16
 39e:	ec 0f       	add	r30, r28
 3a0:	f1 1d       	adc	r31, r1
 3a2:	80 81       	ld	r24, Z
 3a4:	6b d1       	rcall	.+726    	; 0x67c <spi_sendByte>
{//запись буфера
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
	spi_sendByte(addr);	
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 3a6:	cf 5f       	subi	r28, 0xFF	; 255
 3a8:	cd 17       	cp	r28, r29
 3aa:	c0 f3       	brcs	.-16     	; 0x39c <NRF24_Write_Buf+0x22>
	{
		spi_sendByte(pBuf[i]);	
	}
	CS_OFF;
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	82 bb       	out	0x12, r24	; 18
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void)
{//очистка буфера приема
	uint8_t dt[1] = {FLUSH_RX};
	CS_ON;
 3bc:	82 b3       	in	r24, 0x12	; 18
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 3c2:	82 ee       	ldi	r24, 0xE2	; 226
 3c4:	5b d1       	rcall	.+694    	; 0x67c <spi_sendByte>
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <NRF24_FlushRX+0xc>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <NRF24_FlushRX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 3ce:	82 b3       	in	r24, 0x12	; 18
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	82 bb       	out	0x12, r24	; 18
 3d4:	08 95       	ret

000003d6 <NRF24_FlushTX>:
}
//------------------------------------------------
void NRF24_FlushTX(void)
{//очистка буфера передачи
	uint8_t dt[1] = {FLUSH_TX};
	CS_ON;
 3d6:	82 b3       	in	r24, 0x12	; 18
 3d8:	8f 77       	andi	r24, 0x7F	; 127
 3da:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);
 3dc:	81 ee       	ldi	r24, 0xE1	; 225
 3de:	4e d1       	rcall	.+668    	; 0x67c <spi_sendByte>
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	8a 95       	dec	r24
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <NRF24_FlushTX+0xc>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <NRF24_FlushTX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 3e8:	82 b3       	in	r24, 0x12	; 18
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	82 bb       	out	0x12, r24	; 18
 3ee:	08 95       	ret

000003f0 <NRF24L01_RX_Mode>:
}
//------------------------------------------------
void NRF24L01_RX_Mode(void)
{//режим приемника
	uint8_t regval=0x00;
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значение регистра конфигурации
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	6e df       	rcall	.-292    	; 0x2d0 <NRF24_ReadReg>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 3f4:	68 2f       	mov	r22, r24
 3f6:	63 60       	ori	r22, 0x03	; 3
	NRF24_WriteReg(CONFIG,regval);	//возвращаем значение регистра статуса
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	7c df       	rcall	.-264    	; 0x2f4 <NRF24_WriteReg>
	
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);		//записываем  адрес передатчика
 3fc:	43 e0       	ldi	r20, 0x03	; 3
 3fe:	60 e6       	ldi	r22, 0x60	; 96
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 e1       	ldi	r24, 0x10	; 16
 404:	ba df       	rcall	.-140    	; 0x37a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS1, TX_ADR_WIDTH);	//записываем адрес приемника
 406:	43 e0       	ldi	r20, 0x03	; 3
 408:	60 e6       	ldi	r22, 0x60	; 96
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	b5 df       	rcall	.-150    	; 0x37a <NRF24_Write_Buf>
	
	CE_SET;
 410:	88 b3       	in	r24, 0x18	; 24
 412:	81 60       	ori	r24, 0x01	; 1
 414:	88 bb       	out	0x18, r24	; 24
 416:	8b e2       	ldi	r24, 0x2B	; 43
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 422:	cc df       	rcall	.-104    	; 0x3bc <NRF24_FlushRX>
	NRF24_FlushTX();
 424:	d8 df       	rcall	.-80     	; 0x3d6 <NRF24_FlushTX>
 426:	08 95       	ret

00000428 <NRF24L01_TX_Mode>:
}
//------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{//режим передатчика
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);		//записываем адрес передатчика
 428:	43 e0       	ldi	r20, 0x03	; 3
 42a:	63 e6       	ldi	r22, 0x63	; 99
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 e1       	ldi	r24, 0x10	; 16
 430:	a4 df       	rcall	.-184    	; 0x37a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS0, TX_ADR_WIDTH);	//записываем адрес приемника
 432:	43 e0       	ldi	r20, 0x03	; 3
 434:	63 e6       	ldi	r22, 0x63	; 99
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	8a e0       	ldi	r24, 0x0A	; 10
 43a:	9f df       	rcall	.-194    	; 0x37a <NRF24_Write_Buf>
	CE_RESET;
 43c:	88 b3       	in	r24, 0x18	; 24
 43e:	8e 7f       	andi	r24, 0xFE	; 254
 440:	88 bb       	out	0x18, r24	; 24
	// Flush buffers
	NRF24_FlushRX();
 442:	bc df       	rcall	.-136    	; 0x3bc <NRF24_FlushRX>
	NRF24_FlushTX();
 444:	c8 df       	rcall	.-112    	; 0x3d6 <NRF24_FlushTX>
 446:	08 95       	ret

00000448 <NRF24_Transmit>:
}
//------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//передача данных в модуль
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	8b 01       	movw	r16, r22
 452:	d4 2f       	mov	r29, r20
	CE_RESET;
 454:	98 b3       	in	r25, 0x18	; 24
 456:	9e 7f       	andi	r25, 0xFE	; 254
 458:	98 bb       	out	0x18, r25	; 24
	CS_ON;
 45a:	92 b3       	in	r25, 0x12	; 18
 45c:	9f 77       	andi	r25, 0x7F	; 127
 45e:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);
 460:	0d d1       	rcall	.+538    	; 0x67c <spi_sendByte>
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	8a 95       	dec	r24
 466:	f1 f7       	brne	.-4      	; 0x464 <__stack+0x5>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__stack+0xb>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__stack+0x1b>
	{
		spi_sendByte(pBuf[i]);
 46e:	f8 01       	movw	r30, r16
 470:	ec 0f       	add	r30, r28
 472:	f1 1d       	adc	r31, r1
 474:	80 81       	ld	r24, Z
 476:	02 d1       	rcall	.+516    	; 0x67c <spi_sendByte>
{//передача данных в модуль
	CE_RESET;
	CS_ON;
	spi_sendByte(addr);
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 478:	cf 5f       	subi	r28, 0xFF	; 255
 47a:	cd 17       	cp	r28, r29
 47c:	c0 f3       	brcs	.-16     	; 0x46e <__stack+0xf>
	{
		spi_sendByte(pBuf[i]);
	}
	CS_OFF;
 47e:	82 b3       	in	r24, 0x12	; 18
 480:	80 68       	ori	r24, 0x80	; 128
 482:	82 bb       	out	0x12, r24	; 18
	CE_SET;
 484:	88 b3       	in	r24, 0x18	; 24
 486:	81 60       	ori	r24, 0x01	; 1
 488:	88 bb       	out	0x18, r24	; 24
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <NRF24L01_Send>:
//------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{//отправка данных в эфир
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
  uint8_t regval=0x00;						//переменная для отправки в конфигурационный регистр
	NRF24L01_TX_Mode(pBuf);					//включаем режим передачи
 49a:	c6 df       	rcall	.-116    	; 0x428 <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значения конфигурационного региста
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	18 df       	rcall	.-464    	; 0x2d0 <NRF24_ReadReg>
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
	regval &= ~(1<<PRIM_RX);
 4a2:	68 2f       	mov	r22, r24
 4a4:	62 60       	ori	r22, 0x02	; 2
	NRF24_WriteReg(CONFIG,regval);//записываем новое значение конфигурационного регистра
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	25 df       	rcall	.-438    	; 0x2f4 <NRF24_WriteReg>
 4aa:	8b e2       	ldi	r24, 0x2B	; 43
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <NRF24L01_Send+0x1a>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <NRF24L01_Send+0x20>
 4b4:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);//отправка данных
 4b6:	45 e0       	ldi	r20, 0x05	; 5
 4b8:	be 01       	movw	r22, r28
 4ba:	80 ea       	ldi	r24, 0xA0	; 160
 4bc:	c5 df       	rcall	.-118    	; 0x448 <NRF24_Transmit>
	CE_SET;
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	98 e2       	ldi	r25, 0x28	; 40
 4c6:	9a 95       	dec	r25
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	CE_RESET;
 4ca:	88 b3       	in	r24, 0x18	; 24
 4cc:	8e 7f       	andi	r24, 0xFE	; 254
 4ce:	88 bb       	out	0x18, r24	; 24
	return 0;
}
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <NRF24L01_Receive>:
//------------------------------------------------
void NRF24L01_Receive(void)
{
	if(f_rx == 1)				//если флаг приема поднят
 4d8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_rx>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	09 f0       	breq	.+2      	; 0x4e2 <NRF24L01_Receive+0xa>
 4e0:	5b c0       	rjmp	.+182    	; 0x598 <NRF24L01_Receive+0xc0>
	{
		f_rx = 0;					//опускаем флаг приема		
 4e2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <f_rx>
		if (rx_buf[0] == RESET)	//если первый принятый байт - команда сброса
 4e6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rx_buf>
 4ea:	8f 3f       	cpi	r24, 0xFF	; 255
 4ec:	a9 f4       	brne	.+42     	; 0x518 <NRF24L01_Receive+0x40>
		{
			f_pushed = 0;					//опускаем ылаг нажатия
 4ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <f_pushed>
			time_ms = 0;					//обнуляем значение времени
 4f2:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__data_end>
 4f6:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__data_end+0x1>
 4fa:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__data_end+0x2>
 4fe:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <__data_end+0x3>
			miliseconds = 0;			//обнуляем счетчик мс
 502:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <miliseconds>
 506:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <miliseconds+0x1>
 50a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <miliseconds+0x2>
 50e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <miliseconds+0x3>
			LED_OFF;							//гасим светодиод
 512:	82 b3       	in	r24, 0x12	; 18
 514:	8f 7b       	andi	r24, 0xBF	; 191
 516:	82 bb       	out	0x12, r24	; 18
		}
		if (rx_buf[0] == BUT_ADDR)	//если первый принятый байт совпадает с адресом кнопки
 518:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rx_buf>
 51c:	84 30       	cpi	r24, 0x04	; 4
 51e:	e1 f5       	brne	.+120    	; 0x598 <NRF24L01_Receive+0xc0>
		{
			if (f_pushed)							//если поднят флаг нажатия
 520:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <f_pushed>
 524:	88 23       	and	r24, r24
 526:	b1 f0       	breq	.+44     	; 0x554 <NRF24L01_Receive+0x7c>
			{
				tx_buf[0] = BUT_ADDR;		//записываем в первый байт адрес
 528:	ed e2       	ldi	r30, 0x2D	; 45
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	84 e0       	ldi	r24, 0x04	; 4
 52e:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = time_ms;	//во второй, предварительно преобразованный в тип unsigned long, записываем значение времени
 530:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
 534:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x1>
 538:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <__data_end+0x2>
 53c:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <__data_end+0x3>
 540:	81 83       	std	Z+1, r24	; 0x01
 542:	92 83       	std	Z+2, r25	; 0x02
 544:	a3 83       	std	Z+3, r26	; 0x03
 546:	b4 83       	std	Z+4, r27	; 0x04
 548:	88 ec       	ldi	r24, 0xC8	; 200
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <NRF24L01_Receive+0x72>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);	//			
 54e:	cf 01       	movw	r24, r30
 550:	a1 df       	rcall	.-190    	; 0x494 <NRF24L01_Send>
 552:	10 c0       	rjmp	.+32     	; 0x574 <NRF24L01_Receive+0x9c>
			}
			else
			{
				tx_buf[0] = BUT_ADDR;
 554:	ed e2       	ldi	r30, 0x2D	; 45
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = NOT_PUSHED;
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	9f ef       	ldi	r25, 0xFF	; 255
 560:	dc 01       	movw	r26, r24
 562:	81 83       	std	Z+1, r24	; 0x01
 564:	92 83       	std	Z+2, r25	; 0x02
 566:	a3 83       	std	Z+3, r26	; 0x03
 568:	b4 83       	std	Z+4, r27	; 0x04
 56a:	88 ec       	ldi	r24, 0xC8	; 200
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <NRF24L01_Receive+0x94>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);
 570:	cf 01       	movw	r24, r30
 572:	90 df       	rcall	.-224    	; 0x494 <NRF24L01_Send>
			}
			if (rx_buf[1] == 0x01)
 574:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rx_buf+0x1>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	71 f4       	brne	.+28     	; 0x598 <NRF24L01_Receive+0xc0>
			{
				if(rx_buf[2] == 0x01) LED_ON;
 57c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_buf+0x2>
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	19 f4       	brne	.+6      	; 0x58a <NRF24L01_Receive+0xb2>
 584:	82 b3       	in	r24, 0x12	; 18
 586:	80 64       	ori	r24, 0x40	; 64
 588:	82 bb       	out	0x12, r24	; 18
				if(rx_buf[2] == 0x00) LED_OFF;
 58a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_buf+0x2>
 58e:	81 11       	cpse	r24, r1
 590:	03 c0       	rjmp	.+6      	; 0x598 <NRF24L01_Receive+0xc0>
 592:	82 b3       	in	r24, 0x12	; 18
 594:	8f 7b       	andi	r24, 0xBF	; 191
 596:	82 bb       	out	0x12, r24	; 18
 598:	08 95       	ret

0000059a <NRF24_init>:
}

//------------------------------------------------
void NRF24_init(void)
{//инициализация
	CE_RESET;						//опускаем к земле вывод ce
 59a:	88 b3       	in	r24, 0x18	; 24
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	88 bb       	out	0x18, r24	; 24
 5a0:	8f e0       	ldi	r24, 0x0F	; 15
 5a2:	97 e2       	ldi	r25, 0x27	; 39
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <NRF24_init+0xa>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <NRF24_init+0x10>
 5aa:	00 00       	nop
	_delay_us(5000);		//задержка 5 мс
	//записываем конфигурационный байт, 
	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 5ac:	6a e0       	ldi	r22, 0x0A	; 10
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	a1 de       	rcall	.-702    	; 0x2f4 <NRF24_WriteReg>
 5b2:	8f e0       	ldi	r24, 0x0F	; 15
 5b4:	97 e2       	ldi	r25, 0x27	; 39
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <NRF24_init+0x1c>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <NRF24_init+0x22>
 5bc:	00 00       	nop
	_delay_us(5000);
	NRF24_WriteReg(EN_AA, 0x01); // Enable Pipe0
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	98 de       	rcall	.-720    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); // Enable Pipe0
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	95 de       	rcall	.-726    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); // Setup address width=3 bytes
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	92 de       	rcall	.-732    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 5d0:	6f e5       	ldi	r22, 0x5F	; 95
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	8f de       	rcall	.-738    	; 0x2f4 <NRF24_WriteReg>
	NRF24_ToggleFeatures();//активация команд
 5d6:	9c de       	rcall	.-712    	; 0x310 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);//установка стандартных значений регистра FEATURE 
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	8d e1       	ldi	r24, 0x1D	; 29
 5dc:	8b de       	rcall	.-746    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);//отключение динамического размера полезной нагрузки
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	8c e1       	ldi	r24, 0x1C	; 28
 5e2:	88 de       	rcall	.-752    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70); //Reset flags for IRQ
 5e4:	60 e7       	ldi	r22, 0x70	; 112
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	85 de       	rcall	.-758    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); // частота 2476 MHz
 5ea:	6c e4       	ldi	r22, 0x4C	; 76
 5ec:	85 e0       	ldi	r24, 0x05	; 5
 5ee:	82 de       	rcall	.-764    	; 0x2f4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 5f0:	66 e0       	ldi	r22, 0x06	; 6
 5f2:	86 e0       	ldi	r24, 0x06	; 6
 5f4:	7f de       	rcall	.-770    	; 0x2f4 <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса передачи
 5f6:	43 e0       	ldi	r20, 0x03	; 3
 5f8:	63 e6       	ldi	r22, 0x63	; 99
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	80 e1       	ldi	r24, 0x10	; 16
 5fe:	bd de       	rcall	.-646    	; 0x37a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса приема
 600:	43 e0       	ldi	r20, 0x03	; 3
 602:	63 e6       	ldi	r22, 0x63	; 99
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	8b e0       	ldi	r24, 0x0B	; 11
 608:	b8 de       	rcall	.-656    	; 0x37a <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 60a:	65 e0       	ldi	r22, 0x05	; 5
 60c:	81 e1       	ldi	r24, 0x11	; 17
 60e:	72 de       	rcall	.-796    	; 0x2f4 <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();	//режим приема
 610:	ef de       	rcall	.-546    	; 0x3f0 <NRF24L01_RX_Mode>
	LED_OFF;
 612:	82 b3       	in	r24, 0x12	; 18
 614:	8f 7b       	andi	r24, 0xBF	; 191
 616:	82 bb       	out	0x12, r24	; 18
 618:	08 95       	ret

0000061a <IRQ_Callback>:
}
//--------------------------------------------------
void IRQ_Callback(void)
{
 61a:	cf 93       	push	r28
 61c:	8a e1       	ldi	r24, 0x1A	; 26
 61e:	8a 95       	dec	r24
 620:	f1 f7       	brne	.-4      	; 0x61e <IRQ_Callback+0x4>
 622:	00 c0       	rjmp	.+0      	; 0x624 <IRQ_Callback+0xa>
	uint8_t status=0x01;	//переменная статус
	_delay_us(10);
	status = NRF24_ReadReg(STATUS);	//чтение значения регистра статуса
 624:	87 e0       	ldi	r24, 0x07	; 7
 626:	54 de       	rcall	.-856    	; 0x2d0 <NRF24_ReadReg>
 628:	c8 2f       	mov	r28, r24
	if(status & RX_DR)							//если есть данные на прием
 62a:	86 ff       	sbrs	r24, 6
 62c:	0b c0       	rjmp	.+22     	; 0x644 <IRQ_Callback+0x2a>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);//чтение буфера
 62e:	45 e0       	ldi	r20, 0x05	; 5
 630:	62 e3       	ldi	r22, 0x32	; 50
 632:	71 e0       	ldi	r23, 0x01	; 1
 634:	81 e6       	ldi	r24, 0x61	; 97
 636:	7b de       	rcall	.-778    	; 0x32e <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 638:	60 e4       	ldi	r22, 0x40	; 64
 63a:	87 e0       	ldi	r24, 0x07	; 7
 63c:	5b de       	rcall	.-842    	; 0x2f4 <NRF24_WriteReg>
		f_rx = 1;									//поднимаем флаг приема
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <f_rx>
	}
	if(status & TX_DS) //данные успешно отправлены
 644:	c5 ff       	sbrs	r28, 5
 646:	08 c0       	rjmp	.+16     	; 0x658 <IRQ_Callback+0x3e>
	{
		NRF24_WriteReg(STATUS, 0x20);	//очистка всех битов кроме пятого
 648:	60 e2       	ldi	r22, 0x20	; 32
 64a:	87 e0       	ldi	r24, 0x07	; 7
 64c:	53 de       	rcall	.-858    	; 0x2f4 <NRF24_WriteReg>
		NRF24L01_RX_Mode();						//переход в режим приема
 64e:	d0 de       	rcall	.-608    	; 0x3f0 <NRF24L01_RX_Mode>
		f_tx = 1;									//поднимаем флаг передачи
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <f_tx>
 656:	07 c0       	rjmp	.+14     	; 0x666 <IRQ_Callback+0x4c>
	}
	else if(status & MAX_RT)//превышение количества попыток отправки
 658:	c4 ff       	sbrs	r28, 4
 65a:	05 c0       	rjmp	.+10     	; 0x666 <IRQ_Callback+0x4c>
	{
		NRF24_WriteReg(STATUS, 0x10);//однуление всех остальных битов, кроме 4го
 65c:	60 e1       	ldi	r22, 0x10	; 16
 65e:	87 e0       	ldi	r24, 0x07	; 7
 660:	49 de       	rcall	.-878    	; 0x2f4 <NRF24_WriteReg>
		NRF24_FlushTX();			//очистка буфера отправки
 662:	b9 de       	rcall	.-654    	; 0x3d6 <NRF24_FlushTX>
		//Уходим в режим приёмника
		NRF24L01_RX_Mode();
 664:	c5 de       	rcall	.-630    	; 0x3f0 <NRF24L01_RX_Mode>
	}
}
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <spi_init>:
#include "spi.h"
#include "main.h"

void spi_init(void)
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //ножки SPI на выход
 66a:	87 b3       	in	r24, 0x17	; 23
 66c:	8c 62       	ori	r24, 0x2C	; 44
 66e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
 670:	88 b3       	in	r24, 0x18	; 24
 672:	83 7d       	andi	r24, 0xD3	; 211
 674:	88 bb       	out	0x18, r24	; 24
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 676:	80 e5       	ldi	r24, 0x50	; 80
 678:	8d b9       	out	0x0d, r24	; 13
 67a:	08 95       	ret

0000067c <spi_sendByte>:
}

void spi_sendByte(uint8_t byte)
{
	SPDR = byte;
 67c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутся
 67e:	77 9b       	sbis	0x0e, 7	; 14
 680:	fe cf       	rjmp	.-4      	; 0x67e <spi_sendByte+0x2>
}
 682:	08 95       	ret

00000684 <spi_changeByte>:

uint8_t spi_changeByte(uint8_t byte)
{
	SPDR = byte;
 684:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутся (обменяются)
 686:	77 9b       	sbis	0x0e, 7	; 14
 688:	fe cf       	rjmp	.-4      	; 0x686 <spi_changeByte+0x2>
	return SPDR;
 68a:	8f b1       	in	r24, 0x0f	; 15
 68c:	08 95       	ret

0000068e <USART_Init>:
#include "main.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART
		UBRRH = (unsigned char)(ubrr>>8);
 68e:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
 690:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
 692:	88 e1       	ldi	r24, 0x18	; 24
 694:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
 696:	8a b1       	in	r24, 0x0a	; 10
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
 69c:	8b b1       	in	r24, 0x0b	; 11
 69e:	82 60       	ori	r24, 0x02	; 2
 6a0:	8b b9       	out	0x0b, r24	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 6a2:	8e e8       	ldi	r24, 0x8E	; 142
 6a4:	80 bd       	out	0x20, r24	; 32
 6a6:	08 95       	ret

000006a8 <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 6a8:	5d 9b       	sbis	0x0b, 5	; 11
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <USART_Transmit>
	UDR = data; //Начало передачи данных
 6ac:	8c b9       	out	0x0c, r24	; 12
 6ae:	08 95       	ret

000006b0 <usart_println>:
}

void usart_println(char *str)
{
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++)
 6ba:	c0 e0       	ldi	r28, 0x00	; 0
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <usart_println+0x1c>
	{
		USART_Transmit(str[i]); //Функция отправки данных
 6c0:	f8 01       	movw	r30, r16
 6c2:	ec 0f       	add	r30, r28
 6c4:	fd 1f       	adc	r31, r29
 6c6:	80 81       	ld	r24, Z
 6c8:	ef df       	rcall	.-34     	; 0x6a8 <USART_Transmit>
	UDR = data; //Начало передачи данных
}

void usart_println(char *str)
{
	for (int i = 0; i < strlen(str); i++)
 6ca:	21 96       	adiw	r28, 0x01	; 1
 6cc:	f8 01       	movw	r30, r16
 6ce:	01 90       	ld	r0, Z+
 6d0:	00 20       	and	r0, r0
 6d2:	e9 f7       	brne	.-6      	; 0x6ce <usart_println+0x1e>
 6d4:	31 97       	sbiw	r30, 0x01	; 1
 6d6:	e0 1b       	sub	r30, r16
 6d8:	f1 0b       	sbc	r31, r17
 6da:	ce 17       	cp	r28, r30
 6dc:	df 07       	cpc	r29, r31
 6de:	80 f3       	brcs	.-32     	; 0x6c0 <usart_println+0x10>
	{
		USART_Transmit(str[i]); //Функция отправки данных
	}
	USART_Transmit(0x0d);//переход в начало строки
 6e0:	8d e0       	ldi	r24, 0x0D	; 13
 6e2:	e2 df       	rcall	.-60     	; 0x6a8 <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
 6e4:	8a e0       	ldi	r24, 0x0A	; 10
 6e6:	e0 df       	rcall	.-64     	; 0x6a8 <USART_Transmit>
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <sprintf>:
 6f2:	ae e0       	ldi	r26, 0x0E	; 14
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	ee e7       	ldi	r30, 0x7E	; 126
 6f8:	f3 e0       	ldi	r31, 0x03	; 3
 6fa:	aa c2       	rjmp	.+1364   	; 0xc50 <__prologue_saves__+0x1c>
 6fc:	0d 89       	ldd	r16, Y+21	; 0x15
 6fe:	1e 89       	ldd	r17, Y+22	; 0x16
 700:	86 e0       	ldi	r24, 0x06	; 6
 702:	8c 83       	std	Y+4, r24	; 0x04
 704:	1a 83       	std	Y+2, r17	; 0x02
 706:	09 83       	std	Y+1, r16	; 0x01
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f e7       	ldi	r25, 0x7F	; 127
 70c:	9e 83       	std	Y+6, r25	; 0x06
 70e:	8d 83       	std	Y+5, r24	; 0x05
 710:	ae 01       	movw	r20, r28
 712:	47 5e       	subi	r20, 0xE7	; 231
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	6f 89       	ldd	r22, Y+23	; 0x17
 718:	78 8d       	ldd	r23, Y+24	; 0x18
 71a:	ce 01       	movw	r24, r28
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	08 d0       	rcall	.+16     	; 0x730 <vfprintf>
 720:	ef 81       	ldd	r30, Y+7	; 0x07
 722:	f8 85       	ldd	r31, Y+8	; 0x08
 724:	e0 0f       	add	r30, r16
 726:	f1 1f       	adc	r31, r17
 728:	10 82       	st	Z, r1
 72a:	2e 96       	adiw	r28, 0x0e	; 14
 72c:	e4 e0       	ldi	r30, 0x04	; 4
 72e:	ac c2       	rjmp	.+1368   	; 0xc88 <__epilogue_restores__+0x1c>

00000730 <vfprintf>:
 730:	ab e0       	ldi	r26, 0x0B	; 11
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	ed e9       	ldi	r30, 0x9D	; 157
 736:	f3 e0       	ldi	r31, 0x03	; 3
 738:	7d c2       	rjmp	.+1274   	; 0xc34 <__prologue_saves__>
 73a:	6c 01       	movw	r12, r24
 73c:	7b 01       	movw	r14, r22
 73e:	8a 01       	movw	r16, r20
 740:	fc 01       	movw	r30, r24
 742:	17 82       	std	Z+7, r1	; 0x07
 744:	16 82       	std	Z+6, r1	; 0x06
 746:	83 81       	ldd	r24, Z+3	; 0x03
 748:	81 ff       	sbrs	r24, 1
 74a:	bf c1       	rjmp	.+894    	; 0xaca <vfprintf+0x39a>
 74c:	ce 01       	movw	r24, r28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	3c 01       	movw	r6, r24
 752:	f6 01       	movw	r30, r12
 754:	93 81       	ldd	r25, Z+3	; 0x03
 756:	f7 01       	movw	r30, r14
 758:	93 fd       	sbrc	r25, 3
 75a:	85 91       	lpm	r24, Z+
 75c:	93 ff       	sbrs	r25, 3
 75e:	81 91       	ld	r24, Z+
 760:	7f 01       	movw	r14, r30
 762:	88 23       	and	r24, r24
 764:	09 f4       	brne	.+2      	; 0x768 <vfprintf+0x38>
 766:	ad c1       	rjmp	.+858    	; 0xac2 <vfprintf+0x392>
 768:	85 32       	cpi	r24, 0x25	; 37
 76a:	39 f4       	brne	.+14     	; 0x77a <vfprintf+0x4a>
 76c:	93 fd       	sbrc	r25, 3
 76e:	85 91       	lpm	r24, Z+
 770:	93 ff       	sbrs	r25, 3
 772:	81 91       	ld	r24, Z+
 774:	7f 01       	movw	r14, r30
 776:	85 32       	cpi	r24, 0x25	; 37
 778:	21 f4       	brne	.+8      	; 0x782 <vfprintf+0x52>
 77a:	b6 01       	movw	r22, r12
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	c0 d1       	rcall	.+896    	; 0xb00 <fputc>
 780:	e8 cf       	rjmp	.-48     	; 0x752 <vfprintf+0x22>
 782:	91 2c       	mov	r9, r1
 784:	21 2c       	mov	r2, r1
 786:	31 2c       	mov	r3, r1
 788:	ff e1       	ldi	r31, 0x1F	; 31
 78a:	f3 15       	cp	r31, r3
 78c:	d8 f0       	brcs	.+54     	; 0x7c4 <vfprintf+0x94>
 78e:	8b 32       	cpi	r24, 0x2B	; 43
 790:	79 f0       	breq	.+30     	; 0x7b0 <vfprintf+0x80>
 792:	38 f4       	brcc	.+14     	; 0x7a2 <vfprintf+0x72>
 794:	80 32       	cpi	r24, 0x20	; 32
 796:	79 f0       	breq	.+30     	; 0x7b6 <vfprintf+0x86>
 798:	83 32       	cpi	r24, 0x23	; 35
 79a:	a1 f4       	brne	.+40     	; 0x7c4 <vfprintf+0x94>
 79c:	23 2d       	mov	r18, r3
 79e:	20 61       	ori	r18, 0x10	; 16
 7a0:	1d c0       	rjmp	.+58     	; 0x7dc <vfprintf+0xac>
 7a2:	8d 32       	cpi	r24, 0x2D	; 45
 7a4:	61 f0       	breq	.+24     	; 0x7be <vfprintf+0x8e>
 7a6:	80 33       	cpi	r24, 0x30	; 48
 7a8:	69 f4       	brne	.+26     	; 0x7c4 <vfprintf+0x94>
 7aa:	23 2d       	mov	r18, r3
 7ac:	21 60       	ori	r18, 0x01	; 1
 7ae:	16 c0       	rjmp	.+44     	; 0x7dc <vfprintf+0xac>
 7b0:	83 2d       	mov	r24, r3
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	38 2e       	mov	r3, r24
 7b6:	e3 2d       	mov	r30, r3
 7b8:	e4 60       	ori	r30, 0x04	; 4
 7ba:	3e 2e       	mov	r3, r30
 7bc:	2a c0       	rjmp	.+84     	; 0x812 <vfprintf+0xe2>
 7be:	f3 2d       	mov	r31, r3
 7c0:	f8 60       	ori	r31, 0x08	; 8
 7c2:	1d c0       	rjmp	.+58     	; 0x7fe <vfprintf+0xce>
 7c4:	37 fc       	sbrc	r3, 7
 7c6:	2d c0       	rjmp	.+90     	; 0x822 <vfprintf+0xf2>
 7c8:	20 ed       	ldi	r18, 0xD0	; 208
 7ca:	28 0f       	add	r18, r24
 7cc:	2a 30       	cpi	r18, 0x0A	; 10
 7ce:	40 f0       	brcs	.+16     	; 0x7e0 <vfprintf+0xb0>
 7d0:	8e 32       	cpi	r24, 0x2E	; 46
 7d2:	b9 f4       	brne	.+46     	; 0x802 <vfprintf+0xd2>
 7d4:	36 fc       	sbrc	r3, 6
 7d6:	75 c1       	rjmp	.+746    	; 0xac2 <vfprintf+0x392>
 7d8:	23 2d       	mov	r18, r3
 7da:	20 64       	ori	r18, 0x40	; 64
 7dc:	32 2e       	mov	r3, r18
 7de:	19 c0       	rjmp	.+50     	; 0x812 <vfprintf+0xe2>
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <vfprintf+0xc0>
 7e4:	8a e0       	ldi	r24, 0x0A	; 10
 7e6:	98 9e       	mul	r9, r24
 7e8:	20 0d       	add	r18, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	92 2e       	mov	r9, r18
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <vfprintf+0xe2>
 7f0:	ea e0       	ldi	r30, 0x0A	; 10
 7f2:	2e 9e       	mul	r2, r30
 7f4:	20 0d       	add	r18, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	22 2e       	mov	r2, r18
 7fa:	f3 2d       	mov	r31, r3
 7fc:	f0 62       	ori	r31, 0x20	; 32
 7fe:	3f 2e       	mov	r3, r31
 800:	08 c0       	rjmp	.+16     	; 0x812 <vfprintf+0xe2>
 802:	8c 36       	cpi	r24, 0x6C	; 108
 804:	21 f4       	brne	.+8      	; 0x80e <vfprintf+0xde>
 806:	83 2d       	mov	r24, r3
 808:	80 68       	ori	r24, 0x80	; 128
 80a:	38 2e       	mov	r3, r24
 80c:	02 c0       	rjmp	.+4      	; 0x812 <vfprintf+0xe2>
 80e:	88 36       	cpi	r24, 0x68	; 104
 810:	41 f4       	brne	.+16     	; 0x822 <vfprintf+0xf2>
 812:	f7 01       	movw	r30, r14
 814:	93 fd       	sbrc	r25, 3
 816:	85 91       	lpm	r24, Z+
 818:	93 ff       	sbrs	r25, 3
 81a:	81 91       	ld	r24, Z+
 81c:	7f 01       	movw	r14, r30
 81e:	81 11       	cpse	r24, r1
 820:	b3 cf       	rjmp	.-154    	; 0x788 <vfprintf+0x58>
 822:	98 2f       	mov	r25, r24
 824:	9f 7d       	andi	r25, 0xDF	; 223
 826:	95 54       	subi	r25, 0x45	; 69
 828:	93 30       	cpi	r25, 0x03	; 3
 82a:	28 f4       	brcc	.+10     	; 0x836 <vfprintf+0x106>
 82c:	0c 5f       	subi	r16, 0xFC	; 252
 82e:	1f 4f       	sbci	r17, 0xFF	; 255
 830:	9f e3       	ldi	r25, 0x3F	; 63
 832:	99 83       	std	Y+1, r25	; 0x01
 834:	0d c0       	rjmp	.+26     	; 0x850 <vfprintf+0x120>
 836:	83 36       	cpi	r24, 0x63	; 99
 838:	31 f0       	breq	.+12     	; 0x846 <vfprintf+0x116>
 83a:	83 37       	cpi	r24, 0x73	; 115
 83c:	71 f0       	breq	.+28     	; 0x85a <vfprintf+0x12a>
 83e:	83 35       	cpi	r24, 0x53	; 83
 840:	09 f0       	breq	.+2      	; 0x844 <vfprintf+0x114>
 842:	55 c0       	rjmp	.+170    	; 0x8ee <vfprintf+0x1be>
 844:	20 c0       	rjmp	.+64     	; 0x886 <vfprintf+0x156>
 846:	f8 01       	movw	r30, r16
 848:	80 81       	ld	r24, Z
 84a:	89 83       	std	Y+1, r24	; 0x01
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	88 24       	eor	r8, r8
 852:	83 94       	inc	r8
 854:	91 2c       	mov	r9, r1
 856:	53 01       	movw	r10, r6
 858:	12 c0       	rjmp	.+36     	; 0x87e <vfprintf+0x14e>
 85a:	28 01       	movw	r4, r16
 85c:	f2 e0       	ldi	r31, 0x02	; 2
 85e:	4f 0e       	add	r4, r31
 860:	51 1c       	adc	r5, r1
 862:	f8 01       	movw	r30, r16
 864:	a0 80       	ld	r10, Z
 866:	b1 80       	ldd	r11, Z+1	; 0x01
 868:	36 fe       	sbrs	r3, 6
 86a:	03 c0       	rjmp	.+6      	; 0x872 <vfprintf+0x142>
 86c:	69 2d       	mov	r22, r9
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <vfprintf+0x146>
 872:	6f ef       	ldi	r22, 0xFF	; 255
 874:	7f ef       	ldi	r23, 0xFF	; 255
 876:	c5 01       	movw	r24, r10
 878:	38 d1       	rcall	.+624    	; 0xaea <strnlen>
 87a:	4c 01       	movw	r8, r24
 87c:	82 01       	movw	r16, r4
 87e:	f3 2d       	mov	r31, r3
 880:	ff 77       	andi	r31, 0x7F	; 127
 882:	3f 2e       	mov	r3, r31
 884:	15 c0       	rjmp	.+42     	; 0x8b0 <vfprintf+0x180>
 886:	28 01       	movw	r4, r16
 888:	22 e0       	ldi	r18, 0x02	; 2
 88a:	42 0e       	add	r4, r18
 88c:	51 1c       	adc	r5, r1
 88e:	f8 01       	movw	r30, r16
 890:	a0 80       	ld	r10, Z
 892:	b1 80       	ldd	r11, Z+1	; 0x01
 894:	36 fe       	sbrs	r3, 6
 896:	03 c0       	rjmp	.+6      	; 0x89e <vfprintf+0x16e>
 898:	69 2d       	mov	r22, r9
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x172>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	c5 01       	movw	r24, r10
 8a4:	17 d1       	rcall	.+558    	; 0xad4 <strnlen_P>
 8a6:	4c 01       	movw	r8, r24
 8a8:	f3 2d       	mov	r31, r3
 8aa:	f0 68       	ori	r31, 0x80	; 128
 8ac:	3f 2e       	mov	r3, r31
 8ae:	82 01       	movw	r16, r4
 8b0:	33 fc       	sbrc	r3, 3
 8b2:	19 c0       	rjmp	.+50     	; 0x8e6 <vfprintf+0x1b6>
 8b4:	82 2d       	mov	r24, r2
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	88 16       	cp	r8, r24
 8ba:	99 06       	cpc	r9, r25
 8bc:	a0 f4       	brcc	.+40     	; 0x8e6 <vfprintf+0x1b6>
 8be:	b6 01       	movw	r22, r12
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	1d d1       	rcall	.+570    	; 0xb00 <fputc>
 8c6:	2a 94       	dec	r2
 8c8:	f5 cf       	rjmp	.-22     	; 0x8b4 <vfprintf+0x184>
 8ca:	f5 01       	movw	r30, r10
 8cc:	37 fc       	sbrc	r3, 7
 8ce:	85 91       	lpm	r24, Z+
 8d0:	37 fe       	sbrs	r3, 7
 8d2:	81 91       	ld	r24, Z+
 8d4:	5f 01       	movw	r10, r30
 8d6:	b6 01       	movw	r22, r12
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	12 d1       	rcall	.+548    	; 0xb00 <fputc>
 8dc:	21 10       	cpse	r2, r1
 8de:	2a 94       	dec	r2
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	82 1a       	sub	r8, r18
 8e4:	91 08       	sbc	r9, r1
 8e6:	81 14       	cp	r8, r1
 8e8:	91 04       	cpc	r9, r1
 8ea:	79 f7       	brne	.-34     	; 0x8ca <vfprintf+0x19a>
 8ec:	e1 c0       	rjmp	.+450    	; 0xab0 <vfprintf+0x380>
 8ee:	84 36       	cpi	r24, 0x64	; 100
 8f0:	11 f0       	breq	.+4      	; 0x8f6 <vfprintf+0x1c6>
 8f2:	89 36       	cpi	r24, 0x69	; 105
 8f4:	39 f5       	brne	.+78     	; 0x944 <vfprintf+0x214>
 8f6:	f8 01       	movw	r30, r16
 8f8:	37 fe       	sbrs	r3, 7
 8fa:	07 c0       	rjmp	.+14     	; 0x90a <vfprintf+0x1da>
 8fc:	60 81       	ld	r22, Z
 8fe:	71 81       	ldd	r23, Z+1	; 0x01
 900:	82 81       	ldd	r24, Z+2	; 0x02
 902:	93 81       	ldd	r25, Z+3	; 0x03
 904:	0c 5f       	subi	r16, 0xFC	; 252
 906:	1f 4f       	sbci	r17, 0xFF	; 255
 908:	08 c0       	rjmp	.+16     	; 0x91a <vfprintf+0x1ea>
 90a:	60 81       	ld	r22, Z
 90c:	71 81       	ldd	r23, Z+1	; 0x01
 90e:	07 2e       	mov	r0, r23
 910:	00 0c       	add	r0, r0
 912:	88 0b       	sbc	r24, r24
 914:	99 0b       	sbc	r25, r25
 916:	0e 5f       	subi	r16, 0xFE	; 254
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	f3 2d       	mov	r31, r3
 91c:	ff 76       	andi	r31, 0x6F	; 111
 91e:	3f 2e       	mov	r3, r31
 920:	97 ff       	sbrs	r25, 7
 922:	09 c0       	rjmp	.+18     	; 0x936 <vfprintf+0x206>
 924:	90 95       	com	r25
 926:	80 95       	com	r24
 928:	70 95       	com	r23
 92a:	61 95       	neg	r22
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	f0 68       	ori	r31, 0x80	; 128
 934:	3f 2e       	mov	r3, r31
 936:	2a e0       	ldi	r18, 0x0A	; 10
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	a3 01       	movw	r20, r6
 93c:	1d d1       	rcall	.+570    	; 0xb78 <__ultoa_invert>
 93e:	88 2e       	mov	r8, r24
 940:	86 18       	sub	r8, r6
 942:	44 c0       	rjmp	.+136    	; 0x9cc <vfprintf+0x29c>
 944:	85 37       	cpi	r24, 0x75	; 117
 946:	31 f4       	brne	.+12     	; 0x954 <vfprintf+0x224>
 948:	23 2d       	mov	r18, r3
 94a:	2f 7e       	andi	r18, 0xEF	; 239
 94c:	b2 2e       	mov	r11, r18
 94e:	2a e0       	ldi	r18, 0x0A	; 10
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	25 c0       	rjmp	.+74     	; 0x99e <vfprintf+0x26e>
 954:	93 2d       	mov	r25, r3
 956:	99 7f       	andi	r25, 0xF9	; 249
 958:	b9 2e       	mov	r11, r25
 95a:	8f 36       	cpi	r24, 0x6F	; 111
 95c:	c1 f0       	breq	.+48     	; 0x98e <vfprintf+0x25e>
 95e:	18 f4       	brcc	.+6      	; 0x966 <vfprintf+0x236>
 960:	88 35       	cpi	r24, 0x58	; 88
 962:	79 f0       	breq	.+30     	; 0x982 <vfprintf+0x252>
 964:	ae c0       	rjmp	.+348    	; 0xac2 <vfprintf+0x392>
 966:	80 37       	cpi	r24, 0x70	; 112
 968:	19 f0       	breq	.+6      	; 0x970 <vfprintf+0x240>
 96a:	88 37       	cpi	r24, 0x78	; 120
 96c:	21 f0       	breq	.+8      	; 0x976 <vfprintf+0x246>
 96e:	a9 c0       	rjmp	.+338    	; 0xac2 <vfprintf+0x392>
 970:	e9 2f       	mov	r30, r25
 972:	e0 61       	ori	r30, 0x10	; 16
 974:	be 2e       	mov	r11, r30
 976:	b4 fe       	sbrs	r11, 4
 978:	0d c0       	rjmp	.+26     	; 0x994 <vfprintf+0x264>
 97a:	fb 2d       	mov	r31, r11
 97c:	f4 60       	ori	r31, 0x04	; 4
 97e:	bf 2e       	mov	r11, r31
 980:	09 c0       	rjmp	.+18     	; 0x994 <vfprintf+0x264>
 982:	34 fe       	sbrs	r3, 4
 984:	0a c0       	rjmp	.+20     	; 0x99a <vfprintf+0x26a>
 986:	29 2f       	mov	r18, r25
 988:	26 60       	ori	r18, 0x06	; 6
 98a:	b2 2e       	mov	r11, r18
 98c:	06 c0       	rjmp	.+12     	; 0x99a <vfprintf+0x26a>
 98e:	28 e0       	ldi	r18, 0x08	; 8
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	05 c0       	rjmp	.+10     	; 0x99e <vfprintf+0x26e>
 994:	20 e1       	ldi	r18, 0x10	; 16
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <vfprintf+0x26e>
 99a:	20 e1       	ldi	r18, 0x10	; 16
 99c:	32 e0       	ldi	r19, 0x02	; 2
 99e:	f8 01       	movw	r30, r16
 9a0:	b7 fe       	sbrs	r11, 7
 9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <vfprintf+0x282>
 9a4:	60 81       	ld	r22, Z
 9a6:	71 81       	ldd	r23, Z+1	; 0x01
 9a8:	82 81       	ldd	r24, Z+2	; 0x02
 9aa:	93 81       	ldd	r25, Z+3	; 0x03
 9ac:	0c 5f       	subi	r16, 0xFC	; 252
 9ae:	1f 4f       	sbci	r17, 0xFF	; 255
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <vfprintf+0x28e>
 9b2:	60 81       	ld	r22, Z
 9b4:	71 81       	ldd	r23, Z+1	; 0x01
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 5f       	subi	r16, 0xFE	; 254
 9bc:	1f 4f       	sbci	r17, 0xFF	; 255
 9be:	a3 01       	movw	r20, r6
 9c0:	db d0       	rcall	.+438    	; 0xb78 <__ultoa_invert>
 9c2:	88 2e       	mov	r8, r24
 9c4:	86 18       	sub	r8, r6
 9c6:	fb 2d       	mov	r31, r11
 9c8:	ff 77       	andi	r31, 0x7F	; 127
 9ca:	3f 2e       	mov	r3, r31
 9cc:	36 fe       	sbrs	r3, 6
 9ce:	0d c0       	rjmp	.+26     	; 0x9ea <vfprintf+0x2ba>
 9d0:	23 2d       	mov	r18, r3
 9d2:	2e 7f       	andi	r18, 0xFE	; 254
 9d4:	a2 2e       	mov	r10, r18
 9d6:	89 14       	cp	r8, r9
 9d8:	58 f4       	brcc	.+22     	; 0x9f0 <vfprintf+0x2c0>
 9da:	34 fe       	sbrs	r3, 4
 9dc:	0b c0       	rjmp	.+22     	; 0x9f4 <vfprintf+0x2c4>
 9de:	32 fc       	sbrc	r3, 2
 9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <vfprintf+0x2c4>
 9e2:	83 2d       	mov	r24, r3
 9e4:	8e 7e       	andi	r24, 0xEE	; 238
 9e6:	a8 2e       	mov	r10, r24
 9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <vfprintf+0x2c4>
 9ea:	b8 2c       	mov	r11, r8
 9ec:	a3 2c       	mov	r10, r3
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <vfprintf+0x2c6>
 9f0:	b8 2c       	mov	r11, r8
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <vfprintf+0x2c6>
 9f4:	b9 2c       	mov	r11, r9
 9f6:	a4 fe       	sbrs	r10, 4
 9f8:	0f c0       	rjmp	.+30     	; 0xa18 <vfprintf+0x2e8>
 9fa:	fe 01       	movw	r30, r28
 9fc:	e8 0d       	add	r30, r8
 9fe:	f1 1d       	adc	r31, r1
 a00:	80 81       	ld	r24, Z
 a02:	80 33       	cpi	r24, 0x30	; 48
 a04:	21 f4       	brne	.+8      	; 0xa0e <vfprintf+0x2de>
 a06:	9a 2d       	mov	r25, r10
 a08:	99 7e       	andi	r25, 0xE9	; 233
 a0a:	a9 2e       	mov	r10, r25
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <vfprintf+0x2f0>
 a0e:	a2 fe       	sbrs	r10, 2
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <vfprintf+0x2ee>
 a12:	b3 94       	inc	r11
 a14:	b3 94       	inc	r11
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <vfprintf+0x2f0>
 a18:	8a 2d       	mov	r24, r10
 a1a:	86 78       	andi	r24, 0x86	; 134
 a1c:	09 f0       	breq	.+2      	; 0xa20 <vfprintf+0x2f0>
 a1e:	b3 94       	inc	r11
 a20:	a3 fc       	sbrc	r10, 3
 a22:	10 c0       	rjmp	.+32     	; 0xa44 <vfprintf+0x314>
 a24:	a0 fe       	sbrs	r10, 0
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <vfprintf+0x304>
 a28:	b2 14       	cp	r11, r2
 a2a:	80 f4       	brcc	.+32     	; 0xa4c <vfprintf+0x31c>
 a2c:	28 0c       	add	r2, r8
 a2e:	92 2c       	mov	r9, r2
 a30:	9b 18       	sub	r9, r11
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <vfprintf+0x31e>
 a34:	b2 14       	cp	r11, r2
 a36:	58 f4       	brcc	.+22     	; 0xa4e <vfprintf+0x31e>
 a38:	b6 01       	movw	r22, r12
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	60 d0       	rcall	.+192    	; 0xb00 <fputc>
 a40:	b3 94       	inc	r11
 a42:	f8 cf       	rjmp	.-16     	; 0xa34 <vfprintf+0x304>
 a44:	b2 14       	cp	r11, r2
 a46:	18 f4       	brcc	.+6      	; 0xa4e <vfprintf+0x31e>
 a48:	2b 18       	sub	r2, r11
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x320>
 a4c:	98 2c       	mov	r9, r8
 a4e:	21 2c       	mov	r2, r1
 a50:	a4 fe       	sbrs	r10, 4
 a52:	0f c0       	rjmp	.+30     	; 0xa72 <vfprintf+0x342>
 a54:	b6 01       	movw	r22, r12
 a56:	80 e3       	ldi	r24, 0x30	; 48
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	52 d0       	rcall	.+164    	; 0xb00 <fputc>
 a5c:	a2 fe       	sbrs	r10, 2
 a5e:	16 c0       	rjmp	.+44     	; 0xa8c <vfprintf+0x35c>
 a60:	a1 fc       	sbrc	r10, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <vfprintf+0x33a>
 a64:	88 e7       	ldi	r24, 0x78	; 120
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0x33e>
 a6a:	88 e5       	ldi	r24, 0x58	; 88
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	b6 01       	movw	r22, r12
 a70:	0c c0       	rjmp	.+24     	; 0xa8a <vfprintf+0x35a>
 a72:	8a 2d       	mov	r24, r10
 a74:	86 78       	andi	r24, 0x86	; 134
 a76:	51 f0       	breq	.+20     	; 0xa8c <vfprintf+0x35c>
 a78:	a1 fe       	sbrs	r10, 1
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x350>
 a7c:	8b e2       	ldi	r24, 0x2B	; 43
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <vfprintf+0x352>
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	a7 fc       	sbrc	r10, 7
 a84:	8d e2       	ldi	r24, 0x2D	; 45
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	3a d0       	rcall	.+116    	; 0xb00 <fputc>
 a8c:	89 14       	cp	r8, r9
 a8e:	30 f4       	brcc	.+12     	; 0xa9c <vfprintf+0x36c>
 a90:	b6 01       	movw	r22, r12
 a92:	80 e3       	ldi	r24, 0x30	; 48
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	34 d0       	rcall	.+104    	; 0xb00 <fputc>
 a98:	9a 94       	dec	r9
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <vfprintf+0x35c>
 a9c:	8a 94       	dec	r8
 a9e:	f3 01       	movw	r30, r6
 aa0:	e8 0d       	add	r30, r8
 aa2:	f1 1d       	adc	r31, r1
 aa4:	80 81       	ld	r24, Z
 aa6:	b6 01       	movw	r22, r12
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	2a d0       	rcall	.+84     	; 0xb00 <fputc>
 aac:	81 10       	cpse	r8, r1
 aae:	f6 cf       	rjmp	.-20     	; 0xa9c <vfprintf+0x36c>
 ab0:	22 20       	and	r2, r2
 ab2:	09 f4       	brne	.+2      	; 0xab6 <vfprintf+0x386>
 ab4:	4e ce       	rjmp	.-868    	; 0x752 <vfprintf+0x22>
 ab6:	b6 01       	movw	r22, r12
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	21 d0       	rcall	.+66     	; 0xb00 <fputc>
 abe:	2a 94       	dec	r2
 ac0:	f7 cf       	rjmp	.-18     	; 0xab0 <vfprintf+0x380>
 ac2:	f6 01       	movw	r30, r12
 ac4:	86 81       	ldd	r24, Z+6	; 0x06
 ac6:	97 81       	ldd	r25, Z+7	; 0x07
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0x39e>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	2b 96       	adiw	r28, 0x0b	; 11
 ad0:	e2 e1       	ldi	r30, 0x12	; 18
 ad2:	cc c0       	rjmp	.+408    	; 0xc6c <__epilogue_restores__>

00000ad4 <strnlen_P>:
 ad4:	fc 01       	movw	r30, r24
 ad6:	05 90       	lpm	r0, Z+
 ad8:	61 50       	subi	r22, 0x01	; 1
 ada:	70 40       	sbci	r23, 0x00	; 0
 adc:	01 10       	cpse	r0, r1
 ade:	d8 f7       	brcc	.-10     	; 0xad6 <strnlen_P+0x2>
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	8e 0f       	add	r24, r30
 ae6:	9f 1f       	adc	r25, r31
 ae8:	08 95       	ret

00000aea <strnlen>:
 aea:	fc 01       	movw	r30, r24
 aec:	61 50       	subi	r22, 0x01	; 1
 aee:	70 40       	sbci	r23, 0x00	; 0
 af0:	01 90       	ld	r0, Z+
 af2:	01 10       	cpse	r0, r1
 af4:	d8 f7       	brcc	.-10     	; 0xaec <strnlen+0x2>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	8e 0f       	add	r24, r30
 afc:	9f 1f       	adc	r25, r31
 afe:	08 95       	ret

00000b00 <fputc>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	fb 01       	movw	r30, r22
 b0a:	23 81       	ldd	r18, Z+3	; 0x03
 b0c:	21 fd       	sbrc	r18, 1
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <fputc+0x16>
 b10:	8f ef       	ldi	r24, 0xFF	; 255
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	2c c0       	rjmp	.+88     	; 0xb6e <fputc+0x6e>
 b16:	22 ff       	sbrs	r18, 2
 b18:	16 c0       	rjmp	.+44     	; 0xb46 <fputc+0x46>
 b1a:	46 81       	ldd	r20, Z+6	; 0x06
 b1c:	57 81       	ldd	r21, Z+7	; 0x07
 b1e:	24 81       	ldd	r18, Z+4	; 0x04
 b20:	35 81       	ldd	r19, Z+5	; 0x05
 b22:	42 17       	cp	r20, r18
 b24:	53 07       	cpc	r21, r19
 b26:	44 f4       	brge	.+16     	; 0xb38 <fputc+0x38>
 b28:	a0 81       	ld	r26, Z
 b2a:	b1 81       	ldd	r27, Z+1	; 0x01
 b2c:	9d 01       	movw	r18, r26
 b2e:	2f 5f       	subi	r18, 0xFF	; 255
 b30:	3f 4f       	sbci	r19, 0xFF	; 255
 b32:	31 83       	std	Z+1, r19	; 0x01
 b34:	20 83       	st	Z, r18
 b36:	8c 93       	st	X, r24
 b38:	26 81       	ldd	r18, Z+6	; 0x06
 b3a:	37 81       	ldd	r19, Z+7	; 0x07
 b3c:	2f 5f       	subi	r18, 0xFF	; 255
 b3e:	3f 4f       	sbci	r19, 0xFF	; 255
 b40:	37 83       	std	Z+7, r19	; 0x07
 b42:	26 83       	std	Z+6, r18	; 0x06
 b44:	14 c0       	rjmp	.+40     	; 0xb6e <fputc+0x6e>
 b46:	8b 01       	movw	r16, r22
 b48:	ec 01       	movw	r28, r24
 b4a:	fb 01       	movw	r30, r22
 b4c:	00 84       	ldd	r0, Z+8	; 0x08
 b4e:	f1 85       	ldd	r31, Z+9	; 0x09
 b50:	e0 2d       	mov	r30, r0
 b52:	09 95       	icall
 b54:	89 2b       	or	r24, r25
 b56:	e1 f6       	brne	.-72     	; 0xb10 <fputc+0x10>
 b58:	d8 01       	movw	r26, r16
 b5a:	16 96       	adiw	r26, 0x06	; 6
 b5c:	8d 91       	ld	r24, X+
 b5e:	9c 91       	ld	r25, X
 b60:	17 97       	sbiw	r26, 0x07	; 7
 b62:	01 96       	adiw	r24, 0x01	; 1
 b64:	17 96       	adiw	r26, 0x07	; 7
 b66:	9c 93       	st	X, r25
 b68:	8e 93       	st	-X, r24
 b6a:	16 97       	sbiw	r26, 0x06	; 6
 b6c:	ce 01       	movw	r24, r28
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <__ultoa_invert>:
 b78:	fa 01       	movw	r30, r20
 b7a:	aa 27       	eor	r26, r26
 b7c:	28 30       	cpi	r18, 0x08	; 8
 b7e:	51 f1       	breq	.+84     	; 0xbd4 <__ultoa_invert+0x5c>
 b80:	20 31       	cpi	r18, 0x10	; 16
 b82:	81 f1       	breq	.+96     	; 0xbe4 <__ultoa_invert+0x6c>
 b84:	e8 94       	clt
 b86:	6f 93       	push	r22
 b88:	6e 7f       	andi	r22, 0xFE	; 254
 b8a:	6e 5f       	subi	r22, 0xFE	; 254
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	af 4f       	sbci	r26, 0xFF	; 255
 b94:	b1 e0       	ldi	r27, 0x01	; 1
 b96:	3e d0       	rcall	.+124    	; 0xc14 <__ultoa_invert+0x9c>
 b98:	b4 e0       	ldi	r27, 0x04	; 4
 b9a:	3c d0       	rcall	.+120    	; 0xc14 <__ultoa_invert+0x9c>
 b9c:	67 0f       	add	r22, r23
 b9e:	78 1f       	adc	r23, r24
 ba0:	89 1f       	adc	r24, r25
 ba2:	9a 1f       	adc	r25, r26
 ba4:	a1 1d       	adc	r26, r1
 ba6:	68 0f       	add	r22, r24
 ba8:	79 1f       	adc	r23, r25
 baa:	8a 1f       	adc	r24, r26
 bac:	91 1d       	adc	r25, r1
 bae:	a1 1d       	adc	r26, r1
 bb0:	6a 0f       	add	r22, r26
 bb2:	71 1d       	adc	r23, r1
 bb4:	81 1d       	adc	r24, r1
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	20 d0       	rcall	.+64     	; 0xbfc <__ultoa_invert+0x84>
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <__ultoa_invert+0x48>
 bbe:	68 94       	set
 bc0:	3f 91       	pop	r19
 bc2:	2a e0       	ldi	r18, 0x0A	; 10
 bc4:	26 9f       	mul	r18, r22
 bc6:	11 24       	eor	r1, r1
 bc8:	30 19       	sub	r19, r0
 bca:	30 5d       	subi	r19, 0xD0	; 208
 bcc:	31 93       	st	Z+, r19
 bce:	de f6       	brtc	.-74     	; 0xb86 <__ultoa_invert+0xe>
 bd0:	cf 01       	movw	r24, r30
 bd2:	08 95       	ret
 bd4:	46 2f       	mov	r20, r22
 bd6:	47 70       	andi	r20, 0x07	; 7
 bd8:	40 5d       	subi	r20, 0xD0	; 208
 bda:	41 93       	st	Z+, r20
 bdc:	b3 e0       	ldi	r27, 0x03	; 3
 bde:	0f d0       	rcall	.+30     	; 0xbfe <__ultoa_invert+0x86>
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__ultoa_invert+0x5c>
 be2:	f6 cf       	rjmp	.-20     	; 0xbd0 <__ultoa_invert+0x58>
 be4:	46 2f       	mov	r20, r22
 be6:	4f 70       	andi	r20, 0x0F	; 15
 be8:	40 5d       	subi	r20, 0xD0	; 208
 bea:	4a 33       	cpi	r20, 0x3A	; 58
 bec:	18 f0       	brcs	.+6      	; 0xbf4 <__ultoa_invert+0x7c>
 bee:	49 5d       	subi	r20, 0xD9	; 217
 bf0:	31 fd       	sbrc	r19, 1
 bf2:	40 52       	subi	r20, 0x20	; 32
 bf4:	41 93       	st	Z+, r20
 bf6:	02 d0       	rcall	.+4      	; 0xbfc <__ultoa_invert+0x84>
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__ultoa_invert+0x6c>
 bfa:	ea cf       	rjmp	.-44     	; 0xbd0 <__ultoa_invert+0x58>
 bfc:	b4 e0       	ldi	r27, 0x04	; 4
 bfe:	a6 95       	lsr	r26
 c00:	97 95       	ror	r25
 c02:	87 95       	ror	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	ba 95       	dec	r27
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__ultoa_invert+0x86>
 c0c:	00 97       	sbiw	r24, 0x00	; 0
 c0e:	61 05       	cpc	r22, r1
 c10:	71 05       	cpc	r23, r1
 c12:	08 95       	ret
 c14:	9b 01       	movw	r18, r22
 c16:	ac 01       	movw	r20, r24
 c18:	0a 2e       	mov	r0, r26
 c1a:	06 94       	lsr	r0
 c1c:	57 95       	ror	r21
 c1e:	47 95       	ror	r20
 c20:	37 95       	ror	r19
 c22:	27 95       	ror	r18
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0xa2>
 c28:	62 0f       	add	r22, r18
 c2a:	73 1f       	adc	r23, r19
 c2c:	84 1f       	adc	r24, r20
 c2e:	95 1f       	adc	r25, r21
 c30:	a0 1d       	adc	r26, r0
 c32:	08 95       	ret

00000c34 <__prologue_saves__>:
 c34:	2f 92       	push	r2
 c36:	3f 92       	push	r3
 c38:	4f 92       	push	r4
 c3a:	5f 92       	push	r5
 c3c:	6f 92       	push	r6
 c3e:	7f 92       	push	r7
 c40:	8f 92       	push	r8
 c42:	9f 92       	push	r9
 c44:	af 92       	push	r10
 c46:	bf 92       	push	r11
 c48:	cf 92       	push	r12
 c4a:	df 92       	push	r13
 c4c:	ef 92       	push	r14
 c4e:	ff 92       	push	r15
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	cd b7       	in	r28, 0x3d	; 61
 c5a:	de b7       	in	r29, 0x3e	; 62
 c5c:	ca 1b       	sub	r28, r26
 c5e:	db 0b       	sbc	r29, r27
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	de bf       	out	0x3e, r29	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	cd bf       	out	0x3d, r28	; 61
 c6a:	09 94       	ijmp

00000c6c <__epilogue_restores__>:
 c6c:	2a 88       	ldd	r2, Y+18	; 0x12
 c6e:	39 88       	ldd	r3, Y+17	; 0x11
 c70:	48 88       	ldd	r4, Y+16	; 0x10
 c72:	5f 84       	ldd	r5, Y+15	; 0x0f
 c74:	6e 84       	ldd	r6, Y+14	; 0x0e
 c76:	7d 84       	ldd	r7, Y+13	; 0x0d
 c78:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7e:	b9 84       	ldd	r11, Y+9	; 0x09
 c80:	c8 84       	ldd	r12, Y+8	; 0x08
 c82:	df 80       	ldd	r13, Y+7	; 0x07
 c84:	ee 80       	ldd	r14, Y+6	; 0x06
 c86:	fd 80       	ldd	r15, Y+5	; 0x05
 c88:	0c 81       	ldd	r16, Y+4	; 0x04
 c8a:	1b 81       	ldd	r17, Y+3	; 0x03
 c8c:	aa 81       	ldd	r26, Y+2	; 0x02
 c8e:	b9 81       	ldd	r27, Y+1	; 0x01
 c90:	ce 0f       	add	r28, r30
 c92:	d1 1d       	adc	r29, r1
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	de bf       	out	0x3e, r29	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	cd bf       	out	0x3d, r28	; 61
 c9e:	ed 01       	movw	r28, r26
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
