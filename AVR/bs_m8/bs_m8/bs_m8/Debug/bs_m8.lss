
bs_m8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008000fc  008000fc  00000c8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a0  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093d  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7b  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00003abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ecd  00000000  00000000  00004397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	58 c0       	rjmp	.+176    	; 0xb4 <__vector_1>
   4:	7a c0       	rjmp	.+244    	; 0xfa <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	9f c0       	rjmp	.+318    	; 0x14c <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	44 c0       	rjmp	.+136    	; 0xa0 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e5       	ldi	r30, 0x5C	; 92
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 3f       	cpi	r26, 0xFC	; 252
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	ac ef       	ldi	r26, 0xFC	; 252
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 33       	cpi	r26, 0x32	; 50
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9e d0       	rcall	.+316    	; 0x196 <main>
  5a:	7e c5       	rjmp	.+2812   	; 0xb58 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
void port_init(void)
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	87 bb       	out	0x17, r24	; 23
	// State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
  62:	18 ba       	out	0x18, r1	; 24

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  64:	14 ba       	out	0x14, r1	; 20
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  66:	15 ba       	out	0x15, r1	; 21

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  68:	80 ec       	ldi	r24, 0xC0	; 192
  6a:	81 bb       	out	0x11, r24	; 17
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=P Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	82 bb       	out	0x12, r24	; 18
  70:	08 95       	ret

00000072 <timer_init>:
	// Timer Period: 1 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  72:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
  74:	8b e0       	ldi	r24, 0x0B	; 11
  76:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  78:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  7a:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  7c:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
  7e:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
  80:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x7C;
  82:	8c e7       	ldi	r24, 0x7C	; 124
  84:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
  86:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  88:	18 bc       	out	0x28, r1	; 40

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
  8a:	81 e1       	ldi	r24, 0x11	; 17
  8c:	89 bf       	out	0x39, r24	; 57
  8e:	08 95       	ret

00000090 <interrupt_init>:
	// External Interrupt(s) initialization
	// INT0: On
	// INT0 Mode: Falling Edge
	// INT1: On
	// INT1 Mode: Falling Edge
	GICR|=(1<<INT1) | (1<<INT0);
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	85 bf       	out	0x35, r24	; 53
	GIFR=(1<<INTF1) | (1<<INTF0);
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	8a bf       	out	0x3a, r24	; 58
  9e:	08 95       	ret

000000a0 <__vector_11>:
}

ISR(USART_RXC_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
	
}
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_1>:

ISR(INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	IRQ_Callback();
  d6:	fc d1       	rcall	.+1016   	; 0x4d0 <IRQ_Callback>
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:

ISR(INT1_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
	if(!f_pushed)							//если опущен флаг нажатия
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <f_pushed>
 110:	81 11       	cpse	r24, r1
 112:	13 c0       	rjmp	.+38     	; 0x13a <__vector_2+0x40>
	{
		f_pushed = 1;						//поднимаем флаг нажатия
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <f_pushed>
		time_ms = miliseconds;				//сохраняем количество мс
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <miliseconds>
 11e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <miliseconds+0x1>
 122:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <miliseconds+0x2>
 126:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <miliseconds+0x3>
 12a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
 12e:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x1>
 132:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <__data_end+0x2>
 136:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <__data_end+0x3>
	}
}
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
	miliseconds++;										//считаем мс
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <miliseconds>
 162:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <miliseconds+0x1>
 166:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <miliseconds+0x2>
 16a:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <miliseconds+0x3>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	a1 1d       	adc	r26, r1
 172:	b1 1d       	adc	r27, r1
 174:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <miliseconds>
 178:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <miliseconds+0x1>
 17c:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <miliseconds+0x2>
 180:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <miliseconds+0x3>
}
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:

int main(void)
{
	interrupt_init();
 196:	7c df       	rcall	.-264    	; 0x90 <interrupt_init>
	port_init();
 198:	62 df       	rcall	.-316    	; 0x5e <port_init>
	timer_init();
 19a:	6b df       	rcall	.-298    	; 0x72 <timer_init>
	spi_init();
 19c:	c1 d1       	rcall	.+898    	; 0x520 <spi_init>
	USART_Init (8); //115200
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	d0 d1       	rcall	.+928    	; 0x544 <USART_Init>
	NRF24_init();
 1a4:	55 d1       	rcall	.+682    	; 0x450 <NRF24_init>
    sei();
 1a6:	78 94       	sei
	usart_println("start");
 1a8:	86 e6       	ldi	r24, 0x66	; 102
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	dc d1       	rcall	.+952    	; 0x566 <usart_println>

	dt_reg = NRF24_ReadReg(CONFIG);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	a5 d0       	rcall	.+330    	; 0x2fc <NRF24_ReadReg>
 1b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"CONFIG: 0x%02X",dt_reg);
 1b6:	1f 92       	push	r1
 1b8:	8f 93       	push	r24
 1ba:	8c e6       	ldi	r24, 0x6C	; 108
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	cb e0       	ldi	r28, 0x0B	; 11
 1c4:	d1 e0       	ldi	r29, 0x01	; 1
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	ee d1       	rcall	.+988    	; 0x5a8 <sprintf>
	usart_println(str);
 1cc:	ce 01       	movw	r24, r28
 1ce:	cb d1       	rcall	.+918    	; 0x566 <usart_println>
	dt_reg = NRF24_ReadReg(EN_AA);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	94 d0       	rcall	.+296    	; 0x2fc <NRF24_ReadReg>
 1d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"EN_AA: 0x%02X",dt_reg);
 1d8:	1f 92       	push	r1
 1da:	8f 93       	push	r24
 1dc:	8b e7       	ldi	r24, 0x7B	; 123
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	df d1       	rcall	.+958    	; 0x5a8 <sprintf>
	usart_println(str);
 1ea:	ce 01       	movw	r24, r28
 1ec:	bc d1       	rcall	.+888    	; 0x566 <usart_println>
	dt_reg = NRF24_ReadReg(EN_RXADDR);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	85 d0       	rcall	.+266    	; 0x2fc <NRF24_ReadReg>
 1f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"EN_RXADDR: 0x%02X",dt_reg);
 1f6:	1f 92       	push	r1
 1f8:	8f 93       	push	r24
 1fa:	89 e8       	ldi	r24, 0x89	; 137
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	d0 d1       	rcall	.+928    	; 0x5a8 <sprintf>
	usart_println(str);
 208:	ce 01       	movw	r24, r28
 20a:	ad d1       	rcall	.+858    	; 0x566 <usart_println>
	dt_reg = NRF24_ReadReg(STATUS);
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	76 d0       	rcall	.+236    	; 0x2fc <NRF24_ReadReg>
 210:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"STATUS: 0x%02X",dt_reg);
 214:	1f 92       	push	r1
 216:	8f 93       	push	r24
 218:	8b e9       	ldi	r24, 0x9B	; 155
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	df 93       	push	r29
 222:	cf 93       	push	r28
 224:	c1 d1       	rcall	.+898    	; 0x5a8 <sprintf>
	usart_println(str);
 226:	ce 01       	movw	r24, r28
 228:	9e d1       	rcall	.+828    	; 0x566 <usart_println>
	dt_reg = NRF24_ReadReg(RF_SETUP);
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	67 d0       	rcall	.+206    	; 0x2fc <NRF24_ReadReg>
 22e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dt_reg>
	sprintf(str,"RF_SETUP: 0x%02X",dt_reg);
 232:	1f 92       	push	r1
 234:	8f 93       	push	r24
 236:	8a ea       	ldi	r24, 0xAA	; 170
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9f 93       	push	r25
 23c:	8f 93       	push	r24
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	b2 d1       	rcall	.+868    	; 0x5a8 <sprintf>
	usart_println(str);
 244:	ce 01       	movw	r24, r28
 246:	8f d1       	rcall	.+798    	; 0x566 <usart_println>
	NRF24_Read_Buf(TX_ADDR,buf,3);
 248:	43 e0       	ldi	r20, 0x03	; 3
 24a:	65 e0       	ldi	r22, 0x05	; 5
 24c:	71 e0       	ldi	r23, 0x01	; 1
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	82 d0       	rcall	.+260    	; 0x356 <NRF24_Read_Buf>
	sprintf(str,"TX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
 252:	05 e0       	ldi	r16, 0x05	; 5
 254:	11 e0       	ldi	r17, 0x01	; 1
 256:	f8 01       	movw	r30, r16
 258:	22 81       	ldd	r18, Z+2	; 0x02
 25a:	91 81       	ldd	r25, Z+1	; 0x01
 25c:	80 81       	ld	r24, Z
 25e:	1f 92       	push	r1
 260:	2f 93       	push	r18
 262:	1f 92       	push	r1
 264:	9f 93       	push	r25
 266:	1f 92       	push	r1
 268:	8f 93       	push	r24
 26a:	8b eb       	ldi	r24, 0xBB	; 187
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9f 93       	push	r25
 270:	8f 93       	push	r24
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	98 d1       	rcall	.+816    	; 0x5a8 <sprintf>
	usart_println(str);
 278:	8d b7       	in	r24, 0x3d	; 61
 27a:	9e b7       	in	r25, 0x3e	; 62
 27c:	88 96       	adiw	r24, 0x28	; 40
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	9e bf       	out	0x3e, r25	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	8d bf       	out	0x3d, r24	; 61
 288:	ce 01       	movw	r24, r28
 28a:	6d d1       	rcall	.+730    	; 0x566 <usart_println>
	NRF24_Read_Buf(RX_ADDR_P1,buf,3);
 28c:	43 e0       	ldi	r20, 0x03	; 3
 28e:	b8 01       	movw	r22, r16
 290:	8b e0       	ldi	r24, 0x0B	; 11
 292:	61 d0       	rcall	.+194    	; 0x356 <NRF24_Read_Buf>
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
 294:	f8 01       	movw	r30, r16
 296:	22 81       	ldd	r18, Z+2	; 0x02
 298:	91 81       	ldd	r25, Z+1	; 0x01
 29a:	80 81       	ld	r24, Z
 29c:	1f 92       	push	r1
 29e:	2f 93       	push	r18
 2a0:	1f 92       	push	r1
 2a2:	9f 93       	push	r25
 2a4:	1f 92       	push	r1
 2a6:	8f 93       	push	r24
 2a8:	8b ed       	ldi	r24, 0xDB	; 219
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9f 93       	push	r25
 2ae:	8f 93       	push	r24
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	79 d1       	rcall	.+754    	; 0x5a8 <sprintf>
	usart_println(str);
 2b6:	ce 01       	movw	r24, r28
 2b8:	56 d1       	rcall	.+684    	; 0x566 <usart_println>
 2ba:	8d b7       	in	r24, 0x3d	; 61
 2bc:	9e b7       	in	r25, 0x3e	; 62
 2be:	0a 96       	adiw	r24, 0x0a	; 10
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	9e bf       	out	0x3e, r25	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	8d bf       	out	0x3d, r24	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	e0 e7       	ldi	r30, 0x70	; 112
 2ce:	f2 e0       	ldi	r31, 0x02	; 2
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	e0 40       	sbci	r30, 0x00	; 0
 2d4:	f0 40       	sbci	r31, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2da:	00 00       	nop

    while (1) 
    {
		_delay_us(100000);
		LED_ON;
 2dc:	82 b3       	in	r24, 0x12	; 18
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	82 bb       	out	0x12, r24	; 18
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	80 e7       	ldi	r24, 0x70	; 112
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <__EEPROM_REGION_LENGTH__+0xf2>
 2f2:	00 00       	nop
		_delay_us(100000);
		LED_OFF;
 2f4:	82 b3       	in	r24, 0x12	; 18
 2f6:	8f 7b       	andi	r24, 0xBF	; 191
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	e7 cf       	rjmp	.-50     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>

000002fc <NRF24_ReadReg>:
				NRF24L01_Send(tx_buf);
			}
			if (rx_buf[1] == 0x01)
			{
				if(rx_buf[2] == 0x01) LED_ON;
				if(rx_buf[2] == 0x00) LED_OFF;
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
 300:	82 b3       	in	r24, 0x12	; 18
 302:	8f 77       	andi	r24, 0x7F	; 127
 304:	82 bb       	out	0x12, r24	; 18
 306:	8c 2f       	mov	r24, r28
 308:	18 d1       	rcall	.+560    	; 0x53a <spi_changeByte>
 30a:	c7 30       	cpi	r28, 0x07	; 7
 30c:	11 f0       	breq	.+4      	; 0x312 <NRF24_ReadReg+0x16>
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	14 d1       	rcall	.+552    	; 0x53a <spi_changeByte>
 312:	92 b3       	in	r25, 0x12	; 18
 314:	90 68       	ori	r25, 0x80	; 128
 316:	92 bb       	out	0x12, r25	; 18
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <NRF24_WriteReg>:
 31c:	cf 93       	push	r28
 31e:	c6 2f       	mov	r28, r22
 320:	92 b3       	in	r25, 0x12	; 18
 322:	9f 77       	andi	r25, 0x7F	; 127
 324:	92 bb       	out	0x12, r25	; 18
 326:	80 62       	ori	r24, 0x20	; 32
 328:	04 d1       	rcall	.+520    	; 0x532 <spi_sendByte>
 32a:	8c 2f       	mov	r24, r28
 32c:	02 d1       	rcall	.+516    	; 0x532 <spi_sendByte>
 32e:	82 b3       	in	r24, 0x12	; 18
 330:	80 68       	ori	r24, 0x80	; 128
 332:	82 bb       	out	0x12, r24	; 18
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <NRF24_ToggleFeatures>:
 338:	82 b3       	in	r24, 0x12	; 18
 33a:	8f 77       	andi	r24, 0x7F	; 127
 33c:	82 bb       	out	0x12, r24	; 18
 33e:	80 e5       	ldi	r24, 0x50	; 80
 340:	f8 d0       	rcall	.+496    	; 0x532 <spi_sendByte>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <NRF24_ToggleFeatures+0xc>
 348:	00 c0       	rjmp	.+0      	; 0x34a <NRF24_ToggleFeatures+0x12>
 34a:	83 e7       	ldi	r24, 0x73	; 115
 34c:	f2 d0       	rcall	.+484    	; 0x532 <spi_sendByte>
 34e:	82 b3       	in	r24, 0x12	; 18
 350:	80 68       	ori	r24, 0x80	; 128
 352:	82 bb       	out	0x12, r24	; 18
 354:	08 95       	ret

00000356 <NRF24_Read_Buf>:
 356:	cf 92       	push	r12
 358:	df 92       	push	r13
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d8 2f       	mov	r29, r24
 366:	6b 01       	movw	r12, r22
 368:	f4 2e       	mov	r15, r20
 36a:	82 b3       	in	r24, 0x12	; 18
 36c:	8f 77       	andi	r24, 0x7F	; 127
 36e:	82 bb       	out	0x12, r24	; 18
 370:	8d 2f       	mov	r24, r29
 372:	df d0       	rcall	.+446    	; 0x532 <spi_sendByte>
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	08 c0       	rjmp	.+16     	; 0x388 <NRF24_Read_Buf+0x32>
 378:	86 01       	movw	r16, r12
 37a:	0c 0f       	add	r16, r28
 37c:	11 1d       	adc	r17, r1
 37e:	8d 2f       	mov	r24, r29
 380:	dc d0       	rcall	.+440    	; 0x53a <spi_changeByte>
 382:	f8 01       	movw	r30, r16
 384:	80 83       	st	Z, r24
 386:	cf 5f       	subi	r28, 0xFF	; 255
 388:	cf 15       	cp	r28, r15
 38a:	b0 f3       	brcs	.-20     	; 0x378 <NRF24_Read_Buf+0x22>
 38c:	82 b3       	in	r24, 0x12	; 18
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	82 bb       	out	0x12, r24	; 18
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	df 90       	pop	r13
 39e:	cf 90       	pop	r12
 3a0:	08 95       	ret

000003a2 <NRF24_Write_Buf>:
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	8b 01       	movw	r16, r22
 3ac:	d4 2f       	mov	r29, r20
 3ae:	92 b3       	in	r25, 0x12	; 18
 3b0:	9f 77       	andi	r25, 0x7F	; 127
 3b2:	92 bb       	out	0x12, r25	; 18
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	bd d0       	rcall	.+378    	; 0x532 <spi_sendByte>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	8a 95       	dec	r24
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <NRF24_Write_Buf+0x18>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <NRF24_Write_Buf+0x1e>
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <NRF24_Write_Buf+0x2e>
 3c4:	f8 01       	movw	r30, r16
 3c6:	ec 0f       	add	r30, r28
 3c8:	f1 1d       	adc	r31, r1
 3ca:	80 81       	ld	r24, Z
 3cc:	b2 d0       	rcall	.+356    	; 0x532 <spi_sendByte>
 3ce:	cf 5f       	subi	r28, 0xFF	; 255
 3d0:	cd 17       	cp	r28, r29
 3d2:	c0 f3       	brcs	.-16     	; 0x3c4 <NRF24_Write_Buf+0x22>
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	82 bb       	out	0x12, r24	; 18
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <NRF24_FlushRX>:
 3e4:	82 b3       	in	r24, 0x12	; 18
 3e6:	8f 77       	andi	r24, 0x7F	; 127
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	82 ee       	ldi	r24, 0xE2	; 226
 3ec:	a2 d0       	rcall	.+324    	; 0x532 <spi_sendByte>
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <NRF24_FlushRX+0xc>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <NRF24_FlushRX+0x12>
 3f6:	82 b3       	in	r24, 0x12	; 18
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	82 bb       	out	0x12, r24	; 18
 3fc:	08 95       	ret

000003fe <NRF24_FlushTX>:
 3fe:	82 b3       	in	r24, 0x12	; 18
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	82 bb       	out	0x12, r24	; 18
 404:	81 ee       	ldi	r24, 0xE1	; 225
 406:	95 d0       	rcall	.+298    	; 0x532 <spi_sendByte>
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 410:	82 b3       	in	r24, 0x12	; 18
 412:	80 68       	ori	r24, 0x80	; 128
 414:	82 bb       	out	0x12, r24	; 18
 416:	08 95       	ret

00000418 <NRF24L01_RX_Mode>:
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	70 df       	rcall	.-288    	; 0x2fc <NRF24_ReadReg>
 41c:	68 2f       	mov	r22, r24
 41e:	63 60       	ori	r22, 0x03	; 3
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	7c df       	rcall	.-264    	; 0x31c <NRF24_WriteReg>
 424:	43 e0       	ldi	r20, 0x03	; 3
 426:	60 e6       	ldi	r22, 0x60	; 96
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	ba df       	rcall	.-140    	; 0x3a2 <NRF24_Write_Buf>
 42e:	43 e0       	ldi	r20, 0x03	; 3
 430:	60 e6       	ldi	r22, 0x60	; 96
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	b5 df       	rcall	.-150    	; 0x3a2 <NRF24_Write_Buf>
 438:	88 b3       	in	r24, 0x18	; 24
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	8b e2       	ldi	r24, 0x2B	; 43
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <NRF24L01_RX_Mode+0x2a>
 446:	00 c0       	rjmp	.+0      	; 0x448 <NRF24L01_RX_Mode+0x30>
 448:	00 00       	nop
 44a:	cc df       	rcall	.-104    	; 0x3e4 <NRF24_FlushRX>
 44c:	d8 df       	rcall	.-80     	; 0x3fe <NRF24_FlushTX>
 44e:	08 95       	ret

00000450 <NRF24_init>:
}

//------------------------------------------------
void NRF24_init(void)
{//инициализация
	CE_RESET;						//опускаем к земле вывод ce
 450:	88 b3       	in	r24, 0x18	; 24
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	88 bb       	out	0x18, r24	; 24
 456:	8f e0       	ldi	r24, 0x0F	; 15
 458:	97 e2       	ldi	r25, 0x27	; 39
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <NRF24_init+0xa>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__stack+0x1>
 460:	00 00       	nop
	_delay_us(5000);		//задержка 5 мс
	//записываем конфигурационный байт, 
	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 462:	6a e0       	ldi	r22, 0x0A	; 10
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	5a df       	rcall	.-332    	; 0x31c <NRF24_WriteReg>
 468:	8f e0       	ldi	r24, 0x0F	; 15
 46a:	97 e2       	ldi	r25, 0x27	; 39
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__stack+0x13>
 472:	00 00       	nop
	_delay_us(5000);
	NRF24_WriteReg(EN_AA, 0x01); // Enable Pipe0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	51 df       	rcall	.-350    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); // Enable Pipe0
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	4e df       	rcall	.-356    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); // Setup address width=3 bytes
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	4b df       	rcall	.-362    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 486:	6f e5       	ldi	r22, 0x5F	; 95
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	48 df       	rcall	.-368    	; 0x31c <NRF24_WriteReg>
	NRF24_ToggleFeatures();//активация команд
 48c:	55 df       	rcall	.-342    	; 0x338 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);//установка стандартных значений регистра FEATURE 
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8d e1       	ldi	r24, 0x1D	; 29
 492:	44 df       	rcall	.-376    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);//отключение динамического размера полезной нагрузки
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	8c e1       	ldi	r24, 0x1C	; 28
 498:	41 df       	rcall	.-382    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70); //Reset flags for IRQ
 49a:	60 e7       	ldi	r22, 0x70	; 112
 49c:	87 e0       	ldi	r24, 0x07	; 7
 49e:	3e df       	rcall	.-388    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); // частота 2476 MHz
 4a0:	6c e4       	ldi	r22, 0x4C	; 76
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	3b df       	rcall	.-394    	; 0x31c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	38 df       	rcall	.-400    	; 0x31c <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса передачи
 4ac:	43 e0       	ldi	r20, 0x03	; 3
 4ae:	63 e6       	ldi	r22, 0x63	; 99
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	80 e1       	ldi	r24, 0x10	; 16
 4b4:	76 df       	rcall	.-276    	; 0x3a2 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса приема
 4b6:	43 e0       	ldi	r20, 0x03	; 3
 4b8:	63 e6       	ldi	r22, 0x63	; 99
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	8b e0       	ldi	r24, 0x0B	; 11
 4be:	71 df       	rcall	.-286    	; 0x3a2 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 4c0:	65 e0       	ldi	r22, 0x05	; 5
 4c2:	81 e1       	ldi	r24, 0x11	; 17
 4c4:	2b df       	rcall	.-426    	; 0x31c <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();	//режим приема
 4c6:	a8 df       	rcall	.-176    	; 0x418 <NRF24L01_RX_Mode>
	LED_OFF;
 4c8:	82 b3       	in	r24, 0x12	; 18
 4ca:	8f 7b       	andi	r24, 0xBF	; 191
 4cc:	82 bb       	out	0x12, r24	; 18
 4ce:	08 95       	ret

000004d0 <IRQ_Callback>:
}
//--------------------------------------------------
void IRQ_Callback(void)
{
 4d0:	cf 93       	push	r28
 4d2:	8a e1       	ldi	r24, 0x1A	; 26
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <IRQ_Callback+0x4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <IRQ_Callback+0xa>
	uint8_t status=0x01;	//переменная статус
	_delay_us(10);
	status = NRF24_ReadReg(STATUS);	//чтение значения регистра статуса
 4da:	87 e0       	ldi	r24, 0x07	; 7
 4dc:	0f df       	rcall	.-482    	; 0x2fc <NRF24_ReadReg>
 4de:	c8 2f       	mov	r28, r24
	if(status & RX_DR)							//если есть данные на прием
 4e0:	86 ff       	sbrs	r24, 6
 4e2:	0b c0       	rjmp	.+22     	; 0x4fa <IRQ_Callback+0x2a>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);//чтение буфера
 4e4:	45 e0       	ldi	r20, 0x05	; 5
 4e6:	6d e2       	ldi	r22, 0x2D	; 45
 4e8:	71 e0       	ldi	r23, 0x01	; 1
 4ea:	81 e6       	ldi	r24, 0x61	; 97
 4ec:	34 df       	rcall	.-408    	; 0x356 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 4ee:	60 e4       	ldi	r22, 0x40	; 64
 4f0:	87 e0       	ldi	r24, 0x07	; 7
 4f2:	14 df       	rcall	.-472    	; 0x31c <NRF24_WriteReg>
		f_rx = 1;									//поднимаем флаг приема
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <f_rx>
	}
	if(status & TX_DS) //данные успешно отправлены
 4fa:	c5 ff       	sbrs	r28, 5
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <IRQ_Callback+0x3e>
	{
		NRF24_WriteReg(STATUS, 0x20);	//очистка всех битов кроме пятого
 4fe:	60 e2       	ldi	r22, 0x20	; 32
 500:	87 e0       	ldi	r24, 0x07	; 7
 502:	0c df       	rcall	.-488    	; 0x31c <NRF24_WriteReg>
		NRF24L01_RX_Mode();						//переход в режим приема
 504:	89 df       	rcall	.-238    	; 0x418 <NRF24L01_RX_Mode>
		f_tx = 1;									//поднимаем флаг передачи
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <f_tx>
 50c:	07 c0       	rjmp	.+14     	; 0x51c <IRQ_Callback+0x4c>
	}
	else if(status & MAX_RT)//превышение количества попыток отправки
 50e:	c4 ff       	sbrs	r28, 4
 510:	05 c0       	rjmp	.+10     	; 0x51c <IRQ_Callback+0x4c>
	{
		NRF24_WriteReg(STATUS, 0x10);//однуление всех остальных битов, кроме 4го
 512:	60 e1       	ldi	r22, 0x10	; 16
 514:	87 e0       	ldi	r24, 0x07	; 7
 516:	02 df       	rcall	.-508    	; 0x31c <NRF24_WriteReg>
		NRF24_FlushTX();			//очистка буфера отправки
 518:	72 df       	rcall	.-284    	; 0x3fe <NRF24_FlushTX>
		//Уходим в режим приёмника
		NRF24L01_RX_Mode();
 51a:	7e df       	rcall	.-260    	; 0x418 <NRF24L01_RX_Mode>
	}
}
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <spi_init>:
#include "spi.h"
#include "main.h"

void spi_init(void)
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //ножки SPI на выход
 520:	87 b3       	in	r24, 0x17	; 23
 522:	8c 62       	ori	r24, 0x2C	; 44
 524:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
 526:	88 b3       	in	r24, 0x18	; 24
 528:	83 7d       	andi	r24, 0xD3	; 211
 52a:	88 bb       	out	0x18, r24	; 24
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 52c:	80 e5       	ldi	r24, 0x50	; 80
 52e:	8d b9       	out	0x0d, r24	; 13
 530:	08 95       	ret

00000532 <spi_sendByte>:
}

void spi_sendByte(uint8_t byte)
{
	SPDR = byte;
 532:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутся
 534:	77 9b       	sbis	0x0e, 7	; 14
 536:	fe cf       	rjmp	.-4      	; 0x534 <spi_sendByte+0x2>
}
 538:	08 95       	ret

0000053a <spi_changeByte>:

uint8_t spi_changeByte(uint8_t byte)
{
	SPDR = byte;
 53a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//подождем пока данные передадутся (обменяются)
 53c:	77 9b       	sbis	0x0e, 7	; 14
 53e:	fe cf       	rjmp	.-4      	; 0x53c <spi_changeByte+0x2>
	return SPDR;
 540:	8f b1       	in	r24, 0x0f	; 15
 542:	08 95       	ret

00000544 <USART_Init>:
#include "main.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART
		UBRRH = (unsigned char)(ubrr>>8);
 544:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
 546:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
 548:	88 e1       	ldi	r24, 0x18	; 24
 54a:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
 54c:	8a b1       	in	r24, 0x0a	; 10
 54e:	80 68       	ori	r24, 0x80	; 128
 550:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
 552:	8b b1       	in	r24, 0x0b	; 11
 554:	82 60       	ori	r24, 0x02	; 2
 556:	8b b9       	out	0x0b, r24	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 558:	8e e8       	ldi	r24, 0x8E	; 142
 55a:	80 bd       	out	0x20, r24	; 32
 55c:	08 95       	ret

0000055e <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 55e:	5d 9b       	sbis	0x0b, 5	; 11
 560:	fe cf       	rjmp	.-4      	; 0x55e <USART_Transmit>
	UDR = data; //Начало передачи данных
 562:	8c b9       	out	0x0c, r24	; 12
 564:	08 95       	ret

00000566 <usart_println>:
}

void usart_println(char *str)
{
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++)
 570:	c0 e0       	ldi	r28, 0x00	; 0
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	06 c0       	rjmp	.+12     	; 0x582 <usart_println+0x1c>
	{
		USART_Transmit(str[i]); //Функция отправки данных
 576:	f8 01       	movw	r30, r16
 578:	ec 0f       	add	r30, r28
 57a:	fd 1f       	adc	r31, r29
 57c:	80 81       	ld	r24, Z
 57e:	ef df       	rcall	.-34     	; 0x55e <USART_Transmit>
	UDR = data; //Начало передачи данных
}

void usart_println(char *str)
{
	for (int i = 0; i < strlen(str); i++)
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	f8 01       	movw	r30, r16
 584:	01 90       	ld	r0, Z+
 586:	00 20       	and	r0, r0
 588:	e9 f7       	brne	.-6      	; 0x584 <usart_println+0x1e>
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	e0 1b       	sub	r30, r16
 58e:	f1 0b       	sbc	r31, r17
 590:	ce 17       	cp	r28, r30
 592:	df 07       	cpc	r29, r31
 594:	80 f3       	brcs	.-32     	; 0x576 <usart_println+0x10>
	{
		USART_Transmit(str[i]); //Функция отправки данных
	}
	USART_Transmit(0x0d);//переход в начало строки
 596:	8d e0       	ldi	r24, 0x0D	; 13
 598:	e2 df       	rcall	.-60     	; 0x55e <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
 59a:	8a e0       	ldi	r24, 0x0A	; 10
 59c:	e0 df       	rcall	.-64     	; 0x55e <USART_Transmit>
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <sprintf>:
 5a8:	ae e0       	ldi	r26, 0x0E	; 14
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e9 ed       	ldi	r30, 0xD9	; 217
 5ae:	f2 e0       	ldi	r31, 0x02	; 2
 5b0:	aa c2       	rjmp	.+1364   	; 0xb06 <__prologue_saves__+0x1c>
 5b2:	0d 89       	ldd	r16, Y+21	; 0x15
 5b4:	1e 89       	ldd	r17, Y+22	; 0x16
 5b6:	86 e0       	ldi	r24, 0x06	; 6
 5b8:	8c 83       	std	Y+4, r24	; 0x04
 5ba:	1a 83       	std	Y+2, r17	; 0x02
 5bc:	09 83       	std	Y+1, r16	; 0x01
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	9f e7       	ldi	r25, 0x7F	; 127
 5c2:	9e 83       	std	Y+6, r25	; 0x06
 5c4:	8d 83       	std	Y+5, r24	; 0x05
 5c6:	ae 01       	movw	r20, r28
 5c8:	47 5e       	subi	r20, 0xE7	; 231
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	6f 89       	ldd	r22, Y+23	; 0x17
 5ce:	78 8d       	ldd	r23, Y+24	; 0x18
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	08 d0       	rcall	.+16     	; 0x5e6 <vfprintf>
 5d6:	ef 81       	ldd	r30, Y+7	; 0x07
 5d8:	f8 85       	ldd	r31, Y+8	; 0x08
 5da:	e0 0f       	add	r30, r16
 5dc:	f1 1f       	adc	r31, r17
 5de:	10 82       	st	Z, r1
 5e0:	2e 96       	adiw	r28, 0x0e	; 14
 5e2:	e4 e0       	ldi	r30, 0x04	; 4
 5e4:	ac c2       	rjmp	.+1368   	; 0xb3e <__epilogue_restores__+0x1c>

000005e6 <vfprintf>:
 5e6:	ab e0       	ldi	r26, 0x0B	; 11
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e8 ef       	ldi	r30, 0xF8	; 248
 5ec:	f2 e0       	ldi	r31, 0x02	; 2
 5ee:	7d c2       	rjmp	.+1274   	; 0xaea <__prologue_saves__>
 5f0:	6c 01       	movw	r12, r24
 5f2:	7b 01       	movw	r14, r22
 5f4:	8a 01       	movw	r16, r20
 5f6:	fc 01       	movw	r30, r24
 5f8:	17 82       	std	Z+7, r1	; 0x07
 5fa:	16 82       	std	Z+6, r1	; 0x06
 5fc:	83 81       	ldd	r24, Z+3	; 0x03
 5fe:	81 ff       	sbrs	r24, 1
 600:	bf c1       	rjmp	.+894    	; 0x980 <vfprintf+0x39a>
 602:	ce 01       	movw	r24, r28
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	3c 01       	movw	r6, r24
 608:	f6 01       	movw	r30, r12
 60a:	93 81       	ldd	r25, Z+3	; 0x03
 60c:	f7 01       	movw	r30, r14
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	88 23       	and	r24, r24
 61a:	09 f4       	brne	.+2      	; 0x61e <vfprintf+0x38>
 61c:	ad c1       	rjmp	.+858    	; 0x978 <vfprintf+0x392>
 61e:	85 32       	cpi	r24, 0x25	; 37
 620:	39 f4       	brne	.+14     	; 0x630 <vfprintf+0x4a>
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	85 32       	cpi	r24, 0x25	; 37
 62e:	21 f4       	brne	.+8      	; 0x638 <vfprintf+0x52>
 630:	b6 01       	movw	r22, r12
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	c0 d1       	rcall	.+896    	; 0x9b6 <fputc>
 636:	e8 cf       	rjmp	.-48     	; 0x608 <vfprintf+0x22>
 638:	91 2c       	mov	r9, r1
 63a:	21 2c       	mov	r2, r1
 63c:	31 2c       	mov	r3, r1
 63e:	ff e1       	ldi	r31, 0x1F	; 31
 640:	f3 15       	cp	r31, r3
 642:	d8 f0       	brcs	.+54     	; 0x67a <vfprintf+0x94>
 644:	8b 32       	cpi	r24, 0x2B	; 43
 646:	79 f0       	breq	.+30     	; 0x666 <vfprintf+0x80>
 648:	38 f4       	brcc	.+14     	; 0x658 <vfprintf+0x72>
 64a:	80 32       	cpi	r24, 0x20	; 32
 64c:	79 f0       	breq	.+30     	; 0x66c <vfprintf+0x86>
 64e:	83 32       	cpi	r24, 0x23	; 35
 650:	a1 f4       	brne	.+40     	; 0x67a <vfprintf+0x94>
 652:	23 2d       	mov	r18, r3
 654:	20 61       	ori	r18, 0x10	; 16
 656:	1d c0       	rjmp	.+58     	; 0x692 <vfprintf+0xac>
 658:	8d 32       	cpi	r24, 0x2D	; 45
 65a:	61 f0       	breq	.+24     	; 0x674 <vfprintf+0x8e>
 65c:	80 33       	cpi	r24, 0x30	; 48
 65e:	69 f4       	brne	.+26     	; 0x67a <vfprintf+0x94>
 660:	23 2d       	mov	r18, r3
 662:	21 60       	ori	r18, 0x01	; 1
 664:	16 c0       	rjmp	.+44     	; 0x692 <vfprintf+0xac>
 666:	83 2d       	mov	r24, r3
 668:	82 60       	ori	r24, 0x02	; 2
 66a:	38 2e       	mov	r3, r24
 66c:	e3 2d       	mov	r30, r3
 66e:	e4 60       	ori	r30, 0x04	; 4
 670:	3e 2e       	mov	r3, r30
 672:	2a c0       	rjmp	.+84     	; 0x6c8 <vfprintf+0xe2>
 674:	f3 2d       	mov	r31, r3
 676:	f8 60       	ori	r31, 0x08	; 8
 678:	1d c0       	rjmp	.+58     	; 0x6b4 <vfprintf+0xce>
 67a:	37 fc       	sbrc	r3, 7
 67c:	2d c0       	rjmp	.+90     	; 0x6d8 <vfprintf+0xf2>
 67e:	20 ed       	ldi	r18, 0xD0	; 208
 680:	28 0f       	add	r18, r24
 682:	2a 30       	cpi	r18, 0x0A	; 10
 684:	40 f0       	brcs	.+16     	; 0x696 <vfprintf+0xb0>
 686:	8e 32       	cpi	r24, 0x2E	; 46
 688:	b9 f4       	brne	.+46     	; 0x6b8 <vfprintf+0xd2>
 68a:	36 fc       	sbrc	r3, 6
 68c:	75 c1       	rjmp	.+746    	; 0x978 <vfprintf+0x392>
 68e:	23 2d       	mov	r18, r3
 690:	20 64       	ori	r18, 0x40	; 64
 692:	32 2e       	mov	r3, r18
 694:	19 c0       	rjmp	.+50     	; 0x6c8 <vfprintf+0xe2>
 696:	36 fe       	sbrs	r3, 6
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <vfprintf+0xc0>
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	98 9e       	mul	r9, r24
 69e:	20 0d       	add	r18, r0
 6a0:	11 24       	eor	r1, r1
 6a2:	92 2e       	mov	r9, r18
 6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <vfprintf+0xe2>
 6a6:	ea e0       	ldi	r30, 0x0A	; 10
 6a8:	2e 9e       	mul	r2, r30
 6aa:	20 0d       	add	r18, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	22 2e       	mov	r2, r18
 6b0:	f3 2d       	mov	r31, r3
 6b2:	f0 62       	ori	r31, 0x20	; 32
 6b4:	3f 2e       	mov	r3, r31
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <vfprintf+0xe2>
 6b8:	8c 36       	cpi	r24, 0x6C	; 108
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <vfprintf+0xde>
 6bc:	83 2d       	mov	r24, r3
 6be:	80 68       	ori	r24, 0x80	; 128
 6c0:	38 2e       	mov	r3, r24
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0xe2>
 6c4:	88 36       	cpi	r24, 0x68	; 104
 6c6:	41 f4       	brne	.+16     	; 0x6d8 <vfprintf+0xf2>
 6c8:	f7 01       	movw	r30, r14
 6ca:	93 fd       	sbrc	r25, 3
 6cc:	85 91       	lpm	r24, Z+
 6ce:	93 ff       	sbrs	r25, 3
 6d0:	81 91       	ld	r24, Z+
 6d2:	7f 01       	movw	r14, r30
 6d4:	81 11       	cpse	r24, r1
 6d6:	b3 cf       	rjmp	.-154    	; 0x63e <vfprintf+0x58>
 6d8:	98 2f       	mov	r25, r24
 6da:	9f 7d       	andi	r25, 0xDF	; 223
 6dc:	95 54       	subi	r25, 0x45	; 69
 6de:	93 30       	cpi	r25, 0x03	; 3
 6e0:	28 f4       	brcc	.+10     	; 0x6ec <vfprintf+0x106>
 6e2:	0c 5f       	subi	r16, 0xFC	; 252
 6e4:	1f 4f       	sbci	r17, 0xFF	; 255
 6e6:	9f e3       	ldi	r25, 0x3F	; 63
 6e8:	99 83       	std	Y+1, r25	; 0x01
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <vfprintf+0x120>
 6ec:	83 36       	cpi	r24, 0x63	; 99
 6ee:	31 f0       	breq	.+12     	; 0x6fc <vfprintf+0x116>
 6f0:	83 37       	cpi	r24, 0x73	; 115
 6f2:	71 f0       	breq	.+28     	; 0x710 <vfprintf+0x12a>
 6f4:	83 35       	cpi	r24, 0x53	; 83
 6f6:	09 f0       	breq	.+2      	; 0x6fa <vfprintf+0x114>
 6f8:	55 c0       	rjmp	.+170    	; 0x7a4 <vfprintf+0x1be>
 6fa:	20 c0       	rjmp	.+64     	; 0x73c <vfprintf+0x156>
 6fc:	f8 01       	movw	r30, r16
 6fe:	80 81       	ld	r24, Z
 700:	89 83       	std	Y+1, r24	; 0x01
 702:	0e 5f       	subi	r16, 0xFE	; 254
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	88 24       	eor	r8, r8
 708:	83 94       	inc	r8
 70a:	91 2c       	mov	r9, r1
 70c:	53 01       	movw	r10, r6
 70e:	12 c0       	rjmp	.+36     	; 0x734 <vfprintf+0x14e>
 710:	28 01       	movw	r4, r16
 712:	f2 e0       	ldi	r31, 0x02	; 2
 714:	4f 0e       	add	r4, r31
 716:	51 1c       	adc	r5, r1
 718:	f8 01       	movw	r30, r16
 71a:	a0 80       	ld	r10, Z
 71c:	b1 80       	ldd	r11, Z+1	; 0x01
 71e:	36 fe       	sbrs	r3, 6
 720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x142>
 722:	69 2d       	mov	r22, r9
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x146>
 728:	6f ef       	ldi	r22, 0xFF	; 255
 72a:	7f ef       	ldi	r23, 0xFF	; 255
 72c:	c5 01       	movw	r24, r10
 72e:	38 d1       	rcall	.+624    	; 0x9a0 <strnlen>
 730:	4c 01       	movw	r8, r24
 732:	82 01       	movw	r16, r4
 734:	f3 2d       	mov	r31, r3
 736:	ff 77       	andi	r31, 0x7F	; 127
 738:	3f 2e       	mov	r3, r31
 73a:	15 c0       	rjmp	.+42     	; 0x766 <vfprintf+0x180>
 73c:	28 01       	movw	r4, r16
 73e:	22 e0       	ldi	r18, 0x02	; 2
 740:	42 0e       	add	r4, r18
 742:	51 1c       	adc	r5, r1
 744:	f8 01       	movw	r30, r16
 746:	a0 80       	ld	r10, Z
 748:	b1 80       	ldd	r11, Z+1	; 0x01
 74a:	36 fe       	sbrs	r3, 6
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x16e>
 74e:	69 2d       	mov	r22, r9
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x172>
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	7f ef       	ldi	r23, 0xFF	; 255
 758:	c5 01       	movw	r24, r10
 75a:	17 d1       	rcall	.+558    	; 0x98a <strnlen_P>
 75c:	4c 01       	movw	r8, r24
 75e:	f3 2d       	mov	r31, r3
 760:	f0 68       	ori	r31, 0x80	; 128
 762:	3f 2e       	mov	r3, r31
 764:	82 01       	movw	r16, r4
 766:	33 fc       	sbrc	r3, 3
 768:	19 c0       	rjmp	.+50     	; 0x79c <vfprintf+0x1b6>
 76a:	82 2d       	mov	r24, r2
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	88 16       	cp	r8, r24
 770:	99 06       	cpc	r9, r25
 772:	a0 f4       	brcc	.+40     	; 0x79c <vfprintf+0x1b6>
 774:	b6 01       	movw	r22, r12
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	1d d1       	rcall	.+570    	; 0x9b6 <fputc>
 77c:	2a 94       	dec	r2
 77e:	f5 cf       	rjmp	.-22     	; 0x76a <vfprintf+0x184>
 780:	f5 01       	movw	r30, r10
 782:	37 fc       	sbrc	r3, 7
 784:	85 91       	lpm	r24, Z+
 786:	37 fe       	sbrs	r3, 7
 788:	81 91       	ld	r24, Z+
 78a:	5f 01       	movw	r10, r30
 78c:	b6 01       	movw	r22, r12
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	12 d1       	rcall	.+548    	; 0x9b6 <fputc>
 792:	21 10       	cpse	r2, r1
 794:	2a 94       	dec	r2
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	82 1a       	sub	r8, r18
 79a:	91 08       	sbc	r9, r1
 79c:	81 14       	cp	r8, r1
 79e:	91 04       	cpc	r9, r1
 7a0:	79 f7       	brne	.-34     	; 0x780 <vfprintf+0x19a>
 7a2:	e1 c0       	rjmp	.+450    	; 0x966 <vfprintf+0x380>
 7a4:	84 36       	cpi	r24, 0x64	; 100
 7a6:	11 f0       	breq	.+4      	; 0x7ac <vfprintf+0x1c6>
 7a8:	89 36       	cpi	r24, 0x69	; 105
 7aa:	39 f5       	brne	.+78     	; 0x7fa <vfprintf+0x214>
 7ac:	f8 01       	movw	r30, r16
 7ae:	37 fe       	sbrs	r3, 7
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <vfprintf+0x1da>
 7b2:	60 81       	ld	r22, Z
 7b4:	71 81       	ldd	r23, Z+1	; 0x01
 7b6:	82 81       	ldd	r24, Z+2	; 0x02
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	0c 5f       	subi	r16, 0xFC	; 252
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <vfprintf+0x1ea>
 7c0:	60 81       	ld	r22, Z
 7c2:	71 81       	ldd	r23, Z+1	; 0x01
 7c4:	07 2e       	mov	r0, r23
 7c6:	00 0c       	add	r0, r0
 7c8:	88 0b       	sbc	r24, r24
 7ca:	99 0b       	sbc	r25, r25
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	f3 2d       	mov	r31, r3
 7d2:	ff 76       	andi	r31, 0x6F	; 111
 7d4:	3f 2e       	mov	r3, r31
 7d6:	97 ff       	sbrs	r25, 7
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <vfprintf+0x206>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	f0 68       	ori	r31, 0x80	; 128
 7ea:	3f 2e       	mov	r3, r31
 7ec:	2a e0       	ldi	r18, 0x0A	; 10
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	a3 01       	movw	r20, r6
 7f2:	1d d1       	rcall	.+570    	; 0xa2e <__ultoa_invert>
 7f4:	88 2e       	mov	r8, r24
 7f6:	86 18       	sub	r8, r6
 7f8:	44 c0       	rjmp	.+136    	; 0x882 <vfprintf+0x29c>
 7fa:	85 37       	cpi	r24, 0x75	; 117
 7fc:	31 f4       	brne	.+12     	; 0x80a <vfprintf+0x224>
 7fe:	23 2d       	mov	r18, r3
 800:	2f 7e       	andi	r18, 0xEF	; 239
 802:	b2 2e       	mov	r11, r18
 804:	2a e0       	ldi	r18, 0x0A	; 10
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	25 c0       	rjmp	.+74     	; 0x854 <vfprintf+0x26e>
 80a:	93 2d       	mov	r25, r3
 80c:	99 7f       	andi	r25, 0xF9	; 249
 80e:	b9 2e       	mov	r11, r25
 810:	8f 36       	cpi	r24, 0x6F	; 111
 812:	c1 f0       	breq	.+48     	; 0x844 <vfprintf+0x25e>
 814:	18 f4       	brcc	.+6      	; 0x81c <vfprintf+0x236>
 816:	88 35       	cpi	r24, 0x58	; 88
 818:	79 f0       	breq	.+30     	; 0x838 <vfprintf+0x252>
 81a:	ae c0       	rjmp	.+348    	; 0x978 <vfprintf+0x392>
 81c:	80 37       	cpi	r24, 0x70	; 112
 81e:	19 f0       	breq	.+6      	; 0x826 <vfprintf+0x240>
 820:	88 37       	cpi	r24, 0x78	; 120
 822:	21 f0       	breq	.+8      	; 0x82c <vfprintf+0x246>
 824:	a9 c0       	rjmp	.+338    	; 0x978 <vfprintf+0x392>
 826:	e9 2f       	mov	r30, r25
 828:	e0 61       	ori	r30, 0x10	; 16
 82a:	be 2e       	mov	r11, r30
 82c:	b4 fe       	sbrs	r11, 4
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x264>
 830:	fb 2d       	mov	r31, r11
 832:	f4 60       	ori	r31, 0x04	; 4
 834:	bf 2e       	mov	r11, r31
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x264>
 838:	34 fe       	sbrs	r3, 4
 83a:	0a c0       	rjmp	.+20     	; 0x850 <vfprintf+0x26a>
 83c:	29 2f       	mov	r18, r25
 83e:	26 60       	ori	r18, 0x06	; 6
 840:	b2 2e       	mov	r11, r18
 842:	06 c0       	rjmp	.+12     	; 0x850 <vfprintf+0x26a>
 844:	28 e0       	ldi	r18, 0x08	; 8
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	05 c0       	rjmp	.+10     	; 0x854 <vfprintf+0x26e>
 84a:	20 e1       	ldi	r18, 0x10	; 16
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <vfprintf+0x26e>
 850:	20 e1       	ldi	r18, 0x10	; 16
 852:	32 e0       	ldi	r19, 0x02	; 2
 854:	f8 01       	movw	r30, r16
 856:	b7 fe       	sbrs	r11, 7
 858:	07 c0       	rjmp	.+14     	; 0x868 <vfprintf+0x282>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	0c 5f       	subi	r16, 0xFC	; 252
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x28e>
 868:	60 81       	ld	r22, Z
 86a:	71 81       	ldd	r23, Z+1	; 0x01
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	a3 01       	movw	r20, r6
 876:	db d0       	rcall	.+438    	; 0xa2e <__ultoa_invert>
 878:	88 2e       	mov	r8, r24
 87a:	86 18       	sub	r8, r6
 87c:	fb 2d       	mov	r31, r11
 87e:	ff 77       	andi	r31, 0x7F	; 127
 880:	3f 2e       	mov	r3, r31
 882:	36 fe       	sbrs	r3, 6
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x2ba>
 886:	23 2d       	mov	r18, r3
 888:	2e 7f       	andi	r18, 0xFE	; 254
 88a:	a2 2e       	mov	r10, r18
 88c:	89 14       	cp	r8, r9
 88e:	58 f4       	brcc	.+22     	; 0x8a6 <vfprintf+0x2c0>
 890:	34 fe       	sbrs	r3, 4
 892:	0b c0       	rjmp	.+22     	; 0x8aa <vfprintf+0x2c4>
 894:	32 fc       	sbrc	r3, 2
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x2c4>
 898:	83 2d       	mov	r24, r3
 89a:	8e 7e       	andi	r24, 0xEE	; 238
 89c:	a8 2e       	mov	r10, r24
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x2c4>
 8a0:	b8 2c       	mov	r11, r8
 8a2:	a3 2c       	mov	r10, r3
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <vfprintf+0x2c6>
 8a6:	b8 2c       	mov	r11, r8
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <vfprintf+0x2c6>
 8aa:	b9 2c       	mov	r11, r9
 8ac:	a4 fe       	sbrs	r10, 4
 8ae:	0f c0       	rjmp	.+30     	; 0x8ce <vfprintf+0x2e8>
 8b0:	fe 01       	movw	r30, r28
 8b2:	e8 0d       	add	r30, r8
 8b4:	f1 1d       	adc	r31, r1
 8b6:	80 81       	ld	r24, Z
 8b8:	80 33       	cpi	r24, 0x30	; 48
 8ba:	21 f4       	brne	.+8      	; 0x8c4 <vfprintf+0x2de>
 8bc:	9a 2d       	mov	r25, r10
 8be:	99 7e       	andi	r25, 0xE9	; 233
 8c0:	a9 2e       	mov	r10, r25
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x2f0>
 8c4:	a2 fe       	sbrs	r10, 2
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <vfprintf+0x2ee>
 8c8:	b3 94       	inc	r11
 8ca:	b3 94       	inc	r11
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <vfprintf+0x2f0>
 8ce:	8a 2d       	mov	r24, r10
 8d0:	86 78       	andi	r24, 0x86	; 134
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <vfprintf+0x2f0>
 8d4:	b3 94       	inc	r11
 8d6:	a3 fc       	sbrc	r10, 3
 8d8:	10 c0       	rjmp	.+32     	; 0x8fa <vfprintf+0x314>
 8da:	a0 fe       	sbrs	r10, 0
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0x304>
 8de:	b2 14       	cp	r11, r2
 8e0:	80 f4       	brcc	.+32     	; 0x902 <vfprintf+0x31c>
 8e2:	28 0c       	add	r2, r8
 8e4:	92 2c       	mov	r9, r2
 8e6:	9b 18       	sub	r9, r11
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <vfprintf+0x31e>
 8ea:	b2 14       	cp	r11, r2
 8ec:	58 f4       	brcc	.+22     	; 0x904 <vfprintf+0x31e>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	60 d0       	rcall	.+192    	; 0x9b6 <fputc>
 8f6:	b3 94       	inc	r11
 8f8:	f8 cf       	rjmp	.-16     	; 0x8ea <vfprintf+0x304>
 8fa:	b2 14       	cp	r11, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <vfprintf+0x31e>
 8fe:	2b 18       	sub	r2, r11
 900:	02 c0       	rjmp	.+4      	; 0x906 <vfprintf+0x320>
 902:	98 2c       	mov	r9, r8
 904:	21 2c       	mov	r2, r1
 906:	a4 fe       	sbrs	r10, 4
 908:	0f c0       	rjmp	.+30     	; 0x928 <vfprintf+0x342>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	52 d0       	rcall	.+164    	; 0x9b6 <fputc>
 912:	a2 fe       	sbrs	r10, 2
 914:	16 c0       	rjmp	.+44     	; 0x942 <vfprintf+0x35c>
 916:	a1 fc       	sbrc	r10, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <vfprintf+0x33a>
 91a:	88 e7       	ldi	r24, 0x78	; 120
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x33e>
 920:	88 e5       	ldi	r24, 0x58	; 88
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b6 01       	movw	r22, r12
 926:	0c c0       	rjmp	.+24     	; 0x940 <vfprintf+0x35a>
 928:	8a 2d       	mov	r24, r10
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	51 f0       	breq	.+20     	; 0x942 <vfprintf+0x35c>
 92e:	a1 fe       	sbrs	r10, 1
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x350>
 932:	8b e2       	ldi	r24, 0x2B	; 43
 934:	01 c0       	rjmp	.+2      	; 0x938 <vfprintf+0x352>
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	a7 fc       	sbrc	r10, 7
 93a:	8d e2       	ldi	r24, 0x2D	; 45
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	3a d0       	rcall	.+116    	; 0x9b6 <fputc>
 942:	89 14       	cp	r8, r9
 944:	30 f4       	brcc	.+12     	; 0x952 <vfprintf+0x36c>
 946:	b6 01       	movw	r22, r12
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	34 d0       	rcall	.+104    	; 0x9b6 <fputc>
 94e:	9a 94       	dec	r9
 950:	f8 cf       	rjmp	.-16     	; 0x942 <vfprintf+0x35c>
 952:	8a 94       	dec	r8
 954:	f3 01       	movw	r30, r6
 956:	e8 0d       	add	r30, r8
 958:	f1 1d       	adc	r31, r1
 95a:	80 81       	ld	r24, Z
 95c:	b6 01       	movw	r22, r12
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	2a d0       	rcall	.+84     	; 0x9b6 <fputc>
 962:	81 10       	cpse	r8, r1
 964:	f6 cf       	rjmp	.-20     	; 0x952 <vfprintf+0x36c>
 966:	22 20       	and	r2, r2
 968:	09 f4       	brne	.+2      	; 0x96c <vfprintf+0x386>
 96a:	4e ce       	rjmp	.-868    	; 0x608 <vfprintf+0x22>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	21 d0       	rcall	.+66     	; 0x9b6 <fputc>
 974:	2a 94       	dec	r2
 976:	f7 cf       	rjmp	.-18     	; 0x966 <vfprintf+0x380>
 978:	f6 01       	movw	r30, r12
 97a:	86 81       	ldd	r24, Z+6	; 0x06
 97c:	97 81       	ldd	r25, Z+7	; 0x07
 97e:	02 c0       	rjmp	.+4      	; 0x984 <vfprintf+0x39e>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	2b 96       	adiw	r28, 0x0b	; 11
 986:	e2 e1       	ldi	r30, 0x12	; 18
 988:	cc c0       	rjmp	.+408    	; 0xb22 <__epilogue_restores__>

0000098a <strnlen_P>:
 98a:	fc 01       	movw	r30, r24
 98c:	05 90       	lpm	r0, Z+
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	01 10       	cpse	r0, r1
 994:	d8 f7       	brcc	.-10     	; 0x98c <strnlen_P+0x2>
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	8e 0f       	add	r24, r30
 99c:	9f 1f       	adc	r25, r31
 99e:	08 95       	ret

000009a0 <strnlen>:
 9a0:	fc 01       	movw	r30, r24
 9a2:	61 50       	subi	r22, 0x01	; 1
 9a4:	70 40       	sbci	r23, 0x00	; 0
 9a6:	01 90       	ld	r0, Z+
 9a8:	01 10       	cpse	r0, r1
 9aa:	d8 f7       	brcc	.-10     	; 0x9a2 <strnlen+0x2>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	8e 0f       	add	r24, r30
 9b2:	9f 1f       	adc	r25, r31
 9b4:	08 95       	ret

000009b6 <fputc>:
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	fb 01       	movw	r30, r22
 9c0:	23 81       	ldd	r18, Z+3	; 0x03
 9c2:	21 fd       	sbrc	r18, 1
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <fputc+0x16>
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	2c c0       	rjmp	.+88     	; 0xa24 <fputc+0x6e>
 9cc:	22 ff       	sbrs	r18, 2
 9ce:	16 c0       	rjmp	.+44     	; 0x9fc <fputc+0x46>
 9d0:	46 81       	ldd	r20, Z+6	; 0x06
 9d2:	57 81       	ldd	r21, Z+7	; 0x07
 9d4:	24 81       	ldd	r18, Z+4	; 0x04
 9d6:	35 81       	ldd	r19, Z+5	; 0x05
 9d8:	42 17       	cp	r20, r18
 9da:	53 07       	cpc	r21, r19
 9dc:	44 f4       	brge	.+16     	; 0x9ee <fputc+0x38>
 9de:	a0 81       	ld	r26, Z
 9e0:	b1 81       	ldd	r27, Z+1	; 0x01
 9e2:	9d 01       	movw	r18, r26
 9e4:	2f 5f       	subi	r18, 0xFF	; 255
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	31 83       	std	Z+1, r19	; 0x01
 9ea:	20 83       	st	Z, r18
 9ec:	8c 93       	st	X, r24
 9ee:	26 81       	ldd	r18, Z+6	; 0x06
 9f0:	37 81       	ldd	r19, Z+7	; 0x07
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	3f 4f       	sbci	r19, 0xFF	; 255
 9f6:	37 83       	std	Z+7, r19	; 0x07
 9f8:	26 83       	std	Z+6, r18	; 0x06
 9fa:	14 c0       	rjmp	.+40     	; 0xa24 <fputc+0x6e>
 9fc:	8b 01       	movw	r16, r22
 9fe:	ec 01       	movw	r28, r24
 a00:	fb 01       	movw	r30, r22
 a02:	00 84       	ldd	r0, Z+8	; 0x08
 a04:	f1 85       	ldd	r31, Z+9	; 0x09
 a06:	e0 2d       	mov	r30, r0
 a08:	09 95       	icall
 a0a:	89 2b       	or	r24, r25
 a0c:	e1 f6       	brne	.-72     	; 0x9c6 <fputc+0x10>
 a0e:	d8 01       	movw	r26, r16
 a10:	16 96       	adiw	r26, 0x06	; 6
 a12:	8d 91       	ld	r24, X+
 a14:	9c 91       	ld	r25, X
 a16:	17 97       	sbiw	r26, 0x07	; 7
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	9c 93       	st	X, r25
 a1e:	8e 93       	st	-X, r24
 a20:	16 97       	sbiw	r26, 0x06	; 6
 a22:	ce 01       	movw	r24, r28
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <__ultoa_invert>:
 a2e:	fa 01       	movw	r30, r20
 a30:	aa 27       	eor	r26, r26
 a32:	28 30       	cpi	r18, 0x08	; 8
 a34:	51 f1       	breq	.+84     	; 0xa8a <__ultoa_invert+0x5c>
 a36:	20 31       	cpi	r18, 0x10	; 16
 a38:	81 f1       	breq	.+96     	; 0xa9a <__ultoa_invert+0x6c>
 a3a:	e8 94       	clt
 a3c:	6f 93       	push	r22
 a3e:	6e 7f       	andi	r22, 0xFE	; 254
 a40:	6e 5f       	subi	r22, 0xFE	; 254
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	af 4f       	sbci	r26, 0xFF	; 255
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	3e d0       	rcall	.+124    	; 0xaca <__ultoa_invert+0x9c>
 a4e:	b4 e0       	ldi	r27, 0x04	; 4
 a50:	3c d0       	rcall	.+120    	; 0xaca <__ultoa_invert+0x9c>
 a52:	67 0f       	add	r22, r23
 a54:	78 1f       	adc	r23, r24
 a56:	89 1f       	adc	r24, r25
 a58:	9a 1f       	adc	r25, r26
 a5a:	a1 1d       	adc	r26, r1
 a5c:	68 0f       	add	r22, r24
 a5e:	79 1f       	adc	r23, r25
 a60:	8a 1f       	adc	r24, r26
 a62:	91 1d       	adc	r25, r1
 a64:	a1 1d       	adc	r26, r1
 a66:	6a 0f       	add	r22, r26
 a68:	71 1d       	adc	r23, r1
 a6a:	81 1d       	adc	r24, r1
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	20 d0       	rcall	.+64     	; 0xab2 <__ultoa_invert+0x84>
 a72:	09 f4       	brne	.+2      	; 0xa76 <__ultoa_invert+0x48>
 a74:	68 94       	set
 a76:	3f 91       	pop	r19
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	26 9f       	mul	r18, r22
 a7c:	11 24       	eor	r1, r1
 a7e:	30 19       	sub	r19, r0
 a80:	30 5d       	subi	r19, 0xD0	; 208
 a82:	31 93       	st	Z+, r19
 a84:	de f6       	brtc	.-74     	; 0xa3c <__ultoa_invert+0xe>
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret
 a8a:	46 2f       	mov	r20, r22
 a8c:	47 70       	andi	r20, 0x07	; 7
 a8e:	40 5d       	subi	r20, 0xD0	; 208
 a90:	41 93       	st	Z+, r20
 a92:	b3 e0       	ldi	r27, 0x03	; 3
 a94:	0f d0       	rcall	.+30     	; 0xab4 <__ultoa_invert+0x86>
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__ultoa_invert+0x5c>
 a98:	f6 cf       	rjmp	.-20     	; 0xa86 <__ultoa_invert+0x58>
 a9a:	46 2f       	mov	r20, r22
 a9c:	4f 70       	andi	r20, 0x0F	; 15
 a9e:	40 5d       	subi	r20, 0xD0	; 208
 aa0:	4a 33       	cpi	r20, 0x3A	; 58
 aa2:	18 f0       	brcs	.+6      	; 0xaaa <__ultoa_invert+0x7c>
 aa4:	49 5d       	subi	r20, 0xD9	; 217
 aa6:	31 fd       	sbrc	r19, 1
 aa8:	40 52       	subi	r20, 0x20	; 32
 aaa:	41 93       	st	Z+, r20
 aac:	02 d0       	rcall	.+4      	; 0xab2 <__ultoa_invert+0x84>
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__ultoa_invert+0x6c>
 ab0:	ea cf       	rjmp	.-44     	; 0xa86 <__ultoa_invert+0x58>
 ab2:	b4 e0       	ldi	r27, 0x04	; 4
 ab4:	a6 95       	lsr	r26
 ab6:	97 95       	ror	r25
 ab8:	87 95       	ror	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	ba 95       	dec	r27
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__ultoa_invert+0x86>
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	61 05       	cpc	r22, r1
 ac6:	71 05       	cpc	r23, r1
 ac8:	08 95       	ret
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	0a 2e       	mov	r0, r26
 ad0:	06 94       	lsr	r0
 ad2:	57 95       	ror	r21
 ad4:	47 95       	ror	r20
 ad6:	37 95       	ror	r19
 ad8:	27 95       	ror	r18
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__ultoa_invert+0xa2>
 ade:	62 0f       	add	r22, r18
 ae0:	73 1f       	adc	r23, r19
 ae2:	84 1f       	adc	r24, r20
 ae4:	95 1f       	adc	r25, r21
 ae6:	a0 1d       	adc	r26, r0
 ae8:	08 95       	ret

00000aea <__prologue_saves__>:
 aea:	2f 92       	push	r2
 aec:	3f 92       	push	r3
 aee:	4f 92       	push	r4
 af0:	5f 92       	push	r5
 af2:	6f 92       	push	r6
 af4:	7f 92       	push	r7
 af6:	8f 92       	push	r8
 af8:	9f 92       	push	r9
 afa:	af 92       	push	r10
 afc:	bf 92       	push	r11
 afe:	cf 92       	push	r12
 b00:	df 92       	push	r13
 b02:	ef 92       	push	r14
 b04:	ff 92       	push	r15
 b06:	0f 93       	push	r16
 b08:	1f 93       	push	r17
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
 b12:	ca 1b       	sub	r28, r26
 b14:	db 0b       	sbc	r29, r27
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	de bf       	out	0x3e, r29	; 62
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	cd bf       	out	0x3d, r28	; 61
 b20:	09 94       	ijmp

00000b22 <__epilogue_restores__>:
 b22:	2a 88       	ldd	r2, Y+18	; 0x12
 b24:	39 88       	ldd	r3, Y+17	; 0x11
 b26:	48 88       	ldd	r4, Y+16	; 0x10
 b28:	5f 84       	ldd	r5, Y+15	; 0x0f
 b2a:	6e 84       	ldd	r6, Y+14	; 0x0e
 b2c:	7d 84       	ldd	r7, Y+13	; 0x0d
 b2e:	8c 84       	ldd	r8, Y+12	; 0x0c
 b30:	9b 84       	ldd	r9, Y+11	; 0x0b
 b32:	aa 84       	ldd	r10, Y+10	; 0x0a
 b34:	b9 84       	ldd	r11, Y+9	; 0x09
 b36:	c8 84       	ldd	r12, Y+8	; 0x08
 b38:	df 80       	ldd	r13, Y+7	; 0x07
 b3a:	ee 80       	ldd	r14, Y+6	; 0x06
 b3c:	fd 80       	ldd	r15, Y+5	; 0x05
 b3e:	0c 81       	ldd	r16, Y+4	; 0x04
 b40:	1b 81       	ldd	r17, Y+3	; 0x03
 b42:	aa 81       	ldd	r26, Y+2	; 0x02
 b44:	b9 81       	ldd	r27, Y+1	; 0x01
 b46:	ce 0f       	add	r28, r30
 b48:	d1 1d       	adc	r29, r1
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
 b54:	ed 01       	movw	r28, r26
 b56:	08 95       	ret

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
