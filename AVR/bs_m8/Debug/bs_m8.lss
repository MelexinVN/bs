
bs_m8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  0080006c  0080006c  00000796  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a9  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099d  00000000  00000000  00001ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfb  00000000  00000000  0000299a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000caa  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	6f c0       	rjmp	.+222    	; 0xe2 <__vector_1>
   4:	91 c0       	rjmp	.+290    	; 0x128 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	b6 c0       	rjmp	.+364    	; 0x17a <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	5b c0       	rjmp	.+182    	; 0xce <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ef       	ldi	r30, 0xF6	; 246
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3b       	cpi	r26, 0xB9	; 185
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	da d0       	rcall	.+436    	; 0x20e <main>
  5a:	4b c3       	rjmp	.+1686   	; 0x6f2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
void port_init(void)//Инициализация портов 
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	87 bb       	out	0x17, r24	; 23
	// State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	88 bb       	out	0x18, r24	; 24

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  66:	14 ba       	out	0x14, r1	; 20
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  68:	15 ba       	out	0x15, r1	; 21

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  6a:	80 ec       	ldi	r24, 0xC0	; 192
  6c:	81 bb       	out	0x11, r24	; 17
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=P Bit2=T Bit1=T Bit0=T
	PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  6e:	88 e8       	ldi	r24, 0x88	; 136
  70:	82 bb       	out	0x12, r24	; 18
  72:	08 95       	ret

00000074 <timer_init>:
	// Timer Period: 1 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  74:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
  76:	8b e0       	ldi	r24, 0x0B	; 11
  78:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  7a:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  7c:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  7e:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
  80:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
  82:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x7C;
  84:	8c e7       	ldi	r24, 0x7C	; 124
  86:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
  88:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  8a:	18 bc       	out	0x28, r1	; 40
  8c:	08 95       	ret

0000008e <adc_init>:
void adc_init(void)
{
	// ADC initialization
	// ADC Clock frequency: 62,500 kHz
	// ADC Voltage Reference: AVCC pin
	ADMUX=ADC_VREF_TYPE;
  8e:	80 ee       	ldi	r24, 0xE0	; 224
  90:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
	SFIOR=(0<<ACME);
  96:	10 be       	out	0x30, r1	; 48
  98:	08 95       	ret

0000009a <interrupt_init>:
	// External Interrupt(s) initialization
	// INT0: On
	// INT0 Mode: Falling Edge
	// INT1: On
	// INT1 Mode: Falling Edge
	GICR|=(1<<INT1) | (1<<INT0);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 6c       	ori	r24, 0xC0	; 192
  9e:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	85 bf       	out	0x35, r24	; 53
	GIFR=(1<<INTF1) | (1<<INTF0);
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	8a bf       	out	0x3a, r24	; 58
	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	89 bf       	out	0x39, r24	; 57
  ac:	08 95       	ret

000000ae <read_adc>:

// Read the 8 most significant bits
// of the AD conversion result
unsigned char read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8a e1       	ldi	r24, 0x1A	; 26
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <read_adc+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <read_adc+0xc>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=(1<<ADSC);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1<<ADIF))==0);
  c0:	34 9b       	sbis	0x06, 4	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <read_adc+0x12>
	ADCSRA|=(1<<ADIF);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	86 b9       	out	0x06, r24	; 6
	return ADCH;
  ca:	85 b1       	in	r24, 0x05	; 5
}
  cc:	08 95       	ret

000000ce <__vector_11>:

ISR(USART_RXC_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
	
}
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_1>:

ISR(INT0_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	IRQ_Callback();
 104:	68 d2       	rcall	.+1232   	; 0x5d6 <IRQ_Callback>
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_2>:

ISR(INT1_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
	if(!f_pushed)							//если опущен флаг нажатия
 13a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <f_pushed>
 13e:	81 11       	cpse	r24, r1
 140:	13 c0       	rjmp	.+38     	; 0x168 <__vector_2+0x40>
	{
		f_pushed = 1;						//поднимаем флаг нажатия
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <f_pushed>
		time_ms = miliseconds;				//сохраняем количество мс
 148:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <miliseconds>
 14c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <miliseconds+0x1>
 150:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <miliseconds+0x2>
 154:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <miliseconds+0x3>
 158:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_ms>
 15c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <time_ms+0x1>
 160:	a0 93 70 00 	sts	0x0070, r26	; 0x800070 <time_ms+0x2>
 164:	b0 93 71 00 	sts	0x0071, r27	; 0x800071 <time_ms+0x3>
	}
}
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	miliseconds++;							//считаем мс
 19c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <miliseconds>
 1a0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <miliseconds+0x1>
 1a4:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <miliseconds+0x2>
 1a8:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <miliseconds+0x3>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	a1 1d       	adc	r26, r1
 1b0:	b1 1d       	adc	r27, r1
 1b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <miliseconds>
 1b6:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <miliseconds+0x1>
 1ba:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <miliseconds+0x2>
 1be:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <miliseconds+0x3>
	if (!(miliseconds % 100)) 
 1c2:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <miliseconds>
 1c6:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <miliseconds+0x1>
 1ca:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <miliseconds+0x2>
 1ce:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <miliseconds+0x3>
 1d2:	24 e6       	ldi	r18, 0x64	; 100
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	69 d2       	rcall	.+1234   	; 0x6ae <__udivmodsi4>
 1dc:	67 2b       	or	r22, r23
 1de:	68 2b       	or	r22, r24
 1e0:	69 2b       	or	r22, r25
 1e2:	21 f4       	brne	.+8      	; 0x1ec <__vector_6+0x72>
	{
		adc_res = read_adc(6);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	63 df       	rcall	.-314    	; 0xae <read_adc>
 1e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		/* для расчета процентов заряда для LiPo аккумуляторов
		if (adc_res >= 170) adc_res = (adc_res - 170)*100/40 //расчет в процентах для LiPo
		else adc_res = 0;
		*/
	}
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <main>:

int main(void)
{
	interrupt_init();						//инициализация прерываний
 20e:	45 df       	rcall	.-374    	; 0x9a <interrupt_init>
	port_init();							//инициализация портов
 210:	26 df       	rcall	.-436    	; 0x5e <port_init>
	timer_init();							//инициализация таймера
 212:	30 df       	rcall	.-416    	; 0x74 <timer_init>
	spi_init();								//инициализация SPI
 214:	08 d2       	rcall	.+1040   	; 0x626 <spi_init>
	USART_Init (8);							//инициализация USART 115200 бод
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	17 d2       	rcall	.+1070   	; 0x64a <USART_Init>
	nrf24_init();							//инициализация радиомодуля
 21c:	9c d1       	rcall	.+824    	; 0x556 <nrf24_init>
	adc_init();
 21e:	37 df       	rcall	.-402    	; 0x8e <adc_init>
    sei();									//глобальное разрешение прерываний
 220:	78 94       	sei
	usart_println("start");					//отправка стартовой строки в порт
 222:	86 e6       	ldi	r24, 0x66	; 102
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	22 d2       	rcall	.+1092   	; 0x66c <usart_println>
	usart_println(str);
	NRF24_Read_Buf(RX_ADDR_P1,buf,3);
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
	usart_println(str);
	*/
	uint8_t blink_counter = 5;
 228:	85 e0       	ldi	r24, 0x05	; 5
	while (blink_counter)
 22a:	19 c0       	rjmp	.+50     	; 0x25e <main+0x50>
	{
		LED_ON();
 22c:	92 b3       	in	r25, 0x12	; 18
 22e:	90 64       	ori	r25, 0x40	; 64
 230:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	2f e7       	ldi	r18, 0x7F	; 127
 234:	38 e3       	ldi	r19, 0x38	; 56
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x2a>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x34>
 242:	00 00       	nop
		_delay_ms(50);
		LED_OFF();
 244:	92 b3       	in	r25, 0x12	; 18
 246:	9f 7b       	andi	r25, 0xBF	; 191
 248:	92 bb       	out	0x12, r25	; 18
 24a:	2f e7       	ldi	r18, 0x7F	; 127
 24c:	38 e3       	ldi	r19, 0x38	; 56
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	21 50       	subi	r18, 0x01	; 1
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x42>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x4c>
 25a:	00 00       	nop
		_delay_ms(50);
		blink_counter--;
 25c:	81 50       	subi	r24, 0x01	; 1
	NRF24_Read_Buf(RX_ADDR_P1,buf,3);
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
	usart_println(str);
	*/
	uint8_t blink_counter = 5;
	while (blink_counter)
 25e:	81 11       	cpse	r24, r1
 260:	e5 cf       	rjmp	.-54     	; 0x22c <main+0x1e>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 262:	9b e0       	ldi	r25, 0x0B	; 11
 264:	88 e1       	ldi	r24, 0x18	; 24
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	a8 95       	wdr
 26c:	81 bd       	out	0x21, r24	; 33
 26e:	0f be       	out	0x3f, r0	; 63
 270:	91 bd       	out	0x21, r25	; 33
		blink_counter--;
	}
	wdt_enable(WDTO_120MS);
    while (1) 
    {
		nrf24l01_receive();			//процедура приема радиомодуля
 272:	03 d1       	rcall	.+518    	; 0x47a <nrf24l01_receive>
 274:	fe cf       	rjmp	.-4      	; 0x272 <main+0x64>

00000276 <NRF24_ReadReg>:
extern volatile uint32_t miliseconds;				//счетчик милисекунд
extern uint8_t buf1[20];							//буфер

//функция чтения регистра модуля
uint8_t NRF24_ReadReg(uint8_t addr)
{
 276:	cf 93       	push	r28
 278:	c8 2f       	mov	r28, r24
	uint8_t dt=0, cmd;								//переменные данных и команды
	CS_ON();											//ногу cs к земле
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	8f 77       	andi	r24, 0x7F	; 127
 27e:	82 bb       	out	0x12, r24	; 18
	dt = spi_changeByte(addr);						//Прием/отправкадайта адреса регистра
 280:	8c 2f       	mov	r24, r28
 282:	de d1       	rcall	.+956    	; 0x640 <spi_changeByte>
	//если адрес равен адрес регистра статус то и возварщаем его состояние	
	if (addr!=STATUS)//а если не равен
 284:	c7 30       	cpi	r28, 0x07	; 7
 286:	11 f0       	breq	.+4      	; 0x28c <NRF24_ReadReg+0x16>
	{
		cmd=0xFF;									//команда NOP для получения данных
		dt = spi_changeByte(cmd);					//
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	da d1       	rcall	.+948    	; 0x640 <spi_changeByte>
	}
	CS_OFF();											//поднимаем ногу CS
 28c:	92 b3       	in	r25, 0x12	; 18
 28e:	90 68       	ori	r25, 0x80	; 128
 290:	92 bb       	out	0x12, r25	; 18
	return dt;	//возвращаемое значение
}
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <NRF24_WriteReg>:
//------------------------------------------------
//функция записи регистра в модуль
void NRF24_WriteReg(uint8_t addr, uint8_t dt)		
{
 296:	cf 93       	push	r28
 298:	c6 2f       	mov	r28, r22
	addr |= W_REGISTER;//включим бит записи в адрес	
	CS_ON();
 29a:	92 b3       	in	r25, 0x12	; 18
 29c:	9f 77       	andi	r25, 0x7F	; 127
 29e:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);									//
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	ca d1       	rcall	.+916    	; 0x638 <spi_sendByte>
	spi_sendByte(dt);										//
 2a4:	8c 2f       	mov	r24, r28
 2a6:	c8 d1       	rcall	.+912    	; 0x638 <spi_sendByte>
	CS_OFF();
 2a8:	82 b3       	in	r24, 0x12	; 18
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	82 bb       	out	0x12, r24	; 18
}
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void)							//активация команд R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
{	//есть в даташите "без плюса"
	uint8_t dt[1] = {ACTIVATE};
	CS_ON();
 2b2:	82 b3       	in	r24, 0x12	; 18
 2b4:	8f 77       	andi	r24, 0x7F	; 127
 2b6:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 2b8:	80 e5       	ldi	r24, 0x50	; 80
 2ba:	be d1       	rcall	.+892    	; 0x638 <spi_sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <NRF24_ToggleFeatures+0xc>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <NRF24_ToggleFeatures+0x12>
	_delay_us(1);
	dt[0] = 0x73;
	spi_sendByte(dt[0]);	
 2c4:	83 e7       	ldi	r24, 0x73	; 115
 2c6:	b8 d1       	rcall	.+880    	; 0x638 <spi_sendByte>
	CS_OFF();
 2c8:	82 b3       	in	r24, 0x12	; 18
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret

000002d0 <NRF24_Read_Buf>:
}
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	d8 2f       	mov	r29, r24
 2e0:	6b 01       	movw	r12, r22
 2e2:	f4 2e       	mov	r15, r20
	CS_ON();
 2e4:	82 b3       	in	r24, 0x12	; 18
 2e6:	8f 77       	andi	r24, 0x7F	; 127
 2e8:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(addr);	
 2ea:	8d 2f       	mov	r24, r29
 2ec:	a5 d1       	rcall	.+842    	; 0x638 <spi_sendByte>
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <NRF24_Read_Buf+0x32>
	{																					//
		pBuf[i] = spi_changeByte(addr);
 2f2:	86 01       	movw	r16, r12
 2f4:	0c 0f       	add	r16, r28
 2f6:	11 1d       	adc	r17, r1
 2f8:	8d 2f       	mov	r24, r29
 2fa:	a2 d1       	rcall	.+836    	; 0x640 <spi_changeByte>
 2fc:	f8 01       	movw	r30, r16
 2fe:	80 83       	st	Z, r24
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
	CS_ON();
	spi_sendByte(addr);	
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	cf 15       	cp	r28, r15
 304:	b0 f3       	brcs	.-20     	; 0x2f2 <NRF24_Read_Buf+0x22>
	{																					//
		pBuf[i] = spi_changeByte(addr);
	}
	CS_OFF();
 306:	82 b3       	in	r24, 0x12	; 18
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	82 bb       	out	0x12, r24	; 18
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	08 95       	ret

0000031c <NRF24_Write_Buf>:
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)	
{//запись буфера
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	8b 01       	movw	r16, r22
 326:	d4 2f       	mov	r29, r20
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON();
 328:	92 b3       	in	r25, 0x12	; 18
 32a:	9f 77       	andi	r25, 0x7F	; 127
 32c:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);	
 32e:	80 62       	ori	r24, 0x20	; 32
 330:	83 d1       	rcall	.+774    	; 0x638 <spi_sendByte>
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <NRF24_Write_Buf+0x18>
 338:	00 c0       	rjmp	.+0      	; 0x33a <NRF24_Write_Buf+0x1e>
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	06 c0       	rjmp	.+12     	; 0x34a <NRF24_Write_Buf+0x2e>
	{
		spi_sendByte(pBuf[i]);	
 33e:	f8 01       	movw	r30, r16
 340:	ec 0f       	add	r30, r28
 342:	f1 1d       	adc	r31, r1
 344:	80 81       	ld	r24, Z
 346:	78 d1       	rcall	.+752    	; 0x638 <spi_sendByte>
{//запись буфера
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON();
	spi_sendByte(addr);	
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	cd 17       	cp	r28, r29
 34c:	c0 f3       	brcs	.-16     	; 0x33e <NRF24_Write_Buf+0x22>
	{
		spi_sendByte(pBuf[i]);	
	}
	CS_OFF();
 34e:	82 b3       	in	r24, 0x12	; 18
 350:	80 68       	ori	r24, 0x80	; 128
 352:	82 bb       	out	0x12, r24	; 18
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void)
{//очистка буфера приема
	uint8_t dt[1] = {FLUSH_RX};
	CS_ON();
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	8f 77       	andi	r24, 0x7F	; 127
 362:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 364:	82 ee       	ldi	r24, 0xE2	; 226
 366:	68 d1       	rcall	.+720    	; 0x638 <spi_sendByte>
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <NRF24_FlushRX+0xc>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <NRF24_FlushRX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF();
 370:	82 b3       	in	r24, 0x12	; 18
 372:	80 68       	ori	r24, 0x80	; 128
 374:	82 bb       	out	0x12, r24	; 18
 376:	08 95       	ret

00000378 <NRF24_FlushTX>:
}
//------------------------------------------------
void NRF24_FlushTX(void)
{//очистка буфера передачи
	uint8_t dt[1] = {FLUSH_TX};
	CS_ON();
 378:	82 b3       	in	r24, 0x12	; 18
 37a:	8f 77       	andi	r24, 0x7F	; 127
 37c:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);
 37e:	81 ee       	ldi	r24, 0xE1	; 225
 380:	5b d1       	rcall	.+694    	; 0x638 <spi_sendByte>
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <NRF24_FlushTX+0xc>
 388:	00 c0       	rjmp	.+0      	; 0x38a <NRF24_FlushTX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF();
 38a:	82 b3       	in	r24, 0x12	; 18
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	82 bb       	out	0x12, r24	; 18
 390:	08 95       	ret

00000392 <NRF24L01_RX_Mode>:
}
//------------------------------------------------
void NRF24L01_RX_Mode(void)
{//режим приемника
	uint8_t regval=0x00;
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значение регистра конфигурации
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	70 df       	rcall	.-288    	; 0x276 <NRF24_ReadReg>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 396:	68 2f       	mov	r22, r24
 398:	63 60       	ori	r22, 0x03	; 3
	NRF24_WriteReg(CONFIG,regval);	//возвращаем значение регистра статуса
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	7c df       	rcall	.-264    	; 0x296 <NRF24_WriteReg>
	
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);		//записываем  адрес передатчика
 39e:	43 e0       	ldi	r20, 0x03	; 3
 3a0:	60 e6       	ldi	r22, 0x60	; 96
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	ba df       	rcall	.-140    	; 0x31c <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS1, TX_ADR_WIDTH);	//записываем адрес приемника
 3a8:	43 e0       	ldi	r20, 0x03	; 3
 3aa:	60 e6       	ldi	r22, 0x60	; 96
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	b5 df       	rcall	.-150    	; 0x31c <NRF24_Write_Buf>
	
	CE_SET();
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	8b e2       	ldi	r24, 0x2B	; 43
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <NRF24L01_RX_Mode+0x2a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <NRF24L01_RX_Mode+0x30>
 3c2:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 3c4:	cc df       	rcall	.-104    	; 0x35e <NRF24_FlushRX>
	NRF24_FlushTX();
 3c6:	d8 df       	rcall	.-80     	; 0x378 <NRF24_FlushTX>
 3c8:	08 95       	ret

000003ca <NRF24L01_TX_Mode>:
}
//------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{//режим передатчика
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);		//записываем адрес передатчика
 3ca:	43 e0       	ldi	r20, 0x03	; 3
 3cc:	63 e6       	ldi	r22, 0x63	; 99
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 e1       	ldi	r24, 0x10	; 16
 3d2:	a4 df       	rcall	.-184    	; 0x31c <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS0, TX_ADR_WIDTH);	//записываем адрес приемника
 3d4:	43 e0       	ldi	r20, 0x03	; 3
 3d6:	63 e6       	ldi	r22, 0x63	; 99
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	8a e0       	ldi	r24, 0x0A	; 10
 3dc:	9f df       	rcall	.-194    	; 0x31c <NRF24_Write_Buf>
	CE_RESET();
 3de:	88 b3       	in	r24, 0x18	; 24
 3e0:	8e 7f       	andi	r24, 0xFE	; 254
 3e2:	88 bb       	out	0x18, r24	; 24
	// Flush buffers
	NRF24_FlushRX();
 3e4:	bc df       	rcall	.-136    	; 0x35e <NRF24_FlushRX>
	NRF24_FlushTX();
 3e6:	c8 df       	rcall	.-112    	; 0x378 <NRF24_FlushTX>
 3e8:	08 95       	ret

000003ea <NRF24_Transmit>:
}
//------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//передача данных в модуль
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	8b 01       	movw	r16, r22
 3f4:	d4 2f       	mov	r29, r20
	CE_RESET();
 3f6:	98 b3       	in	r25, 0x18	; 24
 3f8:	9e 7f       	andi	r25, 0xFE	; 254
 3fa:	98 bb       	out	0x18, r25	; 24
	CS_ON();
 3fc:	92 b3       	in	r25, 0x12	; 18
 3fe:	9f 77       	andi	r25, 0x7F	; 127
 400:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);
 402:	1a d1       	rcall	.+564    	; 0x638 <spi_sendByte>
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 40c:	c0 e0       	ldi	r28, 0x00	; 0
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
	{
		spi_sendByte(pBuf[i]);
 410:	f8 01       	movw	r30, r16
 412:	ec 0f       	add	r30, r28
 414:	f1 1d       	adc	r31, r1
 416:	80 81       	ld	r24, Z
 418:	0f d1       	rcall	.+542    	; 0x638 <spi_sendByte>
{//передача данных в модуль
	CE_RESET();
	CS_ON();
	spi_sendByte(addr);
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 41a:	cf 5f       	subi	r28, 0xFF	; 255
 41c:	cd 17       	cp	r28, r29
 41e:	c0 f3       	brcs	.-16     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
	{
		spi_sendByte(pBuf[i]);
	}
	CS_OFF();
 420:	82 b3       	in	r24, 0x12	; 18
 422:	80 68       	ori	r24, 0x80	; 128
 424:	82 bb       	out	0x12, r24	; 18
	CE_SET();
 426:	88 b3       	in	r24, 0x18	; 24
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	88 bb       	out	0x18, r24	; 24
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <NRF24L01_Send>:
//------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{//отправка данных в эфир
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
	uint8_t regval=0x00;						//переменная для отправки в конфигурационный регистр
	NRF24L01_TX_Mode(pBuf);					//включаем режим передачи
 43c:	c6 df       	rcall	.-116    	; 0x3ca <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значения конфигурационного региста
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	1a df       	rcall	.-460    	; 0x276 <NRF24_ReadReg>
 442:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
	regval &= ~(1<<PRIM_RX);
 444:	68 2f       	mov	r22, r24
 446:	62 60       	ori	r22, 0x02	; 2
	NRF24_WriteReg(CONFIG,regval);//записываем новое значение конфигурационного регистра
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	25 df       	rcall	.-438    	; 0x296 <NRF24_WriteReg>
 44c:	8b e2       	ldi	r24, 0x2B	; 43
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <NRF24L01_Send+0x1a>
 454:	00 c0       	rjmp	.+0      	; 0x456 <NRF24L01_Send+0x20>
 456:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);//отправка данных
 458:	40 e2       	ldi	r20, 0x20	; 32
 45a:	be 01       	movw	r22, r28
 45c:	80 ea       	ldi	r24, 0xA0	; 160
 45e:	c5 df       	rcall	.-118    	; 0x3ea <NRF24_Transmit>
	CE_SET();
 460:	88 b3       	in	r24, 0x18	; 24
 462:	81 60       	ori	r24, 0x01	; 1
 464:	88 bb       	out	0x18, r24	; 24
 466:	98 e2       	ldi	r25, 0x28	; 40
 468:	9a 95       	dec	r25
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	CE_RESET();
 46c:	88 b3       	in	r24, 0x18	; 24
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	88 bb       	out	0x18, r24	; 24
	return 0;
}
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <nrf24l01_receive>:
//------------------------------------------------
void nrf24l01_receive(void)
{
 47a:	cf 93       	push	r28
	if(f_rx == 1)						//если флаг приема поднят
 47c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <f_rx>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	09 f0       	breq	.+2      	; 0x486 <nrf24l01_receive+0xc>
 484:	66 c0       	rjmp	.+204    	; 0x552 <nrf24l01_receive+0xd8>
	{
		if (!f_reset) wdt_reset();
 486:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <f_reset>
 48a:	81 11       	cpse	r24, r1
 48c:	01 c0       	rjmp	.+2      	; 0x490 <nrf24l01_receive+0x16>
 48e:	a8 95       	wdr

		char stektemp = SREG;// сохраним значение стека
 490:	cf b7       	in	r28, 0x3f	; 63
		cli(); //запрещаем прерывания
 492:	f8 94       	cli
		f_rx = 0;						//опускаем флаг приема		
 494:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <f_rx>
		if (rx_buf[0] == RESET)			//если первый принятый байт - команда сброса
 498:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <rx_buf>
 49c:	8f 3f       	cpi	r24, 0xFF	; 255
 49e:	c1 f4       	brne	.+48     	; 0x4d0 <nrf24l01_receive+0x56>
		{
			f_reset = 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <f_reset>
			f_pushed = 0;				//опускаем ылаг нажатия
 4a6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <f_pushed>
			time_ms = 0;				//обнуляем значение времени
 4aa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <time_ms>
 4ae:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <time_ms+0x1>
 4b2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <time_ms+0x2>
 4b6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <time_ms+0x3>
			miliseconds = 0;			//обнуляем счетчик мс
 4ba:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <miliseconds>
 4be:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <miliseconds+0x1>
 4c2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <miliseconds+0x2>
 4c6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <miliseconds+0x3>
			LED_OFF();					//гасим светодиод
 4ca:	82 b3       	in	r24, 0x12	; 18
 4cc:	8f 7b       	andi	r24, 0xBF	; 191
 4ce:	82 bb       	out	0x12, r24	; 18
		}
		if (rx_buf[0] == BUT_ADDR)		//если первый принятый байт совпадает с адресом кнопки
 4d0:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <rx_buf>
 4d4:	87 30       	cpi	r24, 0x07	; 7
 4d6:	e1 f5       	brne	.+120    	; 0x550 <nrf24l01_receive+0xd6>
		{
			if (f_pushed)				//если поднят флаг нажатия
 4d8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <f_pushed>
 4dc:	88 23       	and	r24, r24
 4de:	b1 f0       	breq	.+44     	; 0x50c <nrf24l01_receive+0x92>
			{
				tx_buf[0] = BUT_ADDR;	//записываем в первый байт адрес
 4e0:	e9 e7       	ldi	r30, 0x79	; 121
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = time_ms;	//во второй, предварительно преобразованный в тип unsigned long, записываем значение времени
 4e8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <time_ms>
 4ec:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <time_ms+0x1>
 4f0:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <time_ms+0x2>
 4f4:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <time_ms+0x3>
 4f8:	81 83       	std	Z+1, r24	; 0x01
 4fa:	92 83       	std	Z+2, r25	; 0x02
 4fc:	a3 83       	std	Z+3, r26	; 0x03
 4fe:	b4 83       	std	Z+4, r27	; 0x04
				tx_buf[5] = adc_res;
 500:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 504:	85 83       	std	Z+5, r24	; 0x05
				//_delay_us(100);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);	//			
 506:	cf 01       	movw	r24, r30
 508:	96 df       	rcall	.-212    	; 0x436 <NRF24L01_Send>
 50a:	10 c0       	rjmp	.+32     	; 0x52c <nrf24l01_receive+0xb2>
			}
			else
			{
				tx_buf[0] = BUT_ADDR;
 50c:	e9 e7       	ldi	r30, 0x79	; 121
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	87 e0       	ldi	r24, 0x07	; 7
 512:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = NOT_PUSHED;//miliseconds;//
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	dc 01       	movw	r26, r24
 51a:	81 83       	std	Z+1, r24	; 0x01
 51c:	92 83       	std	Z+2, r25	; 0x02
 51e:	a3 83       	std	Z+3, r26	; 0x03
 520:	b4 83       	std	Z+4, r27	; 0x04
				tx_buf[5] = adc_res;
 522:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 526:	85 83       	std	Z+5, r24	; 0x05
				//_delay_us(100);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);
 528:	cf 01       	movw	r24, r30
 52a:	85 df       	rcall	.-246    	; 0x436 <NRF24L01_Send>
			}
			if (rx_buf[1] == 0x01)
 52c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <rx_buf+0x1>
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	71 f4       	brne	.+28     	; 0x550 <nrf24l01_receive+0xd6>
			{
				if(rx_buf[2] == 0x01) LED_ON();
 534:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <rx_buf+0x2>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	19 f4       	brne	.+6      	; 0x542 <nrf24l01_receive+0xc8>
 53c:	82 b3       	in	r24, 0x12	; 18
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	82 bb       	out	0x12, r24	; 18
				if(rx_buf[2] == 0x00) LED_OFF();
 542:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <rx_buf+0x2>
 546:	81 11       	cpse	r24, r1
 548:	03 c0       	rjmp	.+6      	; 0x550 <nrf24l01_receive+0xd6>
 54a:	82 b3       	in	r24, 0x12	; 18
 54c:	8f 7b       	andi	r24, 0xBF	; 191
 54e:	82 bb       	out	0x12, r24	; 18
			}
		}
		SREG = stektemp;// вернем значение стека
 550:	cf bf       	out	0x3f, r28	; 63
	}
}
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <nrf24_init>:

//------------------------------------------------
void nrf24_init(void)
{//инициализация
	CE_RESET();							//опускаем к земле вывод ce
 556:	88 b3       	in	r24, 0x18	; 24
 558:	8e 7f       	andi	r24, 0xFE	; 254
 55a:	88 bb       	out	0x18, r24	; 24
 55c:	8f e0       	ldi	r24, 0x0F	; 15
 55e:	97 e2       	ldi	r25, 0x27	; 39
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <nrf24_init+0xa>
 564:	00 c0       	rjmp	.+0      	; 0x566 <nrf24_init+0x10>
 566:	00 00       	nop
	_delay_us(5000);					//задержка 5 мс
	//записываем конфигурационный байт, 
	NRF24_WriteReg(CONFIG, 0x0a);		// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 568:	6a e0       	ldi	r22, 0x0A	; 10
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	94 de       	rcall	.-728    	; 0x296 <NRF24_WriteReg>
 56e:	8f e0       	ldi	r24, 0x0F	; 15
 570:	97 e2       	ldi	r25, 0x27	; 39
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <nrf24_init+0x1c>
 576:	00 c0       	rjmp	.+0      	; 0x578 <nrf24_init+0x22>
 578:	00 00       	nop
	_delay_us(5000);
	NRF24_WriteReg(EN_AA, 0x00);		// Enable Pipe0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	8b de       	rcall	.-746    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01);	// Enable Pipe0
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	88 de       	rcall	.-752    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01);		// Setup address width=3 bytes
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	85 de       	rcall	.-758    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x00);	// 1500us, 15 retrans
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	84 e0       	ldi	r24, 0x04	; 4
 590:	82 de       	rcall	.-764    	; 0x296 <NRF24_WriteReg>
	NRF24_ToggleFeatures();				//активация команд
 592:	8f de       	rcall	.-738    	; 0x2b2 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0x07);			//установка стандартных значений регистра FEATURE 
 594:	67 e0       	ldi	r22, 0x07	; 7
 596:	8d e1       	ldi	r24, 0x1D	; 29
 598:	7e de       	rcall	.-772    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);			//отключение динамического размера полезной нагрузки
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	8c e1       	ldi	r24, 0x1C	; 28
 59e:	7b de       	rcall	.-778    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70);		//Reset flags for IRQ
 5a0:	60 e7       	ldi	r22, 0x70	; 112
 5a2:	87 e0       	ldi	r24, 0x07	; 7
 5a4:	78 de       	rcall	.-784    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76);			// частота 2476 MHz
 5a6:	6c e4       	ldi	r22, 0x4C	; 76
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	75 de       	rcall	.-790    	; 0x296 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06);		//TX_PWR:0dBm, Datarate:1Mbps
 5ac:	66 e0       	ldi	r22, 0x06	; 6
 5ae:	86 e0       	ldi	r24, 0x06	; 6
 5b0:	72 de       	rcall	.-796    	; 0x296 <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса передачи
 5b2:	43 e0       	ldi	r20, 0x03	; 3
 5b4:	63 e6       	ldi	r22, 0x63	; 99
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	80 e1       	ldi	r24, 0x10	; 16
 5ba:	b0 de       	rcall	.-672    	; 0x31c <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса приема
 5bc:	43 e0       	ldi	r20, 0x03	; 3
 5be:	63 e6       	ldi	r22, 0x63	; 99
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	8b e0       	ldi	r24, 0x0B	; 11
 5c4:	ab de       	rcall	.-682    	; 0x31c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 5c6:	60 e2       	ldi	r22, 0x20	; 32
 5c8:	81 e1       	ldi	r24, 0x11	; 17
 5ca:	65 de       	rcall	.-822    	; 0x296 <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();					//режим приема
 5cc:	e2 de       	rcall	.-572    	; 0x392 <NRF24L01_RX_Mode>
	LED_OFF();
 5ce:	82 b3       	in	r24, 0x12	; 18
 5d0:	8f 7b       	andi	r24, 0xBF	; 191
 5d2:	82 bb       	out	0x12, r24	; 18
 5d4:	08 95       	ret

000005d6 <IRQ_Callback>:
}
//--------------------------------------------------
void IRQ_Callback(void)
{
 5d6:	cf 93       	push	r28
 5d8:	8a e1       	ldi	r24, 0x1A	; 26
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <IRQ_Callback+0x4>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <IRQ_Callback+0xa>
	
	//LED_ON();
	uint8_t status=0x01;	//переменная статус
	_delay_us(10);			//_delay_us(10);
	status = NRF24_ReadReg(STATUS);	//чтение значения регистра статуса
 5e0:	87 e0       	ldi	r24, 0x07	; 7
 5e2:	49 de       	rcall	.-878    	; 0x276 <NRF24_ReadReg>
 5e4:	c8 2f       	mov	r28, r24
	if(status & RX_DR)				//если есть данные на прием
 5e6:	86 ff       	sbrs	r24, 6
 5e8:	0b c0       	rjmp	.+22     	; 0x600 <IRQ_Callback+0x2a>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);//чтение буфера
 5ea:	40 e2       	ldi	r20, 0x20	; 32
 5ec:	69 e9       	ldi	r22, 0x99	; 153
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	81 e6       	ldi	r24, 0x61	; 97
 5f2:	6e de       	rcall	.-804    	; 0x2d0 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 5f4:	60 e4       	ldi	r22, 0x40	; 64
 5f6:	87 e0       	ldi	r24, 0x07	; 7
 5f8:	4e de       	rcall	.-868    	; 0x296 <NRF24_WriteReg>
		f_rx = 1;						//поднимаем флаг приема
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <f_rx>
	}
	if(status & TX_DS) //данные успешно отправлены
 600:	c5 ff       	sbrs	r28, 5
 602:	08 c0       	rjmp	.+16     	; 0x614 <IRQ_Callback+0x3e>
	{
		NRF24_WriteReg(STATUS, 0x20);	//очистка всех битов кроме пятого
 604:	60 e2       	ldi	r22, 0x20	; 32
 606:	87 e0       	ldi	r24, 0x07	; 7
 608:	46 de       	rcall	.-884    	; 0x296 <NRF24_WriteReg>
		NRF24L01_RX_Mode();				//переход в режим приема
 60a:	c3 de       	rcall	.-634    	; 0x392 <NRF24L01_RX_Mode>
		f_tx = 1;						//поднимаем флаг передачи
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <f_tx>
 612:	07 c0       	rjmp	.+14     	; 0x622 <IRQ_Callback+0x4c>
	}
	else if(status & MAX_RT)//превышение количества попыток отправки
 614:	c4 ff       	sbrs	r28, 4
 616:	05 c0       	rjmp	.+10     	; 0x622 <IRQ_Callback+0x4c>
	{
		NRF24_WriteReg(STATUS, 0x10);	//однуление всех остальных битов, кроме 4го
 618:	60 e1       	ldi	r22, 0x10	; 16
 61a:	87 e0       	ldi	r24, 0x07	; 7
 61c:	3c de       	rcall	.-904    	; 0x296 <NRF24_WriteReg>
		NRF24_FlushTX();				//очистка буфера отправки
 61e:	ac de       	rcall	.-680    	; 0x378 <NRF24_FlushTX>
		//Уходим в режим приёмника
		NRF24L01_RX_Mode();
 620:	b8 de       	rcall	.-656    	; 0x392 <NRF24L01_RX_Mode>
	}
}
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <spi_init>:
#include "spi.h"
#include "main.h"
//инициализация SPI
void spi_init(void)
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //ножки SPI на выход
 626:	87 b3       	in	r24, 0x17	; 23
 628:	8c 62       	ori	r24, 0x2C	; 44
 62a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
 62c:	88 b3       	in	r24, 0x18	; 24
 62e:	83 7d       	andi	r24, 0xD3	; 211
 630:	88 bb       	out	0x18, r24	; 24
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 632:	80 e5       	ldi	r24, 0x50	; 80
 634:	8d b9       	out	0x0d, r24	; 13
 636:	08 95       	ret

00000638 <spi_sendByte>:
}
//отправка байта 
void spi_sendByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 638:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся
 63a:	77 9b       	sbis	0x0e, 7	; 14
 63c:	fe cf       	rjmp	.-4      	; 0x63a <spi_sendByte+0x2>
}
 63e:	08 95       	ret

00000640 <spi_changeByte>:
//прием/отправка байта
uint8_t spi_changeByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 640:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся (обменяются)
 642:	77 9b       	sbis	0x0e, 7	; 14
 644:	fe cf       	rjmp	.-4      	; 0x642 <spi_changeByte+0x2>
	return SPDR;				//возвращаем принятое значение
 646:	8f b1       	in	r24, 0x0f	; 15
 648:	08 95       	ret

0000064a <USART_Init>:
#include "main.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART
		UBRRH = (unsigned char)(ubrr>>8);
 64a:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
 64c:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
 64e:	88 e1       	ldi	r24, 0x18	; 24
 650:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
 652:	8a b1       	in	r24, 0x0a	; 10
 654:	80 68       	ori	r24, 0x80	; 128
 656:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
 658:	8b b1       	in	r24, 0x0b	; 11
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	8b b9       	out	0x0b, r24	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 65e:	8e e8       	ldi	r24, 0x8E	; 142
 660:	80 bd       	out	0x20, r24	; 32
 662:	08 95       	ret

00000664 <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 664:	5d 9b       	sbis	0x0b, 5	; 11
 666:	fe cf       	rjmp	.-4      	; 0x664 <USART_Transmit>
	UDR = data; //Начало передачи данных
 668:	8c b9       	out	0x0c, r24	; 12
 66a:	08 95       	ret

0000066c <usart_println>:
}

void usart_println(char *str)
{
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++)
 676:	c0 e0       	ldi	r28, 0x00	; 0
 678:	d0 e0       	ldi	r29, 0x00	; 0
 67a:	06 c0       	rjmp	.+12     	; 0x688 <usart_println+0x1c>
	{
		USART_Transmit(str[i]); //Функция отправки данных
 67c:	f8 01       	movw	r30, r16
 67e:	ec 0f       	add	r30, r28
 680:	fd 1f       	adc	r31, r29
 682:	80 81       	ld	r24, Z
 684:	ef df       	rcall	.-34     	; 0x664 <USART_Transmit>
	UDR = data; //Начало передачи данных
}

void usart_println(char *str)
{
	for (int i = 0; i < strlen(str); i++)
 686:	21 96       	adiw	r28, 0x01	; 1
 688:	f8 01       	movw	r30, r16
 68a:	01 90       	ld	r0, Z+
 68c:	00 20       	and	r0, r0
 68e:	e9 f7       	brne	.-6      	; 0x68a <usart_println+0x1e>
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	e0 1b       	sub	r30, r16
 694:	f1 0b       	sbc	r31, r17
 696:	ce 17       	cp	r28, r30
 698:	df 07       	cpc	r29, r31
 69a:	80 f3       	brcs	.-32     	; 0x67c <usart_println+0x10>
	{
		USART_Transmit(str[i]); //Функция отправки данных
	}
	USART_Transmit(0x0d);//переход в начало строки
 69c:	8d e0       	ldi	r24, 0x0D	; 13
 69e:	e2 df       	rcall	.-60     	; 0x664 <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
 6a0:	8a e0       	ldi	r24, 0x0A	; 10
 6a2:	e0 df       	rcall	.-64     	; 0x664 <USART_Transmit>
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	08 95       	ret

000006ae <__udivmodsi4>:
 6ae:	a1 e2       	ldi	r26, 0x21	; 33
 6b0:	1a 2e       	mov	r1, r26
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	fd 01       	movw	r30, r26
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <__udivmodsi4_ep>

000006ba <__udivmodsi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	ee 1f       	adc	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	a2 17       	cp	r26, r18
 6c4:	b3 07       	cpc	r27, r19
 6c6:	e4 07       	cpc	r30, r20
 6c8:	f5 07       	cpc	r31, r21
 6ca:	20 f0       	brcs	.+8      	; 0x6d4 <__udivmodsi4_ep>
 6cc:	a2 1b       	sub	r26, r18
 6ce:	b3 0b       	sbc	r27, r19
 6d0:	e4 0b       	sbc	r30, r20
 6d2:	f5 0b       	sbc	r31, r21

000006d4 <__udivmodsi4_ep>:
 6d4:	66 1f       	adc	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	1a 94       	dec	r1
 6de:	69 f7       	brne	.-38     	; 0x6ba <__udivmodsi4_loop>
 6e0:	60 95       	com	r22
 6e2:	70 95       	com	r23
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	9b 01       	movw	r18, r22
 6ea:	ac 01       	movw	r20, r24
 6ec:	bd 01       	movw	r22, r26
 6ee:	cf 01       	movw	r24, r30
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
