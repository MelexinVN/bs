
bs_m8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080006c  0080006c  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ea  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a72  00000000  00000000  000025a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b84  00000000  00000000  0000383c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000043c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	59 c0       	rjmp	.+178    	; 0xb6 <__vector_1>
   4:	7b c0       	rjmp	.+246    	; 0xfc <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	45 c0       	rjmp	.+138    	; 0xa2 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 38       	cpi	r26, 0x81	; 129
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9f d0       	rcall	.+318    	; 0x198 <main>
  5a:	bb c2       	rjmp	.+1398   	; 0x5d2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
void port_init(void)//Инициализация портов 
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	87 bb       	out	0x17, r24	; 23
	// State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	88 bb       	out	0x18, r24	; 24

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  66:	14 ba       	out	0x14, r1	; 20
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  68:	15 ba       	out	0x15, r1	; 21

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  6a:	80 ec       	ldi	r24, 0xC0	; 192
  6c:	81 bb       	out	0x11, r24	; 17
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=P Bit2=T Bit1=T Bit0=T
	PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  6e:	88 e8       	ldi	r24, 0x88	; 136
  70:	82 bb       	out	0x12, r24	; 18
  72:	08 95       	ret

00000074 <timer_init>:
	// Timer Period: 1 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  74:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
  76:	8b e0       	ldi	r24, 0x0B	; 11
  78:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  7a:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  7c:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
  7e:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
  80:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
  82:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x7C;
  84:	8c e7       	ldi	r24, 0x7C	; 124
  86:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
  88:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
  8a:	18 bc       	out	0x28, r1	; 40
  8c:	08 95       	ret

0000008e <interrupt_init>:
	// External Interrupt(s) initialization
	// INT0: On
	// INT0 Mode: Falling Edge
	// INT1: On
	// INT1 Mode: Falling Edge
	GICR|=(1<<INT1) | (1<<INT0);
  8e:	8b b7       	in	r24, 0x3b	; 59
  90:	80 6c       	ori	r24, 0xC0	; 192
  92:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
  94:	8a e0       	ldi	r24, 0x0A	; 10
  96:	85 bf       	out	0x35, r24	; 53
	GIFR=(1<<INTF1) | (1<<INTF0);
  98:	80 ec       	ldi	r24, 0xC0	; 192
  9a:	8a bf       	out	0x3a, r24	; 58
	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
  9c:	81 e1       	ldi	r24, 0x11	; 17
  9e:	89 bf       	out	0x39, r24	; 57
  a0:	08 95       	ret

000000a2 <__vector_11>:
}

ISR(USART_RXC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
	
}
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_1>:

ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	IRQ_Callback();
  d8:	10 d2       	rcall	.+1056   	; 0x4fa <IRQ_Callback>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_2>:

ISR(INT1_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
	if(!f_pushed)							//если опущен флаг нажатия
 10e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <f_pushed>
 112:	81 11       	cpse	r24, r1
 114:	13 c0       	rjmp	.+38     	; 0x13c <__vector_2+0x40>
	{
		f_pushed = 1;						//поднимаем флаг нажатия
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <f_pushed>
		time_ms = miliseconds;				//сохраняем количество мс
 11c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <miliseconds>
 120:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <miliseconds+0x1>
 124:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <miliseconds+0x2>
 128:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <miliseconds+0x3>
 12c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 130:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 134:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <__data_end+0x2>
 138:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <__data_end+0x3>
	}
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
	miliseconds++;							//считаем мс
 160:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <miliseconds>
 164:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <miliseconds+0x1>
 168:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <miliseconds+0x2>
 16c:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <miliseconds+0x3>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	a1 1d       	adc	r26, r1
 174:	b1 1d       	adc	r27, r1
 176:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <miliseconds>
 17a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <miliseconds+0x1>
 17e:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <miliseconds+0x2>
 182:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <miliseconds+0x3>
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:

int main(void)
{
	interrupt_init();						//инициализация прерываний
 198:	7a df       	rcall	.-268    	; 0x8e <interrupt_init>
	port_init();							//инициализация портов
 19a:	61 df       	rcall	.-318    	; 0x5e <port_init>
	timer_init();							//инициализация таймера
 19c:	6b df       	rcall	.-298    	; 0x74 <timer_init>
	spi_init();								//инициализация SPI
 19e:	d5 d1       	rcall	.+938    	; 0x54a <spi_init>
	USART_Init (8);							//инициализация USART 115200 бод
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e4 d1       	rcall	.+968    	; 0x56e <USART_Init>
	nrf24_init();							//инициализация радиомодуля
 1a6:	69 d1       	rcall	.+722    	; 0x47a <nrf24_init>
    sei();									//глобальное разрешение прерываний
 1a8:	78 94       	sei
	usart_println("start");					//отправка стартовой строки в порт
 1aa:	86 e6       	ldi	r24, 0x66	; 102
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	f0 d1       	rcall	.+992    	; 0x590 <usart_println>
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
	usart_println(str);
	*/
    while (1) 
    {
		nrf24l01_receive();			//процедура приема радиомодуля
 1b0:	03 d1       	rcall	.+518    	; 0x3b8 <nrf24l01_receive>
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <main+0x18>

000001b4 <NRF24_ReadReg>:
extern volatile uint32_t miliseconds;				//счетчик милисекунд
extern uint8_t buf1[20];							//буфер

//функция чтения регистра модуля
uint8_t NRF24_ReadReg(uint8_t addr)
{
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
	uint8_t dt=0, cmd;								//переменные данных и команды
	CS_ON;											//ногу cs к земле
 1b8:	82 b3       	in	r24, 0x12	; 18
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	82 bb       	out	0x12, r24	; 18
	dt = spi_changeByte(addr);						//Прием/отправкадайта адреса регистра
 1be:	8c 2f       	mov	r24, r28
 1c0:	d1 d1       	rcall	.+930    	; 0x564 <spi_changeByte>
	//если адрес равен адрес регистра статус то и возварщаем его состояние	
	if (addr!=STATUS)//а если не равен
 1c2:	c7 30       	cpi	r28, 0x07	; 7
 1c4:	11 f0       	breq	.+4      	; 0x1ca <NRF24_ReadReg+0x16>
	{
		cmd=0xFF;									//команда NOP для получения данных
		dt = spi_changeByte(cmd);					//
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	cd d1       	rcall	.+922    	; 0x564 <spi_changeByte>
	}
	CS_OFF;											//поднимаем ногу CS
 1ca:	92 b3       	in	r25, 0x12	; 18
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	92 bb       	out	0x12, r25	; 18
	return dt;	//возвращаемое значение
}
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <NRF24_WriteReg>:
//------------------------------------------------
//функция записи регистра в модуль
void NRF24_WriteReg(uint8_t addr, uint8_t dt)		
{
 1d4:	cf 93       	push	r28
 1d6:	c6 2f       	mov	r28, r22
	addr |= W_REGISTER;//включим бит записи в адрес	
	CS_ON;
 1d8:	92 b3       	in	r25, 0x12	; 18
 1da:	9f 77       	andi	r25, 0x7F	; 127
 1dc:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);									//
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	bd d1       	rcall	.+890    	; 0x55c <spi_sendByte>
	spi_sendByte(dt);										//
 1e2:	8c 2f       	mov	r24, r28
 1e4:	bb d1       	rcall	.+886    	; 0x55c <spi_sendByte>
	CS_OFF;
 1e6:	82 b3       	in	r24, 0x12	; 18
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	82 bb       	out	0x12, r24	; 18
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void)							//активация команд R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
{	//есть в даташите "без плюса"
	uint8_t dt[1] = {ACTIVATE};
	CS_ON;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	8f 77       	andi	r24, 0x7F	; 127
 1f4:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 1f6:	80 e5       	ldi	r24, 0x50	; 80
 1f8:	b1 d1       	rcall	.+866    	; 0x55c <spi_sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <NRF24_ToggleFeatures+0xc>
 200:	00 c0       	rjmp	.+0      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
	_delay_us(1);
	dt[0] = 0x73;
	spi_sendByte(dt[0]);	
 202:	83 e7       	ldi	r24, 0x73	; 115
 204:	ab d1       	rcall	.+854    	; 0x55c <spi_sendByte>
	CS_OFF;
 206:	82 b3       	in	r24, 0x12	; 18
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	08 95       	ret

0000020e <NRF24_Read_Buf>:
}
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	d8 2f       	mov	r29, r24
 21e:	6b 01       	movw	r12, r22
 220:	f4 2e       	mov	r15, r20
	CS_ON;
 222:	82 b3       	in	r24, 0x12	; 18
 224:	8f 77       	andi	r24, 0x7F	; 127
 226:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(addr);	
 228:	8d 2f       	mov	r24, r29
 22a:	98 d1       	rcall	.+816    	; 0x55c <spi_sendByte>
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	08 c0       	rjmp	.+16     	; 0x240 <NRF24_Read_Buf+0x32>
	{																					//
		pBuf[i] = spi_changeByte(addr);
 230:	86 01       	movw	r16, r12
 232:	0c 0f       	add	r16, r28
 234:	11 1d       	adc	r17, r1
 236:	8d 2f       	mov	r24, r29
 238:	95 d1       	rcall	.+810    	; 0x564 <spi_changeByte>
 23a:	f8 01       	movw	r30, r16
 23c:	80 83       	st	Z, r24
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
	CS_ON;
	spi_sendByte(addr);	
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 23e:	cf 5f       	subi	r28, 0xFF	; 255
 240:	cf 15       	cp	r28, r15
 242:	b0 f3       	brcs	.-20     	; 0x230 <NRF24_Read_Buf+0x22>
	{																					//
		pBuf[i] = spi_changeByte(addr);
	}
	CS_OFF;
 244:	82 b3       	in	r24, 0x12	; 18
 246:	80 68       	ori	r24, 0x80	; 128
 248:	82 bb       	out	0x12, r24	; 18
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	08 95       	ret

0000025a <NRF24_Write_Buf>:
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)	
{//запись буфера
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8b 01       	movw	r16, r22
 264:	d4 2f       	mov	r29, r20
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
 266:	92 b3       	in	r25, 0x12	; 18
 268:	9f 77       	andi	r25, 0x7F	; 127
 26a:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);	
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	76 d1       	rcall	.+748    	; 0x55c <spi_sendByte>
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <NRF24_Write_Buf+0x18>
 276:	00 c0       	rjmp	.+0      	; 0x278 <NRF24_Write_Buf+0x1e>
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	06 c0       	rjmp	.+12     	; 0x288 <NRF24_Write_Buf+0x2e>
	{
		spi_sendByte(pBuf[i]);	
 27c:	f8 01       	movw	r30, r16
 27e:	ec 0f       	add	r30, r28
 280:	f1 1d       	adc	r31, r1
 282:	80 81       	ld	r24, Z
 284:	6b d1       	rcall	.+726    	; 0x55c <spi_sendByte>
{//запись буфера
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
	spi_sendByte(addr);	
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 286:	cf 5f       	subi	r28, 0xFF	; 255
 288:	cd 17       	cp	r28, r29
 28a:	c0 f3       	brcs	.-16     	; 0x27c <NRF24_Write_Buf+0x22>
	{
		spi_sendByte(pBuf[i]);	
	}
	CS_OFF;
 28c:	82 b3       	in	r24, 0x12	; 18
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	82 bb       	out	0x12, r24	; 18
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void)
{//очистка буфера приема
	uint8_t dt[1] = {FLUSH_RX};
	CS_ON;
 29c:	82 b3       	in	r24, 0x12	; 18
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);	
 2a2:	82 ee       	ldi	r24, 0xE2	; 226
 2a4:	5b d1       	rcall	.+694    	; 0x55c <spi_sendByte>
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <NRF24_FlushRX+0xc>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <NRF24_FlushRX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 2ae:	82 b3       	in	r24, 0x12	; 18
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret

000002b6 <NRF24_FlushTX>:
}
//------------------------------------------------
void NRF24_FlushTX(void)
{//очистка буфера передачи
	uint8_t dt[1] = {FLUSH_TX};
	CS_ON;
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	82 bb       	out	0x12, r24	; 18
	spi_sendByte(dt[0]);
 2bc:	81 ee       	ldi	r24, 0xE1	; 225
 2be:	4e d1       	rcall	.+668    	; 0x55c <spi_sendByte>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <NRF24_FlushTX+0xc>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <NRF24_FlushTX+0x12>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 2c8:	82 b3       	in	r24, 0x12	; 18
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret

000002d0 <NRF24L01_RX_Mode>:
}
//------------------------------------------------
void NRF24L01_RX_Mode(void)
{//режим приемника
	uint8_t regval=0x00;
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значение регистра конфигурации
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	70 df       	rcall	.-288    	; 0x1b4 <NRF24_ReadReg>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 2d4:	68 2f       	mov	r22, r24
 2d6:	63 60       	ori	r22, 0x03	; 3
	NRF24_WriteReg(CONFIG,regval);	//возвращаем значение регистра статуса
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	7c df       	rcall	.-264    	; 0x1d4 <NRF24_WriteReg>
	
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);		//записываем  адрес передатчика
 2dc:	43 e0       	ldi	r20, 0x03	; 3
 2de:	60 e6       	ldi	r22, 0x60	; 96
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e1       	ldi	r24, 0x10	; 16
 2e4:	ba df       	rcall	.-140    	; 0x25a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS1, TX_ADR_WIDTH);	//записываем адрес приемника
 2e6:	43 e0       	ldi	r20, 0x03	; 3
 2e8:	60 e6       	ldi	r22, 0x60	; 96
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	8a e0       	ldi	r24, 0x0A	; 10
 2ee:	b5 df       	rcall	.-150    	; 0x25a <NRF24_Write_Buf>
	
	CE_SET;
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	88 bb       	out	0x18, r24	; 24
 2f6:	8b e2       	ldi	r24, 0x2B	; 43
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <NRF24L01_RX_Mode+0x2a>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <NRF24L01_RX_Mode+0x30>
 300:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 302:	cc df       	rcall	.-104    	; 0x29c <NRF24_FlushRX>
	NRF24_FlushTX();
 304:	d8 df       	rcall	.-80     	; 0x2b6 <NRF24_FlushTX>
 306:	08 95       	ret

00000308 <NRF24L01_TX_Mode>:
}
//------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{//режим передатчика
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);		//записываем адрес передатчика
 308:	43 e0       	ldi	r20, 0x03	; 3
 30a:	63 e6       	ldi	r22, 0x63	; 99
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	a4 df       	rcall	.-184    	; 0x25a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS0, TX_ADR_WIDTH);	//записываем адрес приемника
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	63 e6       	ldi	r22, 0x63	; 99
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	9f df       	rcall	.-194    	; 0x25a <NRF24_Write_Buf>
	CE_RESET;
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	88 bb       	out	0x18, r24	; 24
	// Flush buffers
	NRF24_FlushRX();
 322:	bc df       	rcall	.-136    	; 0x29c <NRF24_FlushRX>
	NRF24_FlushTX();
 324:	c8 df       	rcall	.-112    	; 0x2b6 <NRF24_FlushTX>
 326:	08 95       	ret

00000328 <NRF24_Transmit>:
}
//------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//передача данных в модуль
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	8b 01       	movw	r16, r22
 332:	d4 2f       	mov	r29, r20
	CE_RESET;
 334:	98 b3       	in	r25, 0x18	; 24
 336:	9e 7f       	andi	r25, 0xFE	; 254
 338:	98 bb       	out	0x18, r25	; 24
	CS_ON;
 33a:	92 b3       	in	r25, 0x12	; 18
 33c:	9f 77       	andi	r25, 0x7F	; 127
 33e:	92 bb       	out	0x12, r25	; 18
	spi_sendByte(addr);
 340:	0d d1       	rcall	.+538    	; 0x55c <spi_sendByte>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <NRF24_Transmit+0x1c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <NRF24_Transmit+0x22>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	06 c0       	rjmp	.+12     	; 0x35a <NRF24_Transmit+0x32>
	{
		spi_sendByte(pBuf[i]);
 34e:	f8 01       	movw	r30, r16
 350:	ec 0f       	add	r30, r28
 352:	f1 1d       	adc	r31, r1
 354:	80 81       	ld	r24, Z
 356:	02 d1       	rcall	.+516    	; 0x55c <spi_sendByte>
{//передача данных в модуль
	CE_RESET;
	CS_ON;
	spi_sendByte(addr);
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 358:	cf 5f       	subi	r28, 0xFF	; 255
 35a:	cd 17       	cp	r28, r29
 35c:	c0 f3       	brcs	.-16     	; 0x34e <NRF24_Transmit+0x26>
	{
		spi_sendByte(pBuf[i]);
	}
	CS_OFF;
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	80 68       	ori	r24, 0x80	; 128
 362:	82 bb       	out	0x12, r24	; 18
	CE_SET;
 364:	88 b3       	in	r24, 0x18	; 24
 366:	81 60       	ori	r24, 0x01	; 1
 368:	88 bb       	out	0x18, r24	; 24
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <NRF24L01_Send>:
//------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{//отправка данных в эфир
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
  uint8_t regval=0x00;						//переменная для отправки в конфигурационный регистр
	NRF24L01_TX_Mode(pBuf);					//включаем режим передачи
 37a:	c6 df       	rcall	.-116    	; 0x308 <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значения конфигурационного региста
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	1a df       	rcall	.-460    	; 0x1b4 <NRF24_ReadReg>
 380:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
	regval &= ~(1<<PRIM_RX);
 382:	68 2f       	mov	r22, r24
 384:	62 60       	ori	r22, 0x02	; 2
	NRF24_WriteReg(CONFIG,regval);//записываем новое значение конфигурационного регистра
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	25 df       	rcall	.-438    	; 0x1d4 <NRF24_WriteReg>
 38a:	8b e2       	ldi	r24, 0x2B	; 43
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <NRF24L01_Send+0x1a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <NRF24L01_Send+0x20>
 394:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);//отправка данных
 396:	45 e0       	ldi	r20, 0x05	; 5
 398:	be 01       	movw	r22, r28
 39a:	80 ea       	ldi	r24, 0xA0	; 160
 39c:	c5 df       	rcall	.-118    	; 0x328 <NRF24_Transmit>
	CE_SET;
 39e:	88 b3       	in	r24, 0x18	; 24
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	88 bb       	out	0x18, r24	; 24
 3a4:	98 e2       	ldi	r25, 0x28	; 40
 3a6:	9a 95       	dec	r25
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	CE_RESET;
 3aa:	88 b3       	in	r24, 0x18	; 24
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	88 bb       	out	0x18, r24	; 24
	return 0;
}
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <nrf24l01_receive>:
//------------------------------------------------
void nrf24l01_receive(void)
{
	if(f_rx == 1)				//если флаг приема поднят
 3b8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <f_rx>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <nrf24l01_receive+0xa>
 3c0:	5b c0       	rjmp	.+182    	; 0x478 <__stack+0x19>
	{
		f_rx = 0;					//опускаем флаг приема		
 3c2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <f_rx>
		if (rx_buf[0] == RESET)	//если первый принятый байт - команда сброса
 3c6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <rx_buf>
 3ca:	8f 3f       	cpi	r24, 0xFF	; 255
 3cc:	a9 f4       	brne	.+42     	; 0x3f8 <nrf24l01_receive+0x40>
		{
			f_pushed = 0;					//опускаем ылаг нажатия
 3ce:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <f_pushed>
			time_ms = 0;					//обнуляем значение времени
 3d2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 3d6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 3da:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end+0x2>
 3de:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x3>
			miliseconds = 0;			//обнуляем счетчик мс
 3e2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <miliseconds>
 3e6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <miliseconds+0x1>
 3ea:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <miliseconds+0x2>
 3ee:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <miliseconds+0x3>
			LED_OFF;							//гасим светодиод
 3f2:	82 b3       	in	r24, 0x12	; 18
 3f4:	8f 7b       	andi	r24, 0xBF	; 191
 3f6:	82 bb       	out	0x12, r24	; 18
		}
		if (rx_buf[0] == BUT_ADDR)	//если первый принятый байт совпадает с адресом кнопки
 3f8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <rx_buf>
 3fc:	8d 30       	cpi	r24, 0x0D	; 13
 3fe:	e1 f5       	brne	.+120    	; 0x478 <__stack+0x19>
		{
			if (f_pushed)							//если поднят флаг нажатия
 400:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <f_pushed>
 404:	88 23       	and	r24, r24
 406:	b1 f0       	breq	.+44     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
			{
				tx_buf[0] = BUT_ADDR;		//записываем в первый байт адрес
 408:	e7 e7       	ldi	r30, 0x77	; 119
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = time_ms;	//во второй, предварительно преобразованный в тип unsigned long, записываем значение времени
 410:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 414:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 418:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__data_end+0x2>
 41c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__data_end+0x3>
 420:	81 83       	std	Z+1, r24	; 0x01
 422:	92 83       	std	Z+2, r25	; 0x02
 424:	a3 83       	std	Z+3, r26	; 0x03
 426:	b4 83       	std	Z+4, r27	; 0x04
 428:	88 ec       	ldi	r24, 0xC8	; 200
 42a:	8a 95       	dec	r24
 42c:	f1 f7       	brne	.-4      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);	//			
 42e:	cf 01       	movw	r24, r30
 430:	a1 df       	rcall	.-190    	; 0x374 <NRF24L01_Send>
 432:	10 c0       	rjmp	.+32     	; 0x454 <__DATA_REGION_LENGTH__+0x54>
			}
			else
			{
				tx_buf[0] = BUT_ADDR;
 434:	e7 e7       	ldi	r30, 0x77	; 119
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	8d e0       	ldi	r24, 0x0D	; 13
 43a:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = NOT_PUSHED;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	dc 01       	movw	r26, r24
 442:	81 83       	std	Z+1, r24	; 0x01
 444:	92 83       	std	Z+2, r25	; 0x02
 446:	a3 83       	std	Z+3, r26	; 0x03
 448:	b4 83       	std	Z+4, r27	; 0x04
 44a:	88 ec       	ldi	r24, 0xC8	; 200
 44c:	8a 95       	dec	r24
 44e:	f1 f7       	brne	.-4      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);
 450:	cf 01       	movw	r24, r30
 452:	90 df       	rcall	.-224    	; 0x374 <NRF24L01_Send>
			}
			if (rx_buf[1] == 0x01)
 454:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <rx_buf+0x1>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	71 f4       	brne	.+28     	; 0x478 <__stack+0x19>
			{
				if(rx_buf[2] == 0x01) LED_ON;
 45c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <rx_buf+0x2>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	19 f4       	brne	.+6      	; 0x46a <__stack+0xb>
 464:	82 b3       	in	r24, 0x12	; 18
 466:	80 64       	ori	r24, 0x40	; 64
 468:	82 bb       	out	0x12, r24	; 18
				if(rx_buf[2] == 0x00) LED_OFF;
 46a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <rx_buf+0x2>
 46e:	81 11       	cpse	r24, r1
 470:	03 c0       	rjmp	.+6      	; 0x478 <__stack+0x19>
 472:	82 b3       	in	r24, 0x12	; 18
 474:	8f 7b       	andi	r24, 0xBF	; 191
 476:	82 bb       	out	0x12, r24	; 18
 478:	08 95       	ret

0000047a <nrf24_init>:
}

//------------------------------------------------
void nrf24_init(void)
{//инициализация
	CE_RESET;							//опускаем к земле вывод ce
 47a:	88 b3       	in	r24, 0x18	; 24
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	88 bb       	out	0x18, r24	; 24
 480:	8f e0       	ldi	r24, 0x0F	; 15
 482:	97 e2       	ldi	r25, 0x27	; 39
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <nrf24_init+0xa>
 488:	00 c0       	rjmp	.+0      	; 0x48a <nrf24_init+0x10>
 48a:	00 00       	nop
	_delay_us(5000);					//задержка 5 мс
	//записываем конфигурационный байт, 
	NRF24_WriteReg(CONFIG, 0x0a);		// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 48c:	6a e0       	ldi	r22, 0x0A	; 10
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	a1 de       	rcall	.-702    	; 0x1d4 <NRF24_WriteReg>
 492:	8f e0       	ldi	r24, 0x0F	; 15
 494:	97 e2       	ldi	r25, 0x27	; 39
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <nrf24_init+0x1c>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <nrf24_init+0x22>
 49c:	00 00       	nop
	_delay_us(5000);
	NRF24_WriteReg(EN_AA, 0x01);		// Enable Pipe0
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	98 de       	rcall	.-720    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01);	// Enable Pipe0
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	95 de       	rcall	.-726    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01);		// Setup address width=3 bytes
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	92 de       	rcall	.-732    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F);	// 1500us, 15 retrans
 4b0:	6f e5       	ldi	r22, 0x5F	; 95
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	8f de       	rcall	.-738    	; 0x1d4 <NRF24_WriteReg>
	NRF24_ToggleFeatures();				//активация команд
 4b6:	9c de       	rcall	.-712    	; 0x1f0 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);			//установка стандартных значений регистра FEATURE 
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	8d e1       	ldi	r24, 0x1D	; 29
 4bc:	8b de       	rcall	.-746    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);			//отключение динамического размера полезной нагрузки
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	8c e1       	ldi	r24, 0x1C	; 28
 4c2:	88 de       	rcall	.-752    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70);		//Reset flags for IRQ
 4c4:	60 e7       	ldi	r22, 0x70	; 112
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	85 de       	rcall	.-758    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76);			// частота 2476 MHz
 4ca:	6c e4       	ldi	r22, 0x4C	; 76
 4cc:	85 e0       	ldi	r24, 0x05	; 5
 4ce:	82 de       	rcall	.-764    	; 0x1d4 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06);		//TX_PWR:0dBm, Datarate:1Mbps
 4d0:	66 e0       	ldi	r22, 0x06	; 6
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	7f de       	rcall	.-770    	; 0x1d4 <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса передачи
 4d6:	43 e0       	ldi	r20, 0x03	; 3
 4d8:	63 e6       	ldi	r22, 0x63	; 99
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e1       	ldi	r24, 0x10	; 16
 4de:	bd de       	rcall	.-646    	; 0x25a <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса приема
 4e0:	43 e0       	ldi	r20, 0x03	; 3
 4e2:	63 e6       	ldi	r22, 0x63	; 99
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	8b e0       	ldi	r24, 0x0B	; 11
 4e8:	b8 de       	rcall	.-656    	; 0x25a <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 4ea:	65 e0       	ldi	r22, 0x05	; 5
 4ec:	81 e1       	ldi	r24, 0x11	; 17
 4ee:	72 de       	rcall	.-796    	; 0x1d4 <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();					//режим приема
 4f0:	ef de       	rcall	.-546    	; 0x2d0 <NRF24L01_RX_Mode>
	LED_OFF;
 4f2:	82 b3       	in	r24, 0x12	; 18
 4f4:	8f 7b       	andi	r24, 0xBF	; 191
 4f6:	82 bb       	out	0x12, r24	; 18
 4f8:	08 95       	ret

000004fa <IRQ_Callback>:
}
//--------------------------------------------------
void IRQ_Callback(void)
{
 4fa:	cf 93       	push	r28
 4fc:	8a e1       	ldi	r24, 0x1A	; 26
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <IRQ_Callback+0x4>
 502:	00 c0       	rjmp	.+0      	; 0x504 <IRQ_Callback+0xa>
	uint8_t status=0x01;	//переменная статус
	_delay_us(10);
	status = NRF24_ReadReg(STATUS);	//чтение значения регистра статуса
 504:	87 e0       	ldi	r24, 0x07	; 7
 506:	56 de       	rcall	.-852    	; 0x1b4 <NRF24_ReadReg>
 508:	c8 2f       	mov	r28, r24
	if(status & RX_DR)				//если есть данные на прием
 50a:	86 ff       	sbrs	r24, 6
 50c:	0b c0       	rjmp	.+22     	; 0x524 <IRQ_Callback+0x2a>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);//чтение буфера
 50e:	45 e0       	ldi	r20, 0x05	; 5
 510:	6c e7       	ldi	r22, 0x7C	; 124
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	81 e6       	ldi	r24, 0x61	; 97
 516:	7b de       	rcall	.-778    	; 0x20e <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 518:	60 e4       	ldi	r22, 0x40	; 64
 51a:	87 e0       	ldi	r24, 0x07	; 7
 51c:	5b de       	rcall	.-842    	; 0x1d4 <NRF24_WriteReg>
		f_rx = 1;						//поднимаем флаг приема
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <f_rx>
	}
	if(status & TX_DS) //данные успешно отправлены
 524:	c5 ff       	sbrs	r28, 5
 526:	08 c0       	rjmp	.+16     	; 0x538 <IRQ_Callback+0x3e>
	{
		NRF24_WriteReg(STATUS, 0x20);	//очистка всех битов кроме пятого
 528:	60 e2       	ldi	r22, 0x20	; 32
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	53 de       	rcall	.-858    	; 0x1d4 <NRF24_WriteReg>
		NRF24L01_RX_Mode();				//переход в режим приема
 52e:	d0 de       	rcall	.-608    	; 0x2d0 <NRF24L01_RX_Mode>
		f_tx = 1;						//поднимаем флаг передачи
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <f_tx>
 536:	07 c0       	rjmp	.+14     	; 0x546 <IRQ_Callback+0x4c>
	}
	else if(status & MAX_RT)//превышение количества попыток отправки
 538:	c4 ff       	sbrs	r28, 4
 53a:	05 c0       	rjmp	.+10     	; 0x546 <IRQ_Callback+0x4c>
	{
		NRF24_WriteReg(STATUS, 0x10);	//однуление всех остальных битов, кроме 4го
 53c:	60 e1       	ldi	r22, 0x10	; 16
 53e:	87 e0       	ldi	r24, 0x07	; 7
 540:	49 de       	rcall	.-878    	; 0x1d4 <NRF24_WriteReg>
		NRF24_FlushTX();				//очистка буфера отправки
 542:	b9 de       	rcall	.-654    	; 0x2b6 <NRF24_FlushTX>
		//Уходим в режим приёмника
		NRF24L01_RX_Mode();
 544:	c5 de       	rcall	.-630    	; 0x2d0 <NRF24L01_RX_Mode>
	}
}
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <spi_init>:
#include "spi.h"
#include "main.h"
//инициализация SPI
void spi_init(void)
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //ножки SPI на выход
 54a:	87 b3       	in	r24, 0x17	; 23
 54c:	8c 62       	ori	r24, 0x2C	; 44
 54e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
 550:	88 b3       	in	r24, 0x18	; 24
 552:	83 7d       	andi	r24, 0xD3	; 211
 554:	88 bb       	out	0x18, r24	; 24
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 556:	80 e5       	ldi	r24, 0x50	; 80
 558:	8d b9       	out	0x0d, r24	; 13
 55a:	08 95       	ret

0000055c <spi_sendByte>:
}
//отправка байта 
void spi_sendByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 55c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся
 55e:	77 9b       	sbis	0x0e, 7	; 14
 560:	fe cf       	rjmp	.-4      	; 0x55e <spi_sendByte+0x2>
}
 562:	08 95       	ret

00000564 <spi_changeByte>:
//прием/отправка байта
uint8_t spi_changeByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 564:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся (обменяются)
 566:	77 9b       	sbis	0x0e, 7	; 14
 568:	fe cf       	rjmp	.-4      	; 0x566 <spi_changeByte+0x2>
	return SPDR;				//возвращаем принятое значение
 56a:	8f b1       	in	r24, 0x0f	; 15
 56c:	08 95       	ret

0000056e <USART_Init>:
#include "main.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART
		UBRRH = (unsigned char)(ubrr>>8);
 56e:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
 570:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
 572:	88 e1       	ldi	r24, 0x18	; 24
 574:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
 576:	8a b1       	in	r24, 0x0a	; 10
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
 57c:	8b b1       	in	r24, 0x0b	; 11
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	8b b9       	out	0x0b, r24	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 582:	8e e8       	ldi	r24, 0x8E	; 142
 584:	80 bd       	out	0x20, r24	; 32
 586:	08 95       	ret

00000588 <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 588:	5d 9b       	sbis	0x0b, 5	; 11
 58a:	fe cf       	rjmp	.-4      	; 0x588 <USART_Transmit>
	UDR = data; //Начало передачи данных
 58c:	8c b9       	out	0x0c, r24	; 12
 58e:	08 95       	ret

00000590 <usart_println>:
}

void usart_println(char *str)
{
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++)
 59a:	c0 e0       	ldi	r28, 0x00	; 0
 59c:	d0 e0       	ldi	r29, 0x00	; 0
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <usart_println+0x1c>
	{
		USART_Transmit(str[i]); //Функция отправки данных
 5a0:	f8 01       	movw	r30, r16
 5a2:	ec 0f       	add	r30, r28
 5a4:	fd 1f       	adc	r31, r29
 5a6:	80 81       	ld	r24, Z
 5a8:	ef df       	rcall	.-34     	; 0x588 <USART_Transmit>
	UDR = data; //Начало передачи данных
}

void usart_println(char *str)
{
	for (int i = 0; i < strlen(str); i++)
 5aa:	21 96       	adiw	r28, 0x01	; 1
 5ac:	f8 01       	movw	r30, r16
 5ae:	01 90       	ld	r0, Z+
 5b0:	00 20       	and	r0, r0
 5b2:	e9 f7       	brne	.-6      	; 0x5ae <usart_println+0x1e>
 5b4:	31 97       	sbiw	r30, 0x01	; 1
 5b6:	e0 1b       	sub	r30, r16
 5b8:	f1 0b       	sbc	r31, r17
 5ba:	ce 17       	cp	r28, r30
 5bc:	df 07       	cpc	r29, r31
 5be:	80 f3       	brcs	.-32     	; 0x5a0 <usart_println+0x10>
	{
		USART_Transmit(str[i]); //Функция отправки данных
	}
	USART_Transmit(0x0d);//переход в начало строки
 5c0:	8d e0       	ldi	r24, 0x0D	; 13
 5c2:	e2 df       	rcall	.-60     	; 0x588 <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	e0 df       	rcall	.-64     	; 0x588 <USART_Transmit>
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
