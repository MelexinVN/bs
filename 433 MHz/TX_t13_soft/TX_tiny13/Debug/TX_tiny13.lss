
TX_tiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bc  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000451  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000339  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b6  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	38 c0       	rjmp	.+112    	; 0x90 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
{

// Input/Output Ports initialization
// Port B initialization
// Function: Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
DDRB=(0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
  22:	88 e0       	ldi	r24, 0x08	; 8
  24:	87 bb       	out	0x17, r24	; 23
// State: Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
  26:	18 ba       	out	0x18, r1	; 24

    /* Replace with your application code */
    while (1) 
    {

		send_rf(DEV_ADDR, CMND);
  28:	6a ea       	ldi	r22, 0xAA	; 170
  2a:	84 e4       	ldi	r24, 0x44	; 68
  2c:	01 d0       	rcall	.+2      	; 0x30 <send_rf>
  2e:	fc cf       	rjmp	.-8      	; 0x28 <main+0x6>

00000030 <send_rf>:
}

//отправка мнформационной посылки в эфир
void send_rf(uint8_t dev_adr, uint8_t command)
{
	RF_LOW();			//низкий уровень на передатчик
  30:	88 b3       	in	r24, 0x18	; 24
  32:	87 7f       	andi	r24, 0xF7	; 247
  34:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  36:	8f ed       	ldi	r24, 0xDF	; 223
  38:	9e e2       	ldi	r25, 0x2E	; 46
  3a:	01 97       	sbiw	r24, 0x01	; 1
  3c:	f1 f7       	brne	.-4      	; 0x3a <send_rf+0xa>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <__DATA_REGION_LENGTH__>
  40:	00 00       	nop
	_delay_us(PAUSE);	//Стартовая пауза
	//Отпрвка преамбулы
	for (uint8_t i = 0; i < PREAMBLE; i++)	//цикл по числу импульсов преамбулы
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	13 c0       	rjmp	.+38     	; 0x6c <__DATA_REGION_LENGTH__+0x2c>
	{
		RF_HIGH();					//высокий уровень
  46:	88 b3       	in	r24, 0x18	; 24
  48:	88 60       	ori	r24, 0x08	; 8
  4a:	88 bb       	out	0x18, r24	; 24
  4c:	ef e5       	ldi	r30, 0x5F	; 95
  4e:	f9 e0       	ldi	r31, 0x09	; 9
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <__DATA_REGION_LENGTH__+0x10>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__DATA_REGION_LENGTH__+0x16>
  56:	00 00       	nop
		_delay_us(PREAM_IMP_DUR);	//пауза длительностью импульса преамбулы
		RF_LOW();					//низкий уровень
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	87 7f       	andi	r24, 0xF7	; 247
  5c:	88 bb       	out	0x18, r24	; 24
  5e:	ef e5       	ldi	r30, 0x5F	; 95
  60:	f9 e0       	ldi	r31, 0x09	; 9
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <__DATA_REGION_LENGTH__+0x22>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__DATA_REGION_LENGTH__+0x28>
  68:	00 00       	nop
void send_rf(uint8_t dev_adr, uint8_t command)
{
	RF_LOW();			//низкий уровень на передатчик
	_delay_us(PAUSE);	//Стартовая пауза
	//Отпрвка преамбулы
	for (uint8_t i = 0; i < PREAMBLE; i++)	//цикл по числу импульсов преамбулы
  6a:	9f 5f       	subi	r25, 0xFF	; 255
  6c:	90 34       	cpi	r25, 0x40	; 64
  6e:	58 f3       	brcs	.-42     	; 0x46 <__DATA_REGION_LENGTH__+0x6>
  70:	8f ed       	ldi	r24, 0xDF	; 223
  72:	9e e2       	ldi	r25, 0x2E	; 46
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <__DATA_REGION_LENGTH__+0x34>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__DATA_REGION_LENGTH__+0x3a>
  7a:	00 00       	nop
		send_zero();
	}
*/

	//конечная пауза
	RF_LOW();						//низкий уровень на передатчик
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	88 bb       	out	0x18, r24	; 24
  82:	ef ed       	ldi	r30, 0xDF	; 223
  84:	fe e2       	ldi	r31, 0x2E	; 46
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <__DATA_REGION_LENGTH__+0x46>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <__DATA_REGION_LENGTH__+0x4c>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
