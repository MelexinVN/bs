
RX_t13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000800  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050d  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000423  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__vector_2>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	35 c0       	rjmp	.+106    	; 0x78 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a5 37       	cpi	r26, 0x75	; 117
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	83 d0       	rcall	.+262    	; 0x134 <main>
  2e:	55 c1       	rjmp	.+682    	; 0x2da <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_2>:
extern uint8_t crc;							//контрольная сумма
volatile uint32_t ten_micros = 0;							//


ISR(PCINT0_vect)
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	2f 93       	push	r18
  3e:	3f 93       	push	r19
  40:	4f 93       	push	r20
  42:	5f 93       	push	r21
  44:	6f 93       	push	r22
  46:	7f 93       	push	r23
  48:	8f 93       	push	r24
  4a:	9f 93       	push	r25
  4c:	af 93       	push	r26
  4e:	bf 93       	push	r27
  50:	ef 93       	push	r30
  52:	ff 93       	push	r31
	RX_Input();
  54:	9d d0       	rcall	.+314    	; 0x190 <RX_Input>
}
  56:	ff 91       	pop	r31
  58:	ef 91       	pop	r30
  5a:	bf 91       	pop	r27
  5c:	af 91       	pop	r26
  5e:	9f 91       	pop	r25
  60:	8f 91       	pop	r24
  62:	7f 91       	pop	r23
  64:	6f 91       	pop	r22
  66:	5f 91       	pop	r21
  68:	4f 91       	pop	r20
  6a:	3f 91       	pop	r19
  6c:	2f 91       	pop	r18
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <__vector_6>:

ISR(TIM0_COMPA_vect)
{
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
	ten_micros++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  96:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	a1 1d       	adc	r26, r1
  9e:	b1 1d       	adc	r27, r1
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ac:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
  b0:	bf 91       	pop	r27
  b2:	af 91       	pop	r26
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <react>:

void react(void)
{
	LED_ON();
  c2:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e7       	ldi	r24, 0x7F	; 127
  c6:	9b eb       	ldi	r25, 0xBB	; 187
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <react+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <react+0xc>
  ce:	00 00       	nop
	_delay_ms(20);
	LED_OFF();
  d0:	c4 98       	cbi	0x18, 4	; 24
  d2:	8f e7       	ldi	r24, 0x7F	; 127
  d4:	9b eb       	ldi	r25, 0xBB	; 187
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <react+0x14>
  da:	00 c0       	rjmp	.+0      	; 0xdc <react+0x1a>
  dc:	00 00       	nop
	_delay_ms(20);
	LED_ON();
  de:	c4 9a       	sbi	0x18, 4	; 24
  e0:	8f e7       	ldi	r24, 0x7F	; 127
  e2:	9b eb       	ldi	r25, 0xBB	; 187
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <react+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <react+0x28>
  ea:	00 00       	nop
	_delay_ms(20);
	LED_OFF();
  ec:	c4 98       	cbi	0x18, 4	; 24
  ee:	8f e7       	ldi	r24, 0x7F	; 127
  f0:	9b eb       	ldi	r25, 0xBB	; 187
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <react+0x30>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <react+0x36>
  f8:	00 00       	nop
	_delay_ms(20);
	LED_ON();
  fa:	c4 9a       	sbi	0x18, 4	; 24
  fc:	8f e7       	ldi	r24, 0x7F	; 127
  fe:	9b eb       	ldi	r25, 0xBB	; 187
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <react+0x3e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <react+0x44>
 106:	00 00       	nop
	_delay_ms(20);
	LED_OFF();
 108:	c4 98       	cbi	0x18, 4	; 24
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	9b eb       	ldi	r25, 0xBB	; 187
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <react+0x4c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <react+0x52>
 114:	00 00       	nop
	_delay_ms(20);
	LED_ON();
 116:	c4 9a       	sbi	0x18, 4	; 24
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	9b eb       	ldi	r25, 0xBB	; 187
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <react+0x5a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <react+0x60>
 122:	00 00       	nop
	_delay_ms(20);
	LED_OFF();
 124:	c4 98       	cbi	0x18, 4	; 24
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	9b eb       	ldi	r25, 0xBB	; 187
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <react+0x68>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <react+0x6e>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <main>:
int main(void)
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
	DDRB=(0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	87 bb       	out	0x17, r24	; 23
	// State: Bit5=T Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
	PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
 138:	18 ba       	out	0x18, r1	; 24
	// Clock value: 9600,000 kHz
	// Mode: CTC top=OCR0A
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	// Timer Period: 10 us
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8f bd       	out	0x2f, r24	; 47
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 142:	12 be       	out	0x32, r1	; 50
	OCR0A=0x5F;
 144:	8f e5       	ldi	r24, 0x5F	; 95
 146:	86 bf       	out	0x36, r24	; 54
	OCR0B=0x00;
 148:	19 bc       	out	0x29, r1	; 41

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	89 bf       	out	0x39, r24	; 57

	// External Interrupt(s) initialization
	// INT0: Off
	// Interrupt on any change on pins PCINT0-5: On
	GIMSK=(0<<INT0) | (1<<PCIE);
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(0<<ISC01) | (0<<ISC00);
 152:	15 be       	out	0x35, r1	; 53
	PCMSK=(0<<PCINT5) | (0<<PCINT4) | (1<<PCINT3) | (0<<PCINT2) | (0<<PCINT1) | (0<<PCINT0);
 154:	98 e0       	ldi	r25, 0x08	; 8
 156:	95 bb       	out	0x15, r25	; 21
	GIFR=(0<<INTF0) | (1<<PCIF);
 158:	8a bf       	out	0x3a, r24	; 58
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 15a:	99 e2       	ldi	r25, 0x29	; 41
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	a8 95       	wdr
 164:	81 bd       	out	0x21, r24	; 33
 166:	0f be       	out	0x3f, r0	; 63
 168:	91 bd       	out	0x21, r25	; 33

	wdt_enable(WDTO_8S);
	//react();

	sei();
 16a:	78 94       	sei

    while (1) 
    {
		if(f_received == 1) //если пришёл пакет
 16c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <f_received>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	61 f4       	brne	.+24     	; 0x18c <main+0x58>
		{
			//if (dev_addr == 0xAA) 
			react();
 174:	a6 df       	rcall	.-180    	; 0xc2 <react>
			ten_micros = 0;
 176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 17e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 182:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			//опускаем флаг приема
			f_received = 0;
 186:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <f_received>
			//dev_addr = 0;
			sei();   // включаем прерывания 
 18a:	78 94       	sei
		}
		wdt_reset();
 18c:	a8 95       	wdr
    }
 18e:	ee cf       	rjmp	.-36     	; 0x16c <main+0x38>

00000190 <RX_Input>:
uint8_t bit_counter = 0;							//счетчик битов
extern uint32_t ten_micros;

//процедура приема посылки (запускается по внешнему прерыванию)
void RX_Input()
{
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15

	wdt_reset();
 198:	a8 95       	wdr
	//получаем текущее значение микросекунд
	uint32_t cur_timestamp = ten_micros;
 19a:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19e:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1a6:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	//определение текущего состояния входа
	uint8_t  cur_status = (RF_PIN_Port & (1<<RF_IN_Pin));
 1aa:	86 b3       	in	r24, 0x16	; 22
	//определение длительности прошедшего интервала
	uint32_t pulse_duration = (cur_timestamp - last_change)*10;
 1ac:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <last_change>
 1b0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <last_change+0x1>
 1b4:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <last_change+0x2>
 1b8:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <last_change+0x3>
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	28 1b       	sub	r18, r24
 1c2:	39 0b       	sbc	r19, r25
 1c4:	4a 0b       	sbc	r20, r26
 1c6:	5b 0b       	sbc	r21, r27
 1c8:	ca 01       	movw	r24, r20
 1ca:	b9 01       	movw	r22, r18
 1cc:	2a e0       	ldi	r18, 0x0A	; 10
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	69 d0       	rcall	.+210    	; 0x2a8 <__mulsi3>
	//сохраняем значение времени
	last_change = cur_timestamp;
 1d6:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <last_change>
 1da:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <last_change+0x1>
 1de:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <last_change+0x2>
 1e2:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <last_change+0x3>
	//если преамбулы еще не было
	if(preamble_count < PREAM_NUM_IMP)
 1e6:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <preamble_count>
 1ea:	20 34       	cpi	r18, 0x40	; 64
 1ec:	b8 f4       	brcc	.+46     	; 0x21c <RX_Input+0x8c>
				return;								//выход из подпрограммы
			}
		}
		else		//если прошедший импульс был 1
		{//если длительность в нужных пределах
			if((PREAM_IMP_DUR - INTERVAL < pulse_duration) && (pulse_duration < PREAM_IMP_DUR + INTERVAL))
 1ee:	6b 01       	movw	r12, r22
 1f0:	7c 01       	movw	r14, r24
 1f2:	3d eb       	ldi	r19, 0xBD	; 189
 1f4:	c3 1a       	sub	r12, r19
 1f6:	32 e0       	ldi	r19, 0x02	; 2
 1f8:	d3 0a       	sbc	r13, r19
 1fa:	e1 08       	sbc	r14, r1
 1fc:	f1 08       	sbc	r15, r1
 1fe:	47 e5       	ldi	r20, 0x57	; 87
 200:	c4 16       	cp	r12, r20
 202:	42 e0       	ldi	r20, 0x02	; 2
 204:	d4 06       	cpc	r13, r20
 206:	e1 04       	cpc	r14, r1
 208:	f1 04       	cpc	r15, r1
 20a:	d8 f4       	brcc	.+54     	; 0x242 <RX_Input+0xb2>
			{//пришел первый импульс преамбулы
				preamble_count++;																					//считаем импульс преамбулы
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <preamble_count>

				if(preamble_count == PREAM_NUM_IMP)												//если пришел последний импульс преамбулы
 212:	20 34       	cpi	r18, 0x40	; 64
 214:	19 f4       	brne	.+6      	; 0x21c <RX_Input+0x8c>
				{
					bit_counter = 0;				//обнуляем счетчик битов
 216:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <bit_counter>
					return;									//выход из подпрограммы
 21a:	41 c0       	rjmp	.+130    	; 0x29e <RX_Input+0x10e>
				return;										//выход из подпрограммы
			}
		}
	}

	if(preamble_count == PREAM_NUM_IMP)		//если приамбула принята полностью
 21c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <preamble_count>
 220:	20 34       	cpi	r18, 0x40	; 64
 222:	e9 f5       	brne	.+122    	; 0x29e <RX_Input+0x10e>
				return;								//выход из подпрограммы
			}
		}
		else	//если предыдущий импульс был 1
		{			//если импульс в диапазоне
			if((ZERO_DUR - INTERVAL < pulse_duration) && (pulse_duration < ONE_DUR + INTERVAL))
 224:	6b 01       	movw	r12, r22
 226:	7c 01       	movw	r14, r24
 228:	5d eb       	ldi	r21, 0xBD	; 189
 22a:	c5 1a       	sub	r12, r21
 22c:	52 e0       	ldi	r21, 0x02	; 2
 22e:	d5 0a       	sbc	r13, r21
 230:	e1 08       	sbc	r14, r1
 232:	f1 08       	sbc	r15, r1
 234:	27 e2       	ldi	r18, 0x27	; 39
 236:	c2 16       	cp	r12, r18
 238:	2a e0       	ldi	r18, 0x0A	; 10
 23a:	d2 06       	cpc	r13, r18
 23c:	e1 04       	cpc	r14, r1
 23e:	f1 04       	cpc	r15, r1
 240:	18 f0       	brcs	.+6      	; 0x248 <RX_Input+0xb8>
					return;									//выход из подпрограммы
				}
			}
			else												//если пришедший импульс выбивается из диапазона
			{
				preamble_count = 0;				//обнуляем счетчик импульсов преамбулы
 242:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <preamble_count>
				return;										//выход из подпрограммы
 246:	2b c0       	rjmp	.+86     	; 0x29e <RX_Input+0x10e>
		else	//если предыдущий импульс был 1
		{			//если импульс в диапазоне
			if((ZERO_DUR - INTERVAL < pulse_duration) && (pulse_duration < ONE_DUR + INTERVAL))
			{	//если импульс короткий, записываем в массив 0, если длинный - 1
				
				bit_array[SIZE_ARRAY - bit_counter - 1] = (pulse_duration < DURATION) ? 0 : 1;
 248:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <bit_counter>
 24c:	e7 e0       	ldi	r30, 0x07	; 7
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	e2 1b       	sub	r30, r18
 252:	f1 09       	sbc	r31, r1
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	60 3d       	cpi	r22, 0xD0	; 208
 258:	77 40       	sbci	r23, 0x07	; 7
 25a:	81 05       	cpc	r24, r1
 25c:	91 05       	cpc	r25, r1
 25e:	08 f4       	brcc	.+2      	; 0x262 <RX_Input+0xd2>
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	e4 59       	subi	r30, 0x94	; 148
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	30 83       	st	Z, r19

				//if (bit_counter >= 7) LED_ON();

				bit_counter++;		//считаем импульс
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	82 0f       	add	r24, r18
 26c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <bit_counter>
				
				if (bit_counter == SIZE_ARRAY)	//если приняты все байты
 270:	88 30       	cpi	r24, 0x08	; 8
 272:	a9 f4       	brne	.+42     	; 0x29e <RX_Input+0x10e>
 274:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <dev_addr>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
				{
					//сохранение адреса устройства
					for(uint8_t i = 0; i < 8; i++)		//8 раз
					{//сдвигаем значение влево и прибавляем текущее значение бита
						dev_addr = (dev_addr << 1) + bit_array[i];
 27c:	f9 01       	movw	r30, r18
 27e:	e4 59       	subi	r30, 0x94	; 148
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	90 81       	ld	r25, Z
 284:	88 0f       	add	r24, r24
 286:	89 0f       	add	r24, r25
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
				bit_counter++;		//считаем импульс
				
				if (bit_counter == SIZE_ARRAY)	//если приняты все байты
				{
					//сохранение адреса устройства
					for(uint8_t i = 0; i < 8; i++)		//8 раз
 28c:	28 30       	cpi	r18, 0x08	; 8
 28e:	31 05       	cpc	r19, r1
 290:	a9 f7       	brne	.-22     	; 0x27c <RX_Input+0xec>
 292:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <dev_addr>
					crc_calc = ~crc_calc + 1;
					preamble_count = 0;//обнуляем счетчик преамбулы
					//сравниваем принятую и рассчитанную контрольные суммы
					if (crc == crc_calc) f_received = 1;	//поднимаем флаг приема*/
					
					f_received = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <f_received>
					cli(); 	// отключаем прерывания 
 29c:	f8 94       	cli
				preamble_count = 0;	//обнуляем счетчик преамбулы
				return;							//выход из подпрограммы
			}
		}
	}
}
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	08 95       	ret

000002a8 <__mulsi3>:
 2a8:	ee 27       	eor	r30, r30
 2aa:	ff 27       	eor	r31, r31

000002ac <__mulsi3_helper>:
 2ac:	aa 27       	eor	r26, r26
 2ae:	bb 27       	eor	r27, r27
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <__mulsi3_helper+0x16>
 2b2:	a2 0f       	add	r26, r18
 2b4:	b3 1f       	adc	r27, r19
 2b6:	e4 1f       	adc	r30, r20
 2b8:	f5 1f       	adc	r31, r21
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	44 1f       	adc	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	98 f3       	brcs	.-26     	; 0x2b2 <__mulsi3_helper+0x6>
 2cc:	70 40       	sbci	r23, 0x00	; 0
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <__mulsi3_helper+0xe>
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	99 f7       	brne	.-26     	; 0x2ba <__mulsi3_helper+0xe>
 2d4:	bd 01       	movw	r22, r26
 2d6:	cf 01       	movw	r24, r30
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
