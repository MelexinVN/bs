
bs_m328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000006d0  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010c  0080010c  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001652  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa2  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b84  00000000  00000000  00003cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  9e:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <port_init>:
void port_init(void)//Инициализация портов
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
  a6:	8d e2       	ldi	r24, 0x2D	; 45
  a8:	84 b9       	out	0x04, r24	; 4
	// State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	85 b9       	out	0x05, r24	; 5

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  ae:	17 b8       	out	0x07, r1	; 7
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  b0:	18 b8       	out	0x08, r1	; 8

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	8a b9       	out	0x0a, r24	; 10
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=P Bit2=T Bit1=T Bit0=T
	PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  b6:	88 e8       	ldi	r24, 0x88	; 136
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	08 95       	ret

000000bc <timer_init>:
	// Timer Period: 1 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1H=0x00;
  c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L=0x00;
  ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1H=0x00;
  ce:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L=0x00;
  d2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1AH=0x00;
  d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL=0x7C;
  da:	8c e7       	ldi	r24, 0x7C	; 124
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1BH=0x00;
  e0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL=0x00;
  e4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  e8:	08 95       	ret

000000ea <interrupt_init>:
	// INT1: On
	// INT1 Mode: Falling Edge
	// Interrupt on any change on pins PCINT0-7: Off
	// Interrupt on any change on pins PCINT8-14: Off
	// Interrupt on any change on pins PCINT16-23: Off
	EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK=(1<<INT1) | (1<<INT0);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	8d bb       	out	0x1d, r24	; 29
	EIFR=(1<<INTF1) | (1<<INTF0);
  f4:	8c bb       	out	0x1c, r24	; 28
	PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
  f6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 100:	08 95       	ret

00000102 <__vector_18>:
}

ISR(USART_RX_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
	
}
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_1>:

ISR(INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	IRQ_Callback();
 138:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <IRQ_Callback>
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_2>:

ISR(INT1_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
	if(!f_pushed)							//если опущен флаг нажатия
 170:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <f_pushed>
 174:	81 11       	cpse	r24, r1
 176:	13 c0       	rjmp	.+38     	; 0x19e <__vector_2+0x40>
	{
		f_pushed = 1;						//поднимаем флаг нажатия
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <f_pushed>
		time_ms = miliseconds;				//сохраняем количество мс
 17e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <miliseconds>
 182:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <miliseconds+0x1>
 186:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <miliseconds+0x2>
 18a:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <miliseconds+0x3>
 18e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 192:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 196:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 19a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	}
}
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
	miliseconds++;							//считаем мс
 1c2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <miliseconds>
 1c6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <miliseconds+0x1>
 1ca:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <miliseconds+0x2>
 1ce:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <miliseconds+0x3>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <miliseconds>
 1dc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <miliseconds+0x1>
 1e0:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <miliseconds+0x2>
 1e4:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <miliseconds+0x3>
}
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:


int main(void)
{
	interrupt_init();						//инициализация прерываний
 1fa:	0e 94 75 00 	call	0xea	; 0xea <interrupt_init>
	port_init();							//инициализация портов
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <port_init>
	timer_init();							//инициализация таймера
 202:	0e 94 5e 00 	call	0xbc	; 0xbc <timer_init>
	spi_init();								//инициализация SPI
 206:	0e 94 13 03 	call	0x626	; 0x626 <spi_init>
	USART_Init (8);							//инициализация USART 115200 бод
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 27 03 	call	0x64e	; 0x64e <USART_Init>
	nrf24_init();							//инициализация радиомодуля
 212:	0e 94 94 02 	call	0x528	; 0x528 <nrf24_init>
    sei();									//глобальное разрешение прерываний
 216:	78 94       	sei
	usart_println("start");					//отправка стартовой строки в порт
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 42 03 	call	0x684	; 0x684 <usart_println>
	sprintf(str,"RX_ADDR: 0x%02X, 0x%02X, 0x%02X",buf[0],buf[1],buf[2]);
	usart_println(str);
	*/
    while (1) 
    {
		nrf24l01_receive();			//процедура приема радиомодуля
 220:	0e 94 31 02 	call	0x462	; 0x462 <nrf24l01_receive>
 224:	fd cf       	rjmp	.-6      	; 0x220 <main+0x26>

00000226 <NRF24_ReadReg>:
extern volatile uint32_t miliseconds;				//счетчик милисекунд
extern uint8_t buf1[20];							//буфер

//функция чтения регистра модуля
uint8_t NRF24_ReadReg(uint8_t addr)
{
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
	uint8_t dt=0, cmd;								//переменные данных и команды
	CS_ON;											//ногу cs к земле
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	8f 77       	andi	r24, 0x7F	; 127
 22e:	8b b9       	out	0x0b, r24	; 11
	dt = spi_changeByte(addr);						//Прием/отправкадайта адреса регистра
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 21 03 	call	0x642	; 0x642 <spi_changeByte>
	//если адрес равен адрес регистра статус то и возварщаем его состояние	
	if (addr!=STATUS)//а если не равен
 236:	c7 30       	cpi	r28, 0x07	; 7
 238:	19 f0       	breq	.+6      	; 0x240 <NRF24_ReadReg+0x1a>
	{
		cmd=0xFF;									//команда NOP для получения данных
		dt = spi_changeByte(cmd);					//
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	0e 94 21 03 	call	0x642	; 0x642 <spi_changeByte>
	}
	CS_OFF;											//поднимаем ногу CS
 240:	9b b1       	in	r25, 0x0b	; 11
 242:	90 68       	ori	r25, 0x80	; 128
 244:	9b b9       	out	0x0b, r25	; 11
	return dt;	//возвращаемое значение
}
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <NRF24_WriteReg>:
//------------------------------------------------
//функция записи регистра в модуль
void NRF24_WriteReg(uint8_t addr, uint8_t dt)		
{
 24a:	cf 93       	push	r28
 24c:	c6 2f       	mov	r28, r22
	addr |= W_REGISTER;//включим бит записи в адрес	
	CS_ON;
 24e:	9b b1       	in	r25, 0x0b	; 11
 250:	9f 77       	andi	r25, 0x7F	; 127
 252:	9b b9       	out	0x0b, r25	; 11
	spi_sendByte(addr);									//
 254:	80 62       	ori	r24, 0x20	; 32
 256:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
	spi_sendByte(dt);										//
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
	CS_OFF;
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	80 68       	ori	r24, 0x80	; 128
 264:	8b b9       	out	0x0b, r24	; 11
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void)							//активация команд R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
{	//есть в даташите "без плюса"
	uint8_t dt[1] = {ACTIVATE};
	CS_ON;
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	8f 77       	andi	r24, 0x7F	; 127
 26e:	8b b9       	out	0x0b, r24	; 11
	spi_sendByte(dt[0]);	
 270:	80 e5       	ldi	r24, 0x50	; 80
 272:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <NRF24_ToggleFeatures+0xe>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <NRF24_ToggleFeatures+0x14>
	_delay_us(1);
	dt[0] = 0x73;
	spi_sendByte(dt[0]);	
 27e:	83 e7       	ldi	r24, 0x73	; 115
 280:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
	CS_OFF;
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 68       	ori	r24, 0x80	; 128
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	08 95       	ret

0000028c <NRF24_Read_Buf>:
}
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	d8 2f       	mov	r29, r24
 29c:	6b 01       	movw	r12, r22
 29e:	f4 2e       	mov	r15, r20
	CS_ON;
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	8b b9       	out	0x0b, r24	; 11
	spi_sendByte(addr);	
 2a6:	8d 2f       	mov	r24, r29
 2a8:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <NRF24_Read_Buf+0x36>
	{																					//
		pBuf[i] = spi_changeByte(addr);
 2b0:	86 01       	movw	r16, r12
 2b2:	0c 0f       	add	r16, r28
 2b4:	11 1d       	adc	r17, r1
 2b6:	8d 2f       	mov	r24, r29
 2b8:	0e 94 21 03 	call	0x642	; 0x642 <spi_changeByte>
 2bc:	f8 01       	movw	r30, r16
 2be:	80 83       	st	Z, r24
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//чтение буфера (несколько байт)
	CS_ON;
	spi_sendByte(addr);	
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 2c0:	cf 5f       	subi	r28, 0xFF	; 255
 2c2:	cf 15       	cp	r28, r15
 2c4:	a8 f3       	brcs	.-22     	; 0x2b0 <NRF24_Read_Buf+0x24>
	{																					//
		pBuf[i] = spi_changeByte(addr);
	}
	CS_OFF;
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8b b9       	out	0x0b, r24	; 11
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	df 90       	pop	r13
 2d8:	cf 90       	pop	r12
 2da:	08 95       	ret

000002dc <NRF24_Write_Buf>:
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)	
{//запись буфера
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	8b 01       	movw	r16, r22
 2e6:	d4 2f       	mov	r29, r20
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
 2e8:	9b b1       	in	r25, 0x0b	; 11
 2ea:	9f 77       	andi	r25, 0x7F	; 127
 2ec:	9b b9       	out	0x0b, r25	; 11
	spi_sendByte(addr);	
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <NRF24_Write_Buf+0x1a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <NRF24_Write_Buf+0x20>
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <NRF24_Write_Buf+0x32>
	{
		spi_sendByte(pBuf[i]);	
 300:	f8 01       	movw	r30, r16
 302:	ec 0f       	add	r30, r28
 304:	f1 1d       	adc	r31, r1
 306:	80 81       	ld	r24, Z
 308:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
{//запись буфера
	addr |= W_REGISTER;//включим бит записи в адрес
	CS_ON;
	spi_sendByte(addr);	
	_delay_us(1);
	for (uint8_t i = 0 ; i < bytes ; i++) 		//для нужного количества байт
 30c:	cf 5f       	subi	r28, 0xFF	; 255
 30e:	cd 17       	cp	r28, r29
 310:	b8 f3       	brcs	.-18     	; 0x300 <NRF24_Write_Buf+0x24>
	{
		spi_sendByte(pBuf[i]);	
	}
	CS_OFF;
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	80 68       	ori	r24, 0x80	; 128
 316:	8b b9       	out	0x0b, r24	; 11
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void)
{//очистка буфера приема
	uint8_t dt[1] = {FLUSH_RX};
	CS_ON;
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	8f 77       	andi	r24, 0x7F	; 127
 326:	8b b9       	out	0x0b, r24	; 11
	spi_sendByte(dt[0]);	
 328:	82 ee       	ldi	r24, 0xE2	; 226
 32a:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	8a 95       	dec	r24
 332:	f1 f7       	brne	.-4      	; 0x330 <NRF24_FlushRX+0xe>
 334:	00 c0       	rjmp	.+0      	; 0x336 <NRF24_FlushRX+0x14>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 336:	8b b1       	in	r24, 0x0b	; 11
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	8b b9       	out	0x0b, r24	; 11
 33c:	08 95       	ret

0000033e <NRF24_FlushTX>:
}
//------------------------------------------------
void NRF24_FlushTX(void)
{//очистка буфера передачи
	uint8_t dt[1] = {FLUSH_TX};
	CS_ON;
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	8f 77       	andi	r24, 0x7F	; 127
 342:	8b b9       	out	0x0b, r24	; 11
	spi_sendByte(dt[0]);
 344:	81 ee       	ldi	r24, 0xE1	; 225
 346:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <NRF24_FlushTX+0xe>
 350:	00 c0       	rjmp	.+0      	; 0x352 <NRF24_FlushTX+0x14>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	CS_OFF;
 352:	8b b1       	in	r24, 0x0b	; 11
 354:	80 68       	ori	r24, 0x80	; 128
 356:	8b b9       	out	0x0b, r24	; 11
 358:	08 95       	ret

0000035a <NRF24L01_RX_Mode>:
}
//------------------------------------------------
void NRF24L01_RX_Mode(void)
{//режим приемника
	uint8_t regval=0x00;
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значение регистра конфигурации
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 13 01 	call	0x226	; 0x226 <NRF24_ReadReg>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 360:	68 2f       	mov	r22, r24
 362:	63 60       	ori	r22, 0x03	; 3
	NRF24_WriteReg(CONFIG,regval);	//возвращаем значение регистра статуса
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);		//записываем  адрес передатчика
 36a:	43 e0       	ldi	r20, 0x03	; 3
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	71 e0       	ldi	r23, 0x01	; 1
 370:	80 e1       	ldi	r24, 0x10	; 16
 372:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS1, TX_ADR_WIDTH);	//записываем адрес приемника
 376:	43 e0       	ldi	r20, 0x03	; 3
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	71 e0       	ldi	r23, 0x01	; 1
 37c:	8a e0       	ldi	r24, 0x0A	; 10
 37e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	
	CE_SET;
 382:	85 b1       	in	r24, 0x05	; 5
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 b9       	out	0x05, r24	; 5
 388:	8b e2       	ldi	r24, 0x2B	; 43
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <NRF24L01_RX_Mode+0x32>
 390:	00 c0       	rjmp	.+0      	; 0x392 <NRF24L01_RX_Mode+0x38>
 392:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 394:	0e 94 91 01 	call	0x322	; 0x322 <NRF24_FlushRX>
	NRF24_FlushTX();
 398:	0e 94 9f 01 	call	0x33e	; 0x33e <NRF24_FlushTX>
 39c:	08 95       	ret

0000039e <NRF24L01_TX_Mode>:
}
//------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{//режим передатчика
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);		//записываем адрес передатчика
 39e:	43 e0       	ldi	r20, 0x03	; 3
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	71 e0       	ldi	r23, 0x01	; 1
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS0, TX_ADR_WIDTH);	//записываем адрес приемника
 3aa:	43 e0       	ldi	r20, 0x03	; 3
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	71 e0       	ldi	r23, 0x01	; 1
 3b0:	8a e0       	ldi	r24, 0x0A	; 10
 3b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	CE_RESET;
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	8e 7f       	andi	r24, 0xFE	; 254
 3ba:	85 b9       	out	0x05, r24	; 5
	// Flush buffers
	NRF24_FlushRX();
 3bc:	0e 94 91 01 	call	0x322	; 0x322 <NRF24_FlushRX>
	NRF24_FlushTX();
 3c0:	0e 94 9f 01 	call	0x33e	; 0x33e <NRF24_FlushTX>
 3c4:	08 95       	ret

000003c6 <NRF24_Transmit>:
}
//------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{//передача данных в модуль
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	8b 01       	movw	r16, r22
 3d0:	d4 2f       	mov	r29, r20
	CE_RESET;
 3d2:	95 b1       	in	r25, 0x05	; 5
 3d4:	9e 7f       	andi	r25, 0xFE	; 254
 3d6:	95 b9       	out	0x05, r25	; 5
	CS_ON;
 3d8:	9b b1       	in	r25, 0x0b	; 11
 3da:	9f 77       	andi	r25, 0x7F	; 127
 3dc:	9b b9       	out	0x0b, r25	; 11
	spi_sendByte(addr);
 3de:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <NRF24_Transmit+0x1e>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <NRF24_Transmit+0x24>
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <NRF24_Transmit+0x36>
	{
		spi_sendByte(pBuf[i]);
 3ee:	f8 01       	movw	r30, r16
 3f0:	ec 0f       	add	r30, r28
 3f2:	f1 1d       	adc	r31, r1
 3f4:	80 81       	ld	r24, Z
 3f6:	0e 94 1c 03 	call	0x638	; 0x638 <spi_sendByte>
{//передача данных в модуль
	CE_RESET;
	CS_ON;
	spi_sendByte(addr);
	_delay_us(1); //пауза в микросекунду для завершения процесса
	for (uint8_t i = 0 ; i < bytes ; i++) 
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
 3fc:	cd 17       	cp	r28, r29
 3fe:	b8 f3       	brcs	.-18     	; 0x3ee <NRF24_Transmit+0x28>
	{
		spi_sendByte(pBuf[i]);
	}
	CS_OFF;
 400:	8b b1       	in	r24, 0x0b	; 11
 402:	80 68       	ori	r24, 0x80	; 128
 404:	8b b9       	out	0x0b, r24	; 11
	CE_SET;
 406:	85 b1       	in	r24, 0x05	; 5
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	85 b9       	out	0x05, r24	; 5
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <NRF24L01_Send>:
//------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{//отправка данных в эфир
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
  uint8_t regval=0x00;						//переменная для отправки в конфигурационный регистр
	NRF24L01_TX_Mode(pBuf);					//включаем режим передачи
 41c:	0e 94 cf 01 	call	0x39e	; 0x39e <NRF24L01_TX_Mode>
	regval = NRF24_ReadReg(CONFIG);	//сохраняем значения конфигурационного региста
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 13 01 	call	0x226	; 0x226 <NRF24_ReadReg>
 426:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);					
	regval &= ~(1<<PRIM_RX);
 428:	68 2f       	mov	r22, r24
 42a:	62 60       	ori	r22, 0x02	; 2
	NRF24_WriteReg(CONFIG,regval);//записываем новое значение конфигурационного регистра
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
 432:	8b e2       	ldi	r24, 0x2B	; 43
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <NRF24L01_Send+0x20>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <NRF24L01_Send+0x26>
 43c:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);//отправка данных
 43e:	45 e0       	ldi	r20, 0x05	; 5
 440:	be 01       	movw	r22, r28
 442:	80 ea       	ldi	r24, 0xA0	; 160
 444:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <NRF24_Transmit>
	CE_SET;
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	85 b9       	out	0x05, r24	; 5
 44e:	98 e2       	ldi	r25, 0x28	; 40
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <NRF24L01_Send+0x3a>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	CE_RESET;
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8e 7f       	andi	r24, 0xFE	; 254
 458:	85 b9       	out	0x05, r24	; 5
	return 0;
}
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <nrf24l01_receive>:
//------------------------------------------------
void nrf24l01_receive(void)
{
	if(f_rx == 1)				//если флаг приема поднят
 462:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <f_rx>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <nrf24l01_receive+0xa>
 46a:	5d c0       	rjmp	.+186    	; 0x526 <nrf24l01_receive+0xc4>
	{
		f_rx = 0;					//опускаем флаг приема		
 46c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <f_rx>
		if (rx_buf[0] == RESET)	//если первый принятый байт - команда сброса
 470:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <rx_buf>
 474:	8f 3f       	cpi	r24, 0xFF	; 255
 476:	a9 f4       	brne	.+42     	; 0x4a2 <nrf24l01_receive+0x40>
		{
			f_pushed = 0;					//опускаем ылаг нажатия
 478:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <f_pushed>
			time_ms = 0;					//обнуляем значение времени
 47c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 480:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 484:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
 488:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
			miliseconds = 0;			//обнуляем счетчик мс
 48c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <miliseconds>
 490:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <miliseconds+0x1>
 494:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <miliseconds+0x2>
 498:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <miliseconds+0x3>
			LED_OFF;							//гасим светодиод
 49c:	8b b1       	in	r24, 0x0b	; 11
 49e:	8f 7b       	andi	r24, 0xBF	; 191
 4a0:	8b b9       	out	0x0b, r24	; 11
		}
		if (rx_buf[0] == BUT_ADDR)	//если первый принятый байт совпадает с адресом кнопки
 4a2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <rx_buf>
 4a6:	89 30       	cpi	r24, 0x09	; 9
 4a8:	f1 f5       	brne	.+124    	; 0x526 <nrf24l01_receive+0xc4>
		{
			if (f_pushed)							//если поднят флаг нажатия
 4aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <f_pushed>
 4ae:	88 23       	and	r24, r24
 4b0:	b9 f0       	breq	.+46     	; 0x4e0 <nrf24l01_receive+0x7e>
			{
				tx_buf[0] = BUT_ADDR;		//записываем в первый байт адрес
 4b2:	e7 e1       	ldi	r30, 0x17	; 23
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	89 e0       	ldi	r24, 0x09	; 9
 4b8:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = time_ms;	//во второй, предварительно преобразованный в тип unsigned long, записываем значение времени
 4ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 4be:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 4c2:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 4c6:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 4ca:	81 83       	std	Z+1, r24	; 0x01
 4cc:	92 83       	std	Z+2, r25	; 0x02
 4ce:	a3 83       	std	Z+3, r26	; 0x03
 4d0:	b4 83       	std	Z+4, r27	; 0x04
 4d2:	88 ec       	ldi	r24, 0xC8	; 200
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <nrf24l01_receive+0x72>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);	//			
 4d8:	cf 01       	movw	r24, r30
 4da:	0e 94 0b 02 	call	0x416	; 0x416 <NRF24L01_Send>
 4de:	11 c0       	rjmp	.+34     	; 0x502 <nrf24l01_receive+0xa0>
			}
			else
			{
				tx_buf[0] = BUT_ADDR;
 4e0:	e7 e1       	ldi	r30, 0x17	; 23
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	89 e0       	ldi	r24, 0x09	; 9
 4e6:	80 83       	st	Z, r24
				(*(unsigned long*)&tx_buf[1]) = NOT_PUSHED;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	dc 01       	movw	r26, r24
 4ee:	81 83       	std	Z+1, r24	; 0x01
 4f0:	92 83       	std	Z+2, r25	; 0x02
 4f2:	a3 83       	std	Z+3, r26	; 0x03
 4f4:	b4 83       	std	Z+4, r27	; 0x04
 4f6:	88 ec       	ldi	r24, 0xC8	; 200
 4f8:	8a 95       	dec	r24
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <nrf24l01_receive+0x96>
				_delay_us(75);		//ПОДОБРАНО ЭКСПЕРИМЕНТАЛЬНО!
				NRF24L01_Send(tx_buf);
 4fc:	cf 01       	movw	r24, r30
 4fe:	0e 94 0b 02 	call	0x416	; 0x416 <NRF24L01_Send>
			}
			if (rx_buf[1] == 0x01)
 502:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rx_buf+0x1>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	71 f4       	brne	.+28     	; 0x526 <nrf24l01_receive+0xc4>
			{
				if(rx_buf[2] == 0x01) LED_ON;
 50a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_buf+0x2>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	19 f4       	brne	.+6      	; 0x518 <nrf24l01_receive+0xb6>
 512:	8b b1       	in	r24, 0x0b	; 11
 514:	80 64       	ori	r24, 0x40	; 64
 516:	8b b9       	out	0x0b, r24	; 11
				if(rx_buf[2] == 0x00) LED_OFF;
 518:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_buf+0x2>
 51c:	81 11       	cpse	r24, r1
 51e:	03 c0       	rjmp	.+6      	; 0x526 <nrf24l01_receive+0xc4>
 520:	8b b1       	in	r24, 0x0b	; 11
 522:	8f 7b       	andi	r24, 0xBF	; 191
 524:	8b b9       	out	0x0b, r24	; 11
 526:	08 95       	ret

00000528 <nrf24_init>:
}

//------------------------------------------------
void nrf24_init(void)
{//инициализация
	CE_RESET;							//опускаем к земле вывод ce
 528:	85 b1       	in	r24, 0x05	; 5
 52a:	8e 7f       	andi	r24, 0xFE	; 254
 52c:	85 b9       	out	0x05, r24	; 5
 52e:	8f e0       	ldi	r24, 0x0F	; 15
 530:	97 e2       	ldi	r25, 0x27	; 39
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <nrf24_init+0xa>
 536:	00 c0       	rjmp	.+0      	; 0x538 <nrf24_init+0x10>
 538:	00 00       	nop
	_delay_us(5000);					//задержка 5 мс
	//записываем конфигурационный байт, 
	NRF24_WriteReg(CONFIG, 0x0a);		// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 53a:	6a e0       	ldi	r22, 0x0A	; 10
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
 542:	8f e0       	ldi	r24, 0x0F	; 15
 544:	97 e2       	ldi	r25, 0x27	; 39
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <nrf24_init+0x1e>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <nrf24_init+0x24>
 54c:	00 00       	nop
	_delay_us(5000);
	NRF24_WriteReg(EN_AA, 0x01);		// Enable Pipe0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01);	// Enable Pipe0
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01);		// Setup address width=3 bytes
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F);	// 1500us, 15 retrans
 566:	6f e5       	ldi	r22, 0x5F	; 95
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_ToggleFeatures();				//активация команд
 56e:	0e 94 35 01 	call	0x26a	; 0x26a <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);			//установка стандартных значений регистра FEATURE 
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	8d e1       	ldi	r24, 0x1D	; 29
 576:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);			//отключение динамического размера полезной нагрузки
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	8c e1       	ldi	r24, 0x1C	; 28
 57e:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70);		//Reset flags for IRQ
 582:	60 e7       	ldi	r22, 0x70	; 112
 584:	87 e0       	ldi	r24, 0x07	; 7
 586:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76);			// частота 2476 MHz
 58a:	6c e4       	ldi	r22, 0x4C	; 76
 58c:	85 e0       	ldi	r24, 0x05	; 5
 58e:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06);		//TX_PWR:0dBm, Datarate:1Mbps
 592:	66 e0       	ldi	r22, 0x06	; 6
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса передачи
 59a:	43 e0       	ldi	r20, 0x03	; 3
 59c:	63 e0       	ldi	r22, 0x03	; 3
 59e:	71 e0       	ldi	r23, 0x01	; 1
 5a0:	80 e1       	ldi	r24, 0x10	; 16
 5a2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS0, TX_ADR_WIDTH);//запись адреса приема
 5a6:	43 e0       	ldi	r20, 0x03	; 3
 5a8:	63 e0       	ldi	r22, 0x03	; 3
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	8b e0       	ldi	r24, 0x0B	; 11
 5ae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 5b2:	65 e0       	ldi	r22, 0x05	; 5
 5b4:	81 e1       	ldi	r24, 0x11	; 17
 5b6:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();					//режим приема
 5ba:	0e 94 ad 01 	call	0x35a	; 0x35a <NRF24L01_RX_Mode>
	LED_OFF;
 5be:	8b b1       	in	r24, 0x0b	; 11
 5c0:	8f 7b       	andi	r24, 0xBF	; 191
 5c2:	8b b9       	out	0x0b, r24	; 11
 5c4:	08 95       	ret

000005c6 <IRQ_Callback>:
}
//--------------------------------------------------
void IRQ_Callback(void)
{
 5c6:	cf 93       	push	r28
 5c8:	8a e1       	ldi	r24, 0x1A	; 26
 5ca:	8a 95       	dec	r24
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <IRQ_Callback+0x4>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <IRQ_Callback+0xa>
	uint8_t status=0x01;	//переменная статус
	_delay_us(10);
	status = NRF24_ReadReg(STATUS);	//чтение значения регистра статуса
 5d0:	87 e0       	ldi	r24, 0x07	; 7
 5d2:	0e 94 13 01 	call	0x226	; 0x226 <NRF24_ReadReg>
 5d6:	c8 2f       	mov	r28, r24
	if(status & RX_DR)				//если есть данные на прием
 5d8:	86 ff       	sbrs	r24, 6
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <IRQ_Callback+0x30>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);//чтение буфера
 5dc:	45 e0       	ldi	r20, 0x05	; 5
 5de:	6c e1       	ldi	r22, 0x1C	; 28
 5e0:	71 e0       	ldi	r23, 0x01	; 1
 5e2:	81 e6       	ldi	r24, 0x61	; 97
 5e4:	0e 94 46 01 	call	0x28c	; 0x28c <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS, 0x40);	//запись в регистр статуса 1 в шестой бит, обнуление остальных
 5e8:	60 e4       	ldi	r22, 0x40	; 64
 5ea:	87 e0       	ldi	r24, 0x07	; 7
 5ec:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
		f_rx = 1;						//поднимаем флаг приема
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <f_rx>
	}
	if(status & TX_DS) //данные успешно отправлены
 5f6:	c5 ff       	sbrs	r28, 5
 5f8:	0a c0       	rjmp	.+20     	; 0x60e <IRQ_Callback+0x48>
	{
		NRF24_WriteReg(STATUS, 0x20);	//очистка всех битов кроме пятого
 5fa:	60 e2       	ldi	r22, 0x20	; 32
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
		NRF24L01_RX_Mode();				//переход в режим приема
 602:	0e 94 ad 01 	call	0x35a	; 0x35a <NRF24L01_RX_Mode>
		f_tx = 1;						//поднимаем флаг передачи
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f_tx>
 60c:	0a c0       	rjmp	.+20     	; 0x622 <IRQ_Callback+0x5c>
	}
	else if(status & MAX_RT)//превышение количества попыток отправки
 60e:	c4 ff       	sbrs	r28, 4
 610:	08 c0       	rjmp	.+16     	; 0x622 <IRQ_Callback+0x5c>
	{
		NRF24_WriteReg(STATUS, 0x10);	//однуление всех остальных битов, кроме 4го
 612:	60 e1       	ldi	r22, 0x10	; 16
 614:	87 e0       	ldi	r24, 0x07	; 7
 616:	0e 94 25 01 	call	0x24a	; 0x24a <NRF24_WriteReg>
		NRF24_FlushTX();				//очистка буфера отправки
 61a:	0e 94 9f 01 	call	0x33e	; 0x33e <NRF24_FlushTX>
		//Уходим в режим приёмника
		NRF24L01_RX_Mode();
 61e:	0e 94 ad 01 	call	0x35a	; 0x35a <NRF24L01_RX_Mode>
	}
}
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <spi_init>:
#include "spi.h"
#include "main.h"
//инициализация SPI
void spi_init(void)
{
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //ножки SPI на выход
 626:	84 b1       	in	r24, 0x04	; 4
 628:	8c 62       	ori	r24, 0x2C	; 44
 62a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
 62c:	85 b1       	in	r24, 0x05	; 5
 62e:	83 7d       	andi	r24, 0xD3	; 211
 630:	85 b9       	out	0x05, r24	; 5
	SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 632:	80 e5       	ldi	r24, 0x50	; 80
 634:	8c bd       	out	0x2c, r24	; 44
 636:	08 95       	ret

00000638 <spi_sendByte>:
}
//отправка байта 
void spi_sendByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 638:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся
 63a:	0d b4       	in	r0, 0x2d	; 45
 63c:	07 fe       	sbrs	r0, 7
 63e:	fd cf       	rjmp	.-6      	; 0x63a <spi_sendByte+0x2>
}
 640:	08 95       	ret

00000642 <spi_changeByte>:
//прием/отправка байта
uint8_t spi_changeByte(uint8_t byte)
{
	SPDR = byte;				//записываем байт в регистр
 642:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//подождем пока данные передадутся (обменяются)
 644:	0d b4       	in	r0, 0x2d	; 45
 646:	07 fe       	sbrs	r0, 7
 648:	fd cf       	rjmp	.-6      	; 0x644 <spi_changeByte+0x2>
	return SPDR;				//возвращаем принятое значение
 64a:	8e b5       	in	r24, 0x2e	; 46
 64c:	08 95       	ret

0000064e <USART_Init>:
#include "main.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART
		UBRR0H = (unsigned char)(ubrr>>8);
 64e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char)ubrr;
 652:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		UCSR0B=(1<<RXEN0)|( 1<<TXEN0); //Включаем прием и передачу по USART
 656:	e1 ec       	ldi	r30, 0xC1	; 193
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	88 e1       	ldi	r24, 0x18	; 24
 65c:	80 83       	st	Z, r24
		UCSR0B |= (1<<RXCIE0); //Разрешаем прерывание при передаче
 65e:	80 81       	ld	r24, Z
 660:	80 68       	ori	r24, 0x80	; 128
 662:	80 83       	st	Z, r24
		UCSR0A |= (1<<U2X0); // Для 8 мгц
 664:	e0 ec       	ldi	r30, 0xC0	; 192
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	82 60       	ori	r24, 0x02	; 2
 66c:	80 83       	st	Z, r24
		UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);// Обращаемся именно к регистру UCSRC (URSEL=1),
 66e:	8e e0       	ldi	r24, 0x0E	; 14
 670:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 674:	08 95       	ret

00000676 <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
 676:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 67a:	95 ff       	sbrs	r25, 5
 67c:	fc cf       	rjmp	.-8      	; 0x676 <USART_Transmit>
	UDR0 = data; //Начало передачи данных
 67e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 682:	08 95       	ret

00000684 <usart_println>:
}

void usart_println(char *str)
{
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(str); i++)
 68e:	c0 e0       	ldi	r28, 0x00	; 0
 690:	d0 e0       	ldi	r29, 0x00	; 0
 692:	07 c0       	rjmp	.+14     	; 0x6a2 <usart_println+0x1e>
	{
		USART_Transmit(str[i]); //Функция отправки данных
 694:	f8 01       	movw	r30, r16
 696:	ec 0f       	add	r30, r28
 698:	fd 1f       	adc	r31, r29
 69a:	80 81       	ld	r24, Z
 69c:	0e 94 3b 03 	call	0x676	; 0x676 <USART_Transmit>
	UDR0 = data; //Начало передачи данных
}

void usart_println(char *str)
{
	for (int i = 0; i < strlen(str); i++)
 6a0:	21 96       	adiw	r28, 0x01	; 1
 6a2:	f8 01       	movw	r30, r16
 6a4:	01 90       	ld	r0, Z+
 6a6:	00 20       	and	r0, r0
 6a8:	e9 f7       	brne	.-6      	; 0x6a4 <usart_println+0x20>
 6aa:	31 97       	sbiw	r30, 0x01	; 1
 6ac:	e0 1b       	sub	r30, r16
 6ae:	f1 0b       	sbc	r31, r17
 6b0:	ce 17       	cp	r28, r30
 6b2:	df 07       	cpc	r29, r31
 6b4:	78 f3       	brcs	.-34     	; 0x694 <usart_println+0x10>
	{
		USART_Transmit(str[i]); //Функция отправки данных
	}
	USART_Transmit(0x0d);//переход в начало строки
 6b6:	8d e0       	ldi	r24, 0x0D	; 13
 6b8:	0e 94 3b 03 	call	0x676	; 0x676 <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	0e 94 3b 03 	call	0x676	; 0x676 <USART_Transmit>
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
